{"version":3,"sources":["serviceWorker.js","Interfaces/Notification/INotification.tsx","UIHandling/NotificationsHandler.tsx","Domain/ImportFile/FileProcessors/CSVProcessor.tsx","ReduxStore/ReduxState.js","ReduxStore/Actions/ReducerActionTypes.js","ReduxStore/reduxStore.js","ReduxStore/Reducers/ReduxReducer.js","Domain/ReduxStoreHandling/ImportedData/ImportedData.tsx","ReduxStore/Actions/ReducerActions.tsx","Domain/ImportFile/ImportFileData.tsx","UIHandling/ImportFilesHandler.tsx","UI/LoggedIn/Notifications/AlertNotification.tsx","UI/LoggedIn/ImportFileHandling/Import/ImportedFileStats.tsx","UI/LoggedIn/ImportFileHandling/Analyse/FileAnalysisComponent.tsx","Interfaces/Analyse/IAnalysedFileData.tsx","Domain/ReduxStoreHandling/AnalysedData/ResetAnalysedData.tsx","Domain/AnalyseFile/DataAnalysis/AnalyseIntervalData.tsx","Domain/ReduxStoreHandling/AnalysedData/CreateAnalysedData.tsx","Domain/AnalyseFile/DataAnalysis/AnalyseNominalData.tsx","Domain/AnalyseFile/DataAnalysis/AnalyseOrdinalData.tsx","Domain/AnalyseFile/DataAnalysis/AnalyseBinaryData.tsx","Domain/AnalyseFile/DataAnalysis/AnalyseIgnoreData.tsx","Domain/AnalyseFile/AnalyseFileData.tsx","Domain/ReduxStoreHandling/AnalysedData/GetAnalysedData.tsx","UIHandling/AnalyseFileHandler.tsx","UI/LoggedIn/ImportFileHandling/Analyse/DataTypes.tsx","UIHandling/ResetDataHandler.tsx","UI/LoggedIn/ImportFileHandling/ImportFilesComponent.tsx","UI/LoggedIn/Home/Home.js","UI/LoggedIn/ViewImportedData/ImportedDataTable.tsx","UI/LoggedIn/ViewImportedData/ViewImportedData.tsx","UI/LoggedIn/Navigation/TabPanel.js","UI/LoggedIn/ViewAnalysedData/Tables/IntervalDataTable.tsx","UI/LoggedIn/ViewAnalysedData/Tables/NominalDataTable.tsx","UI/LoggedIn/ViewAnalysedData/Tables/OrdinalDataTable.tsx","UI/LoggedIn/ViewAnalysedData/Tables/BinaryDataTable.tsx","UI/LoggedIn/ViewAnalysedData/Tables/IgnoreDataTable.tsx","UI/LoggedIn/ViewAnalysedData/ViewAnalysedData.tsx","UI/LoggedIn/Visualisation/Line/LineSeriesVis.tsx","Interfaces/Visualisations/Line/ILineSeriesOptions.tsx","Domain/Visualisations/LineSeries/LineSeriesOptionsValidate.tsx","Util/DataHandler.tsx","Domain/ReduxStoreHandling/Plotting/Line/LineSeriesOptions.tsx","Domain/Visualisations/LineSeries/LineSeriesCreateVis.tsx","Domain/ReduxStoreHandling/Plotting/Line/CurrentLineVisual.tsx","UIHandling/Visualisations/LineSeries/LineSeriesVisHandler.tsx","UIHandling/Visualisations/LineSeries/LineSeriesOptionsHandler.tsx","UI/LoggedIn/Visualisation/Line/LineOptions.tsx","Interfaces/Visualisations/Bar/IBarSeriesOptions.tsx","UI/LoggedIn/Visualisation/Line/LineSeriesPage.tsx","Domain/Visualisations/BarSeries/BarSeriesOptionsValidate.tsx","Domain/ReduxStoreHandling/Plotting/Bar/BarSeriesOptions.tsx","Domain/Visualisations/BarSeries/BarSeriesCreateVis.tsx","Domain/ReduxStoreHandling/Plotting/Bar/CurrentBarVisual.tsx","UIHandling/Visualisations/BarSeries/BarSeriesVisHandler.tsx","UIHandling/Visualisations/BarSeries/BarSeriesOptionsHandler.tsx","UI/LoggedIn/Visualisation/Bar/BarOptions.tsx","UI/LoggedIn/Visualisation/Bar/BarSeriesVis.tsx","UI/LoggedIn/Visualisation/Bar/BarSeriesPage.tsx","UI/LoggedIn/Visualisation/Mark/MarkSeriesVis.tsx","Domain/Visualisations/MarkSeries/MarkSeriesOptionsValidate.tsx","Domain/ReduxStoreHandling/Plotting/Mark/MarkSeriesOptions.tsx","Domain/Visualisations/MarkSeries/MarkSeriesCreateVis.tsx","Domain/ReduxStoreHandling/Plotting/Mark/CurrentMarkVisual.tsx","UIHandling/Visualisations/MarkSeries/MarkSeriesVisHandler.tsx","UIHandling/Visualisations/MarkSeries/MarkSeriesOptionsHandler.tsx","UI/LoggedIn/Visualisation/Mark/MarkOptions.tsx","UI/LoggedIn/Visualisation/Mark/MarkSeriesPage.tsx","Domain/Visualisations/HeatmapSeries/HeatmapSeriesOptionsValidate.tsx","Domain/ReduxStoreHandling/Plotting/Heatmap/HeatmapSeriesOptions.tsx","Domain/Visualisations/HeatmapSeries/HeatmapCreateVis.tsx","Domain/ReduxStoreHandling/Plotting/Heatmap/CurrentHeatmapVisual.tsx","UIHandling/Visualisations/HeatmapSeries/HeatmapVisHandler.tsx","UIHandling/Visualisations/HeatmapSeries/HeatmapSeriesOptionsHandler.tsx","UI/LoggedIn/Visualisation/Heatmap/HeatmapOptions.tsx","UI/LoggedIn/Visualisation/Heatmap/HeatmapVis.tsx","UI/LoggedIn/Visualisation/Heatmap/HeatmapPage.tsx","UI/LoggedIn/Visualisation/Area/AreaSeriesVis.tsx","Domain/ReduxStoreHandling/Plotting/Area/AreaSeriesOptions.tsx","Domain/Visualisations/AreaSeries/AreaSeriesOptionsValidate.tsx","Domain/Visualisations/AreaSeries/AreaSeriesCreateVis.tsx","Domain/ReduxStoreHandling/Plotting/Area/CurrentAreaVis.tsx","UIHandling/Visualisations/AreaSeries/AreaSeriesVisHandler.ts","UIHandling/Visualisations/AreaSeries/AreaSeriesOptionsHandler.tsx","UI/LoggedIn/Visualisation/Area/AreaOptions.tsx","UI/LoggedIn/Visualisation/Area/AreaSeriesPage.tsx","UI/LoggedIn/Visualisation/Radial/RadialSeriesVis.tsx","Domain/ReduxStoreHandling/Plotting/Radial/RadialSeriesOptions.tsx","Domain/Visualisations/RadialSeries/RadialSeriesOptionsValidate.tsx","Domain/Visualisations/RadialSeries/RadialSeriesCreateVis.tsx","Domain/ReduxStoreHandling/Plotting/Radial/CurrentRadialVisual.tsx","UIHandling/Visualisations/Radial/RadialSeriesVisHandler.tsx","UIHandling/Visualisations/Radial/RadialSeriesOptionsHandler.tsx","UI/LoggedIn/Visualisation/Radial/RadialOptions.tsx","UI/LoggedIn/Visualisation/Radial/RadialSeriesPage.tsx","UI/LoggedIn/Visualisation/VisualiseNav.tsx","UI/LoggedIn/Visualisation/Visualisations.tsx","UI/LoggedIn/Navigation/UserNavigation.tsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","AlertType","NotificationsHandler","notifications","notification","this","push","join","length","notificationsHandler","concat","getNotifications","papa","require","CSVProcessor","csvFile","csvErrors","parse","header","skipEmptyLines","errors","i","addNotification","type","message","row","dataFields","getCSVFields","dataObjects","csvToObjects","dataArrays","csvToArrays","data","ReduxState","importedData","analysedData","fields","intervalFields","intervalDataObjects","nominalFields","nominalDataObjects","ordinalFields","ordinalDataObjects","binaryFields","binaryDataObjects","ignoreFields","ignoreDataObjects","lineSeriesOptions","currentLineVisual","barSeriesOptions","currentBarVisual","markSeriesOptions","currentMarkVisual","heatmapSeriesOptions","currentHeatmapVisual","areaSeriesOptions","currentAreaVisual","radialSeriesOptions","currentRadialVisual","DATA_FIELDS_ADDED","DATA_AS_ARRAYS_ADDED","DATA_AS_OBJECTS_ADDED","IMPORTED_DATA_SLICE_RESET","FIELDS_ADDED","INTERVAL_FIELDS_ADDED","INTERVAL_DATA_OBJECTS_ADDED","NOMINAL_FIELDS_ADDED","NOMINAL_DATA_OBJECTS_ADDED","ORDINAL_FIELDS_ADDED","ORDINAL_DATA_OBJECTS_ADDED","BINARY_FIELDS_ADDED","BINARY_DATA_OBJECTS_ADDED","IGNORE_FIELDS_ADDED","IGNORE_DATA_OBJECTS_ADDED","ANALYSED_DATA_SLICE_RESET","LINE_OPTIONS_ADDED","LINE_OPTIONS_RESET","BAR_OPTIONS_ADDED","BAR_OPTIONS_RESET","MARK_OPTIONS_ADDED","MARK_OPTIONS_RESET","HEATMAP_OPTIONS_ADDED","HEATMAP_OPTIONS_RESET","AREA_OPTIONS_ADDED","AREA_OPTIONS_RESET","RADIAL_OPTIONS_ADDED","RADIAL_OPTIONS_RESET","CURRENT_LINE_VISUAL_ADDED","CURRENT_LINE_VISUAL_RESET","CURRENT_BAR_VISUAL_ADDED","CURRENT_BAR_VISUAL_RESET","CURRENT_MARK_VISUAL_ADDED","CURRENT_MARK_VISUAL_RESET","CURRENT_HEATMAP_VISUAL_ADDED","CURRENT_HEATMAP_VISUAL_RESET","CURRENT_AREA_VISUAL_ADDED","CURRENT_AREA_VISUAL_RESET","CURRENT_RADIAL_VISUAL_ADDED","CURRENT_RADIAL_VISUAL_RESET","RESET_APPLICATION_STATE","reduxStore","createStore","state","action","ReducerActions","payload","ImportedData","dispatch","reducerActionTypes","getState","ImportFileData","importedFile","fileType","file","checkValidCSV","isEmpty","processCSV","csvProcessor","validateCSV","getImportedFileData","createImportedData","get","create","ImportFilesHandler","getImportedDataErrors","validate","AlertNotification","React","useState","open","setOpen","Snackbar","id","anchorOrigin","vertical","horizontal","IconButton","aria-label","color","size","onClick","fontSize","useStyles","makeStyles","theme","createStyles","root","flexGrow","margin","spacing","statDescription","textAlign","palette","text","primary","stat","secondary","contrastText","gridItem","background","main","padding","borderRadius","getStatLabel","key","ImportedFileStats","importedFileStats","classes","className","Grid","container","direction","justify","alignItems","Object","entries","map","value","item","Typography","variant","paper","height","chips","backgroundColor","textColor","donutChart","exampleObject","boxSize","maxWidth","depositContext","flex","paper2","display","overflow","flexDirection","fixedHeight","getExampleObject","objects","firstObject","objectToReturn","FieldTypes","connect","props","Box","justifyContent","component","gutterBottom","my","mx","Chip","label","name","src","displayDataTypes","displayObjectSize","ResetAnalysedData","AnalyseIntervalData","analyseIntervalData","validateObjectsLength","getAnalysedIntervalData","objIndex","currentObject","keys","removeInvalidObject","index","splice","objectToAdd","includes","dataIsFloat","dataIsNotIPAddress","convertDataToFloat","decimalPointCount","dataAsFloat","parseFloat","isNaN","CreateAnalysedData","analysedFileData","createFields","createIntervalFields","createIntervalDataObjects","createNominalFields","createNominalDataObjects","createOrdinalFields","createOrdinalDataObjects","createBinaryFields","createBinaryDataObjects","createIgnoreFields","createIgnoreDataObjects","AnalyseNominalData","field","getFieldObject","fieldArray","nominalValues","getAllNominalValues","createNominalObject","dataObject","nominalValueToAdd","getNominalValue","nominalValue","count","object","allValues","total","getNominalValueCount","Math","round","percent","getNominalValuePercent","AnalyseOrdinalData","allOrdinalValuesForField","getOrdinalValuesForField","createOrdinalValueObject","ordinalValuesForField","ordinalValue","getOrdinalValueCount","getOrdinalValuePercent","AnalyseBinaryData","allValuesForField","getValuesForField","createValueObject","valuesForField","binaryValue","getValueCount","getValuePercent","AnalyseIgnoreData","analyseIgnoreData","getIgnoredData","AnalyseFileData","getIntervalFields","getNominalFields","getOrdinalFields","getBinaryFields","getIgnoreFields","validateIntervalData","analyseNominalData","validateNominalData","analyseOrdinalData","validateOrdinalData","analyseBinaryData","validateBinaryData","validateIgnoreData","createAnalysedData","fieldValue","values","INTERVAL","NOMINAL","ORDINAL","BINARY","IGNORE","createAll","GetAnalysedData","getFields","getIntegerFields","getIntegerDataObjects","getNominalDataObjects","getOrdinalDataObjects","getBinaryDataObjects","getIgnoreDataObjects","AnalyseFileHandler","getImportedColumns","analyseData","validateAnalysedData","resetAnalysedData","table","minWidth","dialogPaper","width","submitIsDisabled","setSubmitIsDisabled","outcome","undefined","outcomeMessage","setNotifications","style","alert","FAILED","TableContainer","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","scope","Select","onChange","event","fieldToAdd","console","log","addField","fieldType","target","UNARY","TIME","DATE","Button","disabled","marginRight","SUCCESS","e","ResetDataHandler","ImportFilesComponent","componentArea","verticalLine","light","space","importedFiles","submitButtonDisabled","files","fileSize","characterCount","fieldTypesDialogOpen","setState","allFiles","checkFileType","toString","resetData","Dialog","onBackdropClick","Tooltip","title","applicationHasData","resetFiles","showPreviews","a","addFiles","uploadFiles","showPreviewsInDropzone","useChipsForPreview","previewGridProps","previewChipProps","previewChip","previewText","showAlerts","acceptedFiles","filesLimit","Divider","orientation","flexItem","Component","Home","useStyles1","flexShrink","marginLeft","TablePaginationActions","useTheme","page","rowsPerPage","onChangePage","ceil","max","useStyles2","setPage","setRowsPerPage","slice","obj","indexOf","collapsed","TableFooter","TablePagination","rowsPerPageOptions","colSpan","SelectProps","inputProps","native","newPage","onChangeRowsPerPage","parseInt","ActionsComponent","ViewImportedData","TabPanel","children","other","role","hidden","aria-labelledby","p","minHeight","labelRowsPerPage","alignItemsAndJustifyContent","ViewAnalysedData","CurveType","LineStyle","flexWrap","left","stroke","fill","fontWeight","strokeLinejoin","strokeWidth","lineWidth","strokeStyle","lineStyle","opacity","curve","LineSeriesOptionsValidate","options","xValue","yValue","lengthIsValid","opacityIsValid","lineWidthIsValid","DataHandler","dataMap","Map","forEach","convertedObj","JSON","stringify","createIntegerDataObject","has","set","findIndex","keyValues","x","y","sort","b","column","analysedDataObjects","angleObjectsArray","valueObject","angle","getAnalysedData","allObjects","countOrPercent","fieldValues","getNonIntegerFieldValues","arrayOfValues","createNonIntegerDataObject","dataObjectsArray","LineSeriesOptions","LineSeriesCreateVis","dataHandler","createDefaultOptions","createDataMapWithCount","createArrayFromDataMap","curveType","CurrentLineVisual","currentVisual","LineSeriesVisHandler","createLineVis","createVis","reset","LineSeriesOptionsHandler","optionsErrors","createOptions","createLineVisual","helperTextColor","setOptions","xValAndYValIsEqual","px","py","FormControl","required","InputLabel","renderValue","integerField","FormHelperText","TextField","helperText","FormHelperTextProps","InputLabelProps","curveLinear","curveLinearClosed","curveMonotoneX","curveMonotoneY","curveNatural","curveStep","curveStepAfter","curveStepBefore","SOLID","DASHED","optionsToValidate","validateOptions","LineSeriesPage","BarSeriesOptionsValidate","opacityOrBarWidthIsValid","barWidth","BarSeriesOptions","BarSeriesCreateVis","colour","createNonIntegerDataArray","getFirstXValue","getFirstYValue","firstField","CurrentBarVisual","BarSeriesVisHandler","createBarVis","BarSeriesOptionsHandler","createBarVisual","BarSeries","VerticalBarSeriesCanvas","VerticalBarSeries","xType","xDistance","BarSeriesPage","sizeRange","MarkSeriesOptionsValidate","MarkSeriesOptions","MarkSeriesCreateVis","createIntegerDataArray","CurrentMarkVisual","MarkSeriesVisHandler","MarkSeriesOptionsHandler","createVisual","MarkSeriesPage","HeatmapSeriesOptionsValidate","HeatmapSeriesOptions","HeatmapCreateVis","colourRange","createDataAndColorArray","colour1","colour2","countValue","CurrentHeatmapVisual","addCurrentHeatmapVisual","HeatmapVisHandler","HeatmapSeriesOptionsHandler","reduxHandler","colorRange","HeatmapPage","AreaSeriesOptions","addAreaOptions","AreaSeriesOptionsValidate","AreaSeriesCreateVis","CurrentAreaVis","addCurrentAreaVisual","AreaSeriesVisHandler","AreaSeriesOptionsHandler","AreaSeriesPage","labelsRadiusMultiplier","labelsStyle","showLabels","RadialSeriesOptions","addRadialOptions","RadialSeriesOptionsValidate","RadialSeriesCreateVis","checkDataType","getDataObjectsForField","createAngleObjectFromColumnPercent","CurrentRadialVisual","addCurrentRadialVisual","RadialSeriesVisHandler","RadialSeriesOptionsHandler","RadialSeriesPage","a11yProps","stickToBottom","position","bottom","tab","VisualiseNav","setValue","AppBar","Tabs","newValue","scrollButtons","indicatorColor","centered","Tab","icon","Visualisations","menuButton","hide","tabIndicator","tabText","setTab","tabIsDisabled","indicator","App","createMuiTheme","contrastThreshold","tonalOffset","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.df40201d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","export interface INotification {\n    alert: AlertType | undefined;\n    notification: string;\n}\nexport enum AlertType {\n    SUCCESS = 'success',\n    FAILED = 'error',\n}\n","export class NotificationsHandler {\n    private notifications: Array<string> = [];\n\n    public addNotification(notification: string): void {\n        this.notifications.push(notification);\n    }\n\n    public notification(): string {\n        return this.notifications.join(', ');\n    }\n\n    public isEmpty(): boolean {\n        return this.notifications.length === 0;\n    }\n\n    public getNotifications(): Array<string> {\n        return this.notifications;\n    }\n\n    public concat(notificationsHandler: NotificationsHandler): void {\n        this.notifications = this.notifications.concat(notificationsHandler.getNotifications());\n    }\n}\n","import { IImportedFileData } from '../../../Interfaces/import/IImportedFileData';\nimport { NotificationsHandler } from '../../../UIHandling/NotificationsHandler';\n\nconst papa = require('papaparse');\n\nexport default class CSVProcessor {\n    private readonly csvFile: any;\n    constructor(csvFile: string) {\n        this.csvFile = csvFile;\n    }\n    public getCSVFile(): string {\n        return this.csvFile;\n    }\n    public validateCSV(): NotificationsHandler {\n        const notifications = new NotificationsHandler();\n        const result = papa.parse(this.csvFile, { header: true, skipEmptyLines: true });\n        const csvErrors = result.errors;\n        if (csvErrors.length !== 0) {\n            for (var i = 0; i < csvErrors.length; i += 1) {\n                notifications.addNotification(\n                    `${csvErrors[i].type}: ${csvErrors[i].message}, Row: ${csvErrors[i].row}`\n                );\n            }\n            return notifications;\n        }\n        return notifications;\n    }\n    public getImportedFileData(): IImportedFileData {\n        return {\n            dataFields: this.getCSVFields(),\n            dataObjects: this.csvToObjects(),\n            dataArrays: this.csvToArrays(),\n        };\n    }\n    private csvToObjects(): Array<object> {\n        const result = papa.parse(this.csvFile, { header: true, skipEmptyLines: true });\n        return result.data;\n    }\n    private csvToArrays(): Array<Array<any>> {\n        const result = papa.parse(this.csvFile, { skipEmptyLines: true });\n        return result.data;\n    }\n    private getCSVFields(): Array<string> {\n        const dataFields: string[] = [];\n        for (let i = 0; i < this.csvToArrays()[0].length; i += 1) {\n            dataFields.push(this.csvToArrays()[0][i]);\n        }\n        return dataFields;\n    }\n}\n","const ReduxState = {\n    importedData: {\n        dataFields: [],\n        dataObjects: [],\n        dataArrays: [],\n    },\n    analysedData: {\n        fields: [],\n        intervalFields: [],\n        intervalDataObjects: [],\n        nominalFields: [],\n        nominalDataObjects: [],\n        ordinalFields: [],\n        ordinalDataObjects: [],\n        binaryFields: [],\n        binaryDataObjects: [],\n        ignoreFields: [],\n        ignoreDataObjects: [],\n    },\n    lineSeriesOptions: {},\n    currentLineVisual: {},\n    barSeriesOptions: {},\n    currentBarVisual: {},\n    markSeriesOptions: {},\n    currentMarkVisual: {},\n    heatmapSeriesOptions: {},\n    currentHeatmapVisual: {},\n    areaSeriesOptions: {},\n    currentAreaVisual: {},\n    radialSeriesOptions: {},\n    currentRadialVisual: {},\n};\nexport default ReduxState;\n","//importedData slice\nexport const DATA_FIELDS_ADDED = 'dataFieldsAdded';\nexport const DATA_AS_ARRAYS_ADDED = 'dataAsArraysAdded';\nexport const DATA_AS_OBJECTS_ADDED = 'dataAsObjectsAdded';\nexport const IMPORTED_DATA_SLICE_RESET = 'importedDataSliceReset';\n\n//analysedData slice\nexport const FIELDS_ADDED = 'fieldsAdded';\nexport const INTERVAL_FIELDS_ADDED = 'intervalFieldsAdded';\nexport const INTERVAL_DATA_OBJECTS_ADDED = 'intervalDataObjectsAdded';\nexport const NOMINAL_FIELDS_ADDED = 'nominalFieldsAdded';\nexport const NOMINAL_DATA_OBJECTS_ADDED = 'nominalDataObjectsAdded';\nexport const ORDINAL_FIELDS_ADDED = 'ordinalFieldsAdded';\nexport const ORDINAL_DATA_OBJECTS_ADDED = 'ordinalDataObjectsAdded';\nexport const BINARY_FIELDS_ADDED = 'binaryFieldsAdded';\nexport const BINARY_DATA_OBJECTS_ADDED = 'binaryDataObjectsAdded';\nexport const IGNORE_FIELDS_ADDED = 'ignoreFieldsAdded';\nexport const IGNORE_DATA_OBJECTS_ADDED = 'ignoreDataObjectsAdded';\nexport const ANALYSED_DATA_SLICE_RESET = 'analysedDataSliceReset';\n\n//plottingOptions slice\nexport const LINE_OPTIONS_ADDED = 'lineOptionsAdded';\nexport const LINE_OPTIONS_RESET = 'lineOptionsReset';\nexport const BAR_OPTIONS_ADDED = 'barOptionsAdded';\nexport const BAR_OPTIONS_RESET = 'barOptionsReset';\nexport const MARK_OPTIONS_ADDED = 'markOptionsAdded';\nexport const MARK_OPTIONS_RESET = 'markOptionsReset';\nexport const HEATMAP_OPTIONS_ADDED = 'heatmapOptionsAdded';\nexport const HEATMAP_OPTIONS_RESET = 'heatmapOptionsReset';\nexport const AREA_OPTIONS_ADDED = 'areaOptionsAdded';\nexport const AREA_OPTIONS_RESET = 'areaOptionsReset';\nexport const RADIAL_OPTIONS_ADDED = 'radialOptionsAdded';\nexport const RADIAL_OPTIONS_RESET = 'radialOptionsReset';\n\n//currentVisualisationSlice\nexport const CURRENT_LINE_VISUAL_ADDED = 'currentLineVisualAdded';\nexport const CURRENT_LINE_VISUAL_RESET = 'currentLineVisualReset';\nexport const CURRENT_BAR_VISUAL_ADDED = 'currentBarVisualAdded';\nexport const CURRENT_BAR_VISUAL_RESET = 'currentBarVisualReset';\nexport const CURRENT_MARK_VISUAL_ADDED = 'currentMarkVisualAdded';\nexport const CURRENT_MARK_VISUAL_RESET = 'currentMarkVisualReset';\nexport const CURRENT_HEATMAP_VISUAL_ADDED = 'currentHeatmapVisualAdded';\nexport const CURRENT_HEATMAP_VISUAL_RESET = 'currentHeatmapVisualReset';\nexport const CURRENT_AREA_VISUAL_ADDED = 'currentAreaVisualAdded';\nexport const CURRENT_AREA_VISUAL_RESET = 'currentAreaVisualReset';\nexport const CURRENT_RADIAL_VISUAL_ADDED = 'currentRadialVisualAdded';\nexport const CURRENT_RADIAL_VISUAL_RESET = 'currentRadialVisualReset';\n\nexport const RESET_APPLICATION_STATE = 'resetApplicationState';\n","import { createStore } from 'redux';\nimport ReduxReducer from './Reducers/ReduxReducer';\n\nexport const reduxStore = createStore(ReduxReducer);\n","import ReduxState from '../ReduxState';\nimport * as ReducerActions from '../Actions/ReducerActionTypes';\nexport default function reduxReducer(state = ReduxState, action) {\n    switch (action.type) {\n        case ReducerActions.DATA_FIELDS_ADDED:\n            return {\n                ...state,\n                importedData: {\n                    ...state.importedData,\n                    dataFields: action.payload,\n                },\n            };\n        case ReducerActions.DATA_AS_ARRAYS_ADDED:\n            return {\n                ...state,\n                importedData: {\n                    ...state.importedData,\n                    dataArrays: action.payload,\n                },\n            };\n        case ReducerActions.DATA_AS_OBJECTS_ADDED:\n            return {\n                ...state,\n                importedData: {\n                    ...state.importedData,\n                    dataObjects: action.payload,\n                },\n            };\n\n        case ReducerActions.IMPORTED_DATA_SLICE_RESET:\n            return {\n                importedData: {\n                    dataFields: [],\n                    dataObjects: [],\n                    dataArrays: [],\n                },\n            };\n\n        //analysedData slice\n        case ReducerActions.FIELDS_ADDED:\n            return {\n                ...state,\n                analysedData: {\n                    ...state.analysedData,\n                    fields: action.payload,\n                },\n            };\n        case ReducerActions.INTERVAL_FIELDS_ADDED:\n            return {\n                ...state,\n                analysedData: {\n                    ...state.analysedData,\n                    intervalFields: action.payload,\n                },\n            };\n        case ReducerActions.INTERVAL_DATA_OBJECTS_ADDED:\n            return {\n                ...state,\n                analysedData: {\n                    ...state.analysedData,\n                    intervalDataObjects: action.payload,\n                },\n            };\n        case ReducerActions.NOMINAL_FIELDS_ADDED:\n            return {\n                ...state,\n                analysedData: {\n                    ...state.analysedData,\n                    nominalFields: action.payload,\n                },\n            };\n        case ReducerActions.NOMINAL_DATA_OBJECTS_ADDED:\n            return {\n                ...state,\n                analysedData: {\n                    ...state.analysedData,\n                    nominalDataObjects: action.payload,\n                },\n            };\n        case ReducerActions.ORDINAL_FIELDS_ADDED:\n            return {\n                ...state,\n                analysedData: {\n                    ...state.analysedData,\n                    ordinalFields: action.payload,\n                },\n            };\n        case ReducerActions.ORDINAL_DATA_OBJECTS_ADDED:\n            return {\n                ...state,\n                analysedData: {\n                    ...state.analysedData,\n                    ordinalDataObjects: action.payload,\n                },\n            };\n        case ReducerActions.BINARY_FIELDS_ADDED:\n            return {\n                ...state,\n                analysedData: {\n                    ...state.analysedData,\n                    binaryFields: action.payload,\n                },\n            };\n        case ReducerActions.BINARY_DATA_OBJECTS_ADDED:\n            return {\n                ...state,\n                analysedData: {\n                    ...state.analysedData,\n                    binaryDataObjects: action.payload,\n                },\n            };\n        case ReducerActions.IGNORE_FIELDS_ADDED:\n            return {\n                ...state,\n                analysedData: {\n                    ...state.analysedData,\n                    ignoreFields: action.payload,\n                },\n            };\n        case ReducerActions.IGNORE_DATA_OBJECTS_ADDED:\n            return {\n                ...state,\n                analysedData: {\n                    ...state.analysedData,\n                    ignoreDataObjects: action.payload,\n                },\n            };\n        case ReducerActions.ANALYSED_DATA_SLICE_RESET:\n            return {\n                analysedData: {\n                    fields: [],\n                    intervalFields: [],\n                    intervalDataObjects: [],\n                    nominalFields: [],\n                    nominalDataObjects: [],\n                    ordinalFields: [],\n                    ordinalDataObjects: [],\n                    binaryFields: [],\n                    binaryDataObjects: [],\n                    ignoreFields: [],\n                    ignoreDataObjects: [],\n                },\n            };\n\n        //lineSeriesOptions slice\n        case ReducerActions.LINE_OPTIONS_ADDED:\n            return {\n                ...state,\n                lineSeriesOptions: action.payload,\n            };\n        case ReducerActions.LINE_OPTIONS_RESET:\n            return {\n                lineSeriesOptions: {},\n            };\n        //barSeriesOptions slice\n        case ReducerActions.BAR_OPTIONS_ADDED:\n            return {\n                ...state,\n                barSeriesOptions: action.payload,\n            };\n        case ReducerActions.BAR_OPTIONS_RESET:\n            return {\n                barSeriesOptions: {},\n            };\n        //markSeriesOptions slice\n        case ReducerActions.MARK_OPTIONS_ADDED:\n            return {\n                ...state,\n                markSeriesOptions: action.payload,\n            };\n        case ReducerActions.MARK_OPTIONS_RESET:\n            return {\n                markSeriesOptions: {},\n            };\n        //heatmapSeriesOptions slice\n        case ReducerActions.HEATMAP_OPTIONS_ADDED:\n            return {\n                ...state,\n                heatmapSeriesOptions: action.payload,\n            };\n        case ReducerActions.HEATMAP_OPTIONS_RESET:\n            return {\n                heatmapSeriesOptions: {},\n            };\n        //areaSeriesOptions slice\n        case ReducerActions.AREA_OPTIONS_ADDED:\n            return {\n                ...state,\n                areaSeriesOptions: action.payload,\n            };\n        case ReducerActions.AREA_OPTIONS_RESET:\n            return {\n                areaSeriesOptions: {},\n            };\n        //radialSeriesOptions slice\n        case ReducerActions.RADIAL_OPTIONS_ADDED:\n            return {\n                ...state,\n                radialSeriesOptions: action.payload,\n            };\n        case ReducerActions.RADIAL_OPTIONS_RESET:\n            return {\n                radialSeriesOptions: {},\n            };\n        //currentLineVisual slice\n        case ReducerActions.CURRENT_LINE_VISUAL_ADDED:\n            return {\n                ...state,\n                currentLineVisual: action.payload,\n            };\n        case ReducerActions.CURRENT_LINE_VISUAL_RESET:\n            return {\n                currentLineVisual: {},\n            };\n        //currentBarVisual slice\n        case ReducerActions.CURRENT_BAR_VISUAL_ADDED:\n            return {\n                ...state,\n                currentBarVisual: action.payload,\n            };\n        case ReducerActions.CURRENT_BAR_VISUAL_RESET:\n            return {\n                currentBarVisual: {},\n            };\n        //currentMarkVisual slice\n        case ReducerActions.CURRENT_MARK_VISUAL_ADDED:\n            return {\n                ...state,\n                currentMarkVisual: action.payload,\n            };\n        case ReducerActions.CURRENT_MARK_VISUAL_RESET:\n            return {\n                currentMarkVisual: {},\n            };\n        //currentHeatmapVisual slice\n        case ReducerActions.CURRENT_HEATMAP_VISUAL_ADDED:\n            return {\n                ...state,\n                currentHeatmapVisual: action.payload,\n            };\n        case ReducerActions.CURRENT_HEATMAP_VISUAL_RESET:\n            return {\n                currentHeatmapVisual: {},\n            };\n        //currentAreaVisual slice\n        case ReducerActions.CURRENT_AREA_VISUAL_ADDED:\n            return {\n                ...state,\n                currentAreaVisual: action.payload,\n            };\n        case ReducerActions.CURRENT_AREA_VISUAL_RESET:\n            return {\n                currentAreaVisual: {},\n            };\n        //currentRadialVisual slice\n        case ReducerActions.CURRENT_RADIAL_VISUAL_ADDED:\n            return {\n                ...state,\n                currentRadialVisual: action.payload,\n            };\n        case ReducerActions.CURRENT_RADIAL_VISUAL_RESET:\n            return {\n                currentRadialVisual: {},\n            };\n        case ReducerActions.RESET_APPLICATION_STATE:\n            return ReduxState;\n        default:\n            return state;\n    }\n}\n","import { reduxStore } from '../../../ReduxStore/reduxStore';\nimport {\n    addDataFields,\n    addDataAsArrays,\n    addDataAsObjects,\n    resetImportedData,\n} from '../../../ReduxStore/Actions/ReducerActions';\nimport { IImportedFileData } from '../../../Interfaces/import/IImportedFileData';\n\nexport default class ImportedData {\n    public create(importedData: IImportedFileData) {\n        reduxStore.dispatch(addDataFields(importedData.dataFields));\n        reduxStore.dispatch(addDataAsArrays(importedData.dataArrays));\n        reduxStore.dispatch(addDataAsObjects(importedData.dataObjects));\n    }\n    public get(): IImportedFileData {\n        return {\n            dataFields: reduxStore.getState().importedData.dataFields,\n            dataObjects: reduxStore.getState().importedData.dataObjects,\n            dataArrays: reduxStore.getState().importedData.dataArrays,\n        };\n    }\n    public reset() {\n        reduxStore.dispatch(resetImportedData());\n    }\n}\n","import * as reducerActionTypes from './ReducerActionTypes';\nimport { ILineSeriesOptions } from '../../Interfaces/Visualisations/Line/ILineSeriesOptions';\nimport { ILineSeriesVis } from '../../Interfaces/Visualisations/Line/ILineSeriesVis';\nimport { IBarSeriesOptions } from '../../Interfaces/Visualisations/Bar/IBarSeriesOptions';\nimport { IBarSeriesVis } from '../../Interfaces/Visualisations/Bar/IBarSeriesVis';\nimport { IMarkSeriesOptions } from '../../Interfaces/Visualisations/Mark/IMarkSeriesOptions';\nimport { IMarkSeriesVis } from '../../Interfaces/Visualisations/Mark/IMarkSeriesVis';\nimport { IHeatmapSeriesOptions } from '../../Interfaces/Visualisations/Heatmap/IHeatmapSeriesOptions';\nimport { IHeatmapSeriesVis } from '../../Interfaces/Visualisations/Heatmap/IHeatmapSeriesVis';\nimport { IAreaSeriesOptions } from '../../Interfaces/Visualisations/Area/IAreaSeriesOptions';\nimport { IAreaSeriesVis } from '../../Interfaces/Visualisations/Area/IAreaSeriesVis';\nimport { IRadialSeriesOptions } from '../../Interfaces/Visualisations/Radial/IRadialSeriesOptions';\nimport { IRadialSeriesVis } from '../../Interfaces/Visualisations/Radial/IRadialSeriesVis';\n\nexport const addDataFields = (dataFields: Array<string>) => ({\n    type: reducerActionTypes.DATA_FIELDS_ADDED,\n    payload: dataFields,\n});\nexport const addDataAsArrays = (dataArrays: Array<Array<any>>) => ({\n    type: reducerActionTypes.DATA_AS_ARRAYS_ADDED,\n    payload: dataArrays,\n});\nexport const addDataAsObjects = (dataObjects: Array<object>) => ({\n    type: reducerActionTypes.DATA_AS_OBJECTS_ADDED,\n    payload: dataObjects,\n});\nexport const resetImportedData = () => ({\n    type: reducerActionTypes.IMPORTED_DATA_SLICE_RESET,\n});\n\n//analysedData Slice\nexport const addFields = (fields: Array<object>) => ({\n    type: reducerActionTypes.FIELDS_ADDED,\n    payload: fields,\n});\nexport const addIntervalFields = (intervalFields: Array<string>) => ({\n    type: reducerActionTypes.INTERVAL_FIELDS_ADDED,\n    payload: intervalFields,\n});\nexport const addIntervalDataObjects = (intervalDataObjects: Array<object>) => ({\n    type: reducerActionTypes.INTERVAL_DATA_OBJECTS_ADDED,\n    payload: intervalDataObjects,\n});\nexport const addNominalFields = (nominalFields: Array<string>) => ({\n    type: reducerActionTypes.NOMINAL_FIELDS_ADDED,\n    payload: nominalFields,\n});\nexport const addNominalDataObjects = (nominalDataObjects: Array<object>) => ({\n    type: reducerActionTypes.NOMINAL_DATA_OBJECTS_ADDED,\n    payload: nominalDataObjects,\n});\nexport const addOrdinalFields = (ordinalFields: Array<string>) => ({\n    type: reducerActionTypes.ORDINAL_FIELDS_ADDED,\n    payload: ordinalFields,\n});\nexport const addOrdinalDataObjects = (ordinalDataObjects: Array<object>) => ({\n    type: reducerActionTypes.ORDINAL_DATA_OBJECTS_ADDED,\n    payload: ordinalDataObjects,\n});\nexport const addBinaryFields = (binaryFields: Array<string>) => ({\n    type: reducerActionTypes.BINARY_FIELDS_ADDED,\n    payload: binaryFields,\n});\nexport const addBinaryDataObjects = (binaryDataObjects: Array<object>) => ({\n    type: reducerActionTypes.BINARY_DATA_OBJECTS_ADDED,\n    payload: binaryDataObjects,\n});\nexport const addIgnoreFields = (ignoreFields: Array<string>) => ({\n    type: reducerActionTypes.IGNORE_FIELDS_ADDED,\n    payload: ignoreFields,\n});\nexport const addIgnoreDataObjects = (ignoreDataObjects: Array<object>) => ({\n    type: reducerActionTypes.IGNORE_DATA_OBJECTS_ADDED,\n    payload: ignoreDataObjects,\n});\nexport const resetAnalysedData = () => ({\n    type: reducerActionTypes.ANALYSED_DATA_SLICE_RESET,\n});\n\n//plottingOptions slice\nexport const addLineOptions = (lineSeriesOptions: ILineSeriesOptions) => ({\n    type: reducerActionTypes.LINE_OPTIONS_ADDED,\n    payload: lineSeriesOptions,\n});\nexport const resetLineOptions = () => ({\n    type: reducerActionTypes.LINE_OPTIONS_RESET,\n});\nexport const addBarOptions = (barSeriesOptions: IBarSeriesOptions) => ({\n    type: reducerActionTypes.BAR_OPTIONS_ADDED,\n    payload: barSeriesOptions,\n});\nexport const resetBarOptions = () => ({\n    type: reducerActionTypes.BAR_OPTIONS_RESET,\n});\nexport const addMarkOptions = (markSeriesOptions: IMarkSeriesOptions) => ({\n    type: reducerActionTypes.MARK_OPTIONS_ADDED,\n    payload: markSeriesOptions,\n});\nexport const resetMarkOptions = () => ({\n    type: reducerActionTypes.MARK_OPTIONS_RESET,\n});\nexport const addHeatmapOptions = (heatmapSeriesOptions: IHeatmapSeriesOptions) => ({\n    type: reducerActionTypes.HEATMAP_OPTIONS_ADDED,\n    payload: heatmapSeriesOptions,\n});\nexport const resetHeatmapOptions = () => ({\n    type: reducerActionTypes.HEATMAP_OPTIONS_RESET,\n});\nexport const addAreaOptions = (options: IAreaSeriesOptions) => ({\n    type: reducerActionTypes.AREA_OPTIONS_ADDED,\n    payload: options,\n});\nexport const resetAreaOptions = () => ({\n    type: reducerActionTypes.AREA_OPTIONS_RESET,\n});\nexport const addRadialOptions = (options: IRadialSeriesOptions) => ({\n    type: reducerActionTypes.RADIAL_OPTIONS_ADDED,\n    payload: options,\n});\nexport const resetRadialOptions = () => ({\n    type: reducerActionTypes.RADIAL_OPTIONS_RESET,\n});\n//currentLineVisual slice\nexport const addCurrentLineVisual = (currentLineVisual: ILineSeriesVis) => ({\n    type: reducerActionTypes.CURRENT_LINE_VISUAL_ADDED,\n    payload: currentLineVisual,\n});\nexport const resetCurrentLineVisual = () => ({\n    type: reducerActionTypes.CURRENT_LINE_VISUAL_RESET,\n});\nexport const addCurrentBarVisual = (currentBarVisual: IBarSeriesVis) => ({\n    type: reducerActionTypes.CURRENT_BAR_VISUAL_ADDED,\n    payload: currentBarVisual,\n});\nexport const resetCurrentBarVisual = () => ({\n    type: reducerActionTypes.CURRENT_BAR_VISUAL_RESET,\n});\nexport const addCurrentMarkVisual = (currentMarkVisual: IMarkSeriesVis) => ({\n    type: reducerActionTypes.CURRENT_MARK_VISUAL_ADDED,\n    payload: currentMarkVisual,\n});\nexport const resetCurrentMarkVisual = () => ({\n    type: reducerActionTypes.CURRENT_MARK_VISUAL_RESET,\n});\nexport const addCurrentHeatmapVisual = (currentVisual: IHeatmapSeriesVis) => ({\n    type: reducerActionTypes.CURRENT_HEATMAP_VISUAL_ADDED,\n    payload: currentVisual,\n});\nexport const resetCurrentHeatmapVisual = () => ({\n    type: reducerActionTypes.CURRENT_HEATMAP_VISUAL_RESET,\n});\nexport const addCurrentAreaVisual = (currentVisual: IAreaSeriesVis) => ({\n    type: reducerActionTypes.CURRENT_AREA_VISUAL_ADDED,\n    payload: currentVisual,\n});\nexport const resetCurrentAreaVisual = () => ({\n    type: reducerActionTypes.CURRENT_AREA_VISUAL_RESET,\n});\nexport const addCurrentRadialVisual = (currentVisual: IRadialSeriesVis) => ({\n    type: reducerActionTypes.CURRENT_RADIAL_VISUAL_ADDED,\n    payload: currentVisual,\n});\nexport const resetCurrentRadialVisual = () => ({\n    type: reducerActionTypes.CURRENT_RADIAL_VISUAL_RESET,\n});\n//Reset Application State\nexport const resetApplicationState = () => ({\n    type: reducerActionTypes.RESET_APPLICATION_STATE,\n});\n","import { NotificationsHandler } from '../../UIHandling/NotificationsHandler';\nimport CSVProcessor from './FileProcessors/CSVProcessor';\n\nimport { IImportedFileData } from '../../Interfaces/import/IImportedFileData';\nimport { IImportedFile } from '../../Interfaces/import/IImportedFile';\nimport ImportedData from '../ReduxStoreHandling/ImportedData/ImportedData';\n\nexport class ImportFileData {\n    private readonly importedFile: IImportedFile;\n    constructor(importedFile: IImportedFile) {\n        this.importedFile = importedFile;\n    }\n    public validate(): NotificationsHandler {\n        const notifications: NotificationsHandler = new NotificationsHandler();\n        const { fileType, file }: IImportedFile = this.importedFile;\n        if (file.length === 0) {\n            notifications.addNotification(`File is empty`);\n            return notifications;\n        }\n        if (fileType !== 'text/csv') {\n            notifications.addNotification(`File is ${fileType}, only CSV is accepted`);\n            return notifications;\n        }\n        notifications.concat(this.checkValidCSV());\n        if (!notifications.isEmpty()) {\n            return notifications;\n        } else {\n            this.processCSV();\n        }\n\n        return notifications;\n    }\n    private checkValidCSV(): NotificationsHandler {\n        const csvProcessor = new CSVProcessor(this.importedFile.file);\n        const notifications = new NotificationsHandler();\n        notifications.concat(csvProcessor.validateCSV());\n        return notifications;\n    }\n    private processCSV() {\n        const csvProcessor = new CSVProcessor(this.importedFile.file);\n        const importedData = csvProcessor.getImportedFileData();\n        ImportFileData.createImportedData(importedData);\n    }\n    private static createImportedData(importedData: IImportedFileData) {\n        new ImportedData().create(importedData);\n    }\n    public getImportedData(): IImportedFileData {\n        const data = new ImportedData().get();\n        return {\n            dataFields: data.dataFields,\n            dataObjects: data.dataObjects,\n            dataArrays: data.dataArrays,\n        };\n    }\n}\n","import { NotificationsHandler } from './NotificationsHandler';\nimport { ImportFileData } from '../Domain/ImportFile/ImportFileData';\nimport { IImportedFile } from '../Interfaces/import/IImportedFile';\n\nexport class ImportFilesHandler {\n    private importedFile: IImportedFile;\n\n    constructor(importedFile: IImportedFile) {\n        this.importedFile = importedFile;\n    }\n\n    public validate(): NotificationsHandler {\n        if (this.importedFile.file.length === 0) {\n            const notifications = new NotificationsHandler();\n            notifications.addNotification('File is empty');\n            return notifications;\n        }\n        return this.getImportedDataErrors();\n    }\n\n    private getImportedDataErrors(): NotificationsHandler {\n        const importData = new ImportFileData(this.importedFile);\n        return importData.validate();\n    }\n}\n","import React from 'react';\n\nimport { INotification } from '../../../Interfaces/Notification/INotification';\nimport { IconButton, Snackbar } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nexport default function AlertNotification(notifications: INotification) {\n    const [open, setOpen] = React.useState(true);\n    return (\n        <Snackbar\n            open={open}\n            id=\"notification-alert\"\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n            }}\n            action={\n                <IconButton\n                    aria-label=\"close\"\n                    color=\"inherit\"\n                    size=\"small\"\n                    onClick={() => {\n                        setOpen(false);\n                    }}\n                >\n                    <CloseIcon fontSize=\"inherit\" />\n                </IconButton>\n            }\n            message={notifications.notification}\n        />\n    );\n}\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Typography, Grid } from '@material-ui/core';\nimport { IImportedFileStats } from '../../../../Interfaces/import/IImportedFileStats';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n            margin: theme.spacing(20),\n        },\n        statDescription: {\n            margin: theme.spacing(4),\n            textAlign: 'center',\n            color: theme.palette.text.primary,\n        },\n        stat: {\n            color: theme.palette.secondary.contrastText,\n            textAlign: 'center',\n            margin: theme.spacing(4),\n        },\n        gridItem: {\n            background: theme.palette.secondary.main,\n            padding: theme.spacing(6),\n            margin: theme.spacing(4),\n            borderRadius: '2em',\n        },\n    })\n);\nfunction getStatLabel(key: string): string {\n    if (key === 'fileType') {\n        return 'File Type';\n    }\n    if (key === 'fileSize') {\n        return 'File Size (KB)';\n    }\n    if (key === 'characterCount') {\n        return 'Character Count';\n    }\n    return '';\n}\nexport default function ImportedFileStats(importedFileStats: IImportedFileStats) {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root} id=\"imported-file-stats\">\n            <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"flex-start\">\n                {Object.entries(importedFileStats).map(([key, value]) => (\n                    <Grid\n                        item\n                        direction=\"column\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                        className={classes.gridItem}\n                        id={key + '-stat'}\n                    >\n                        <Typography className={classes.statDescription} variant=\"subtitle1\">\n                            {getStatLabel(key)}\n                        </Typography>\n                        <Typography className={classes.stat} variant=\"h6\">\n                            {value}\n                        </Typography>\n                    </Grid>\n                ))}\n            </Grid>\n        </div>\n    );\n}\n","import React from 'react';\nimport { Box, Typography, Chip } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ReactJson from 'react-json-view';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        height: '100%',\n        margin: theme.spacing(2),\n        padding: theme.spacing(2),\n    },\n    chips: {\n        backgroundColor: theme.palette.secondary.main,\n        margin: theme.spacing(1),\n        textColor: theme.palette.secondary.contrastText,\n    },\n    statDescription: {\n        margin: theme.spacing(1),\n        textAlign: 'left',\n        color: theme.palette.text.primary,\n    },\n    donutChart: {\n        margin: theme.spacing(2),\n    },\n    exampleObject: {\n        textColor: theme.palette.text.primary,\n    },\n    boxSize: {\n        maxWidth: '300px',\n    },\n    depositContext: {\n        flex: 1,\n    },\n    paper2: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n    },\n    fixedHeight: {\n        height: 140,\n    },\n}));\nfunction getExampleObject(objects: Array<object>): Object {\n    if (objects.length === 0) {\n        return {};\n    }\n    const [firstObject] = objects;\n    const objectToReturn: Object = {};\n    for (const [key, value] of Object.entries(firstObject)) {\n        // @ts-ignore\n        objectToReturn[key] = value;\n    }\n    return objectToReturn;\n}\nfunction FileAnalysisComponent(props: any) {\n    const classes = useStyles();\n\n    return (\n        <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"flex-start\"\n            alignItems=\"flex-start\"\n            id=\"file-analysis\"\n        >\n            <Box id=\"title\">\n                <Typography component=\"h2\" variant=\"h4\" gutterBottom>\n                    File Analysis\n                </Typography>\n            </Box>\n\n            <Box my={15} id=\"field-types-metrics1\" display=\"flex\" flexDirection=\"row\" className={classes.boxSize}>\n                <Box display=\"flex\" flexDirection=\"column\" id=\"total-fields\" mx={5}>\n                    <Typography>Total Fields</Typography>\n                    <Typography component=\"p\" variant=\"h4\">\n                        {props.dataFields.length}\n                    </Typography>\n                </Box>\n                <Box display=\"flex\" flexDirection=\"column\" id=\"interval-fields\" mx={5}>\n                    <Typography>Interval Fields</Typography>\n                    <Typography component=\"p\" variant=\"h4\">\n                        {props.intervalFields.length}\n                    </Typography>\n                </Box>\n                <Box display=\"flex\" flexDirection=\"column\" id=\"nominal-fields\" mx={5}>\n                    <Typography>Nominal Fields</Typography>\n                    <Typography component=\"p\" variant=\"h4\">\n                        {props.nominalFields.length}\n                    </Typography>\n                </Box>\n            </Box>\n            <Box my={15} id=\"field-types-metrics2\" display=\"flex\" flexDirection=\"row\" className={classes.boxSize}>\n                <Box display=\"flex\" flexDirection=\"column\" id=\"ordinal-fields\" mx={5}>\n                    <Typography>Ordinal Fields</Typography>\n                    <Typography component=\"p\" variant=\"h4\">\n                        {props.ordinalFields.length}\n                    </Typography>\n                </Box>\n                <Box display=\"flex\" flexDirection=\"column\" id=\"binary-fields\" mx={5}>\n                    <Typography>Binary Fields</Typography>\n                    <Typography component=\"p\" variant=\"h4\">\n                        {props.binaryFields.length}\n                    </Typography>\n                </Box>\n                <Box display=\"flex\" flexDirection=\"column\" id=\"ignore-fields\" mx={5}>\n                    <Typography>Ignore Fields</Typography>\n                    <Typography component=\"p\" variant=\"h4\">\n                        {props.ignoreFields.length}\n                    </Typography>\n                </Box>\n            </Box>\n            <Box id=\"all-fields\" className={classes.boxSize} my={15}>\n                <Typography className={classes.statDescription}>All Data fields:</Typography>\n                {props.dataFields.map((fields: string) => (\n                    <Chip className={classes.chips} label={fields} id={fields + '-chip'} />\n                ))}\n            </Box>\n            <Box id=\"example-object\" className={classes.boxSize} my={15}>\n                <Typography className={classes.statDescription}>Example Data Object:</Typography>\n                <Box id={'json-object'}>\n                    <ReactJson\n                        name={'Example Object'}\n                        src={getExampleObject(props.dataObjects)}\n                        theme=\"summerfruit:inverted\"\n                        displayDataTypes={false}\n                        displayObjectSize={false}\n                    />\n                </Box>\n            </Box>\n        </Box>\n    );\n}\n\nconst mapStateToProps = (state: any) => ({\n    intervalFields: state.analysedData.intervalFields,\n    nominalFields: state.analysedData.nominalFields,\n    ordinalFields: state.analysedData.ordinalFields,\n    binaryFields: state.analysedData.binaryFields,\n    ignoreFields: state.analysedData.ignoreFields,\n    dataFields: state.importedData.dataFields,\n    dataObjects: state.importedData.dataObjects,\n});\nexport default connect(mapStateToProps, {})(FileAnalysisComponent);\n","export interface IAnalysedFileData {\n    fields: Array<object>;\n    intervalFields: Array<string>;\n    intervalDataObjects: Array<object>;\n    nominalFields: Array<string>;\n    nominalDataObjects: Array<object>;\n    ordinalFields: Array<string>;\n    ordinalDataObjects: Array<object>;\n    binaryFields: Array<string>;\n    binaryDataObjects: Array<object>;\n    ignoreFields: Array<string>;\n    ignoreDataObjects: Array<object>;\n}\nexport enum FieldTypes {\n    INTERVAL = 'interval',\n    NOMINAL = 'nominal',\n    ORDINAL = 'ordinal',\n    BINARY = 'binary',\n    UNARY = 'unary',\n    TIME = 'time',\n    DATE = 'date',\n    IGNORE = 'ignore',\n}\n","import { reduxStore } from '../../../ReduxStore/reduxStore';\nimport { resetAnalysedData } from '../../../ReduxStore/Actions/ReducerActions';\nexport default class ResetAnalysedData {\n    public resetAnalysedData() {\n        reduxStore.dispatch(resetAnalysedData());\n    }\n}\n","import { reduxStore } from '../../../ReduxStore/reduxStore';\n\nexport class AnalyseIntervalData {\n    private readonly dataObjects = reduxStore.getState().importedData.dataObjects;\n    private intervalFields: any;\n    private intervalDataObjects: Array<object> = [];\n    constructor(intervalFields: Array<string>) {\n        this.intervalFields = intervalFields;\n    }\n    public validateIntervalData(): Array<object> {\n        if (this.intervalFields.length > 0) {\n            this.analyseIntervalData();\n            this.validateObjectsLength();\n            return this.getAnalysedIntervalData().intervalDataObjects;\n        }\n        return [];\n    }\n    private validateObjectsLength() {\n        for (var objIndex = 0; objIndex < this.intervalDataObjects.length; objIndex += 1) {\n            const currentObject = this.intervalDataObjects[objIndex];\n            const currentObjectLength = Object.keys(currentObject).length;\n            if (currentObjectLength !== this.intervalFields.length) {\n                this.removeInvalidObject(objIndex);\n            }\n        }\n    }\n    private removeInvalidObject(index: number) {\n        this.intervalDataObjects.splice(index, 1);\n    }\n\n    private analyseIntervalData() {\n        for (const currentObject of this.dataObjects) {\n            const objectToAdd: Object = {};\n            // eslint-disable-next-line prefer-destructuring\n            for (const [key, value] of Object.entries(currentObject)) {\n                if (this.intervalFields.includes(key)) {\n                    if (\n                        AnalyseIntervalData.dataIsFloat(value as string) &&\n                        AnalyseIntervalData.dataIsNotIPAddress(value as string)\n                    ) {\n                        // @ts-ignore\n                        objectToAdd[key] = AnalyseIntervalData.convertDataToFloat(value);\n                    }\n                }\n            }\n            this.intervalDataObjects.push(objectToAdd);\n        }\n    }\n    private static dataIsNotIPAddress(data: string): boolean {\n        let decimalPointCount = 0;\n        for (const character of data) {\n            if (character === '.') {\n                decimalPointCount += 1;\n            }\n        }\n        return decimalPointCount <= 1;\n    }\n    private static dataIsFloat(data: string): boolean {\n        const dataAsFloat = parseFloat(data);\n        return !isNaN(dataAsFloat);\n    }\n    private static convertDataToFloat(data: string): number {\n        return parseFloat(data);\n    }\n    private getAnalysedIntervalData(): { intervalFields: Array<string>; intervalDataObjects: Array<object> } {\n        return {\n            intervalFields: this.intervalFields,\n            intervalDataObjects: this.intervalDataObjects,\n        };\n    }\n}\n","import { reduxStore } from '../../../ReduxStore/reduxStore';\nimport {\n    addBinaryDataObjects,\n    addBinaryFields,\n    addFields,\n    addIgnoreDataObjects,\n    addIgnoreFields,\n    addIntervalDataObjects,\n    addIntervalFields,\n    addNominalDataObjects,\n    addNominalFields,\n    addOrdinalDataObjects,\n    addOrdinalFields,\n} from '../../../ReduxStore/Actions/ReducerActions';\nimport { IAnalysedFileData } from '../../../Interfaces/Analyse/IAnalysedFileData';\n\nexport default class CreateAnalysedData {\n    private analysedFileData: any;\n\n    constructor(analysedFileData: IAnalysedFileData) {\n        this.analysedFileData = analysedFileData;\n    }\n    public createFields() {\n        reduxStore.dispatch(addFields(this.analysedFileData.fields));\n    }\n    public createIntervalFields() {\n        reduxStore.dispatch(addIntervalFields(this.analysedFileData.intervalFields));\n    }\n    public createIntervalDataObjects() {\n        reduxStore.dispatch(addIntervalDataObjects(this.analysedFileData.intervalDataObjects));\n    }\n    public createNominalFields() {\n        reduxStore.dispatch(addNominalFields(this.analysedFileData.nominalFields));\n    }\n    public createNominalDataObjects() {\n        reduxStore.dispatch(addNominalDataObjects(this.analysedFileData.nominalDataObjects));\n    }\n    public createOrdinalFields() {\n        reduxStore.dispatch(addOrdinalFields(this.analysedFileData.ordinalFields));\n    }\n    public createOrdinalDataObjects() {\n        reduxStore.dispatch(addOrdinalDataObjects(this.analysedFileData.ordinalDataObjects));\n    }\n    public createBinaryFields() {\n        reduxStore.dispatch(addBinaryFields(this.analysedFileData.binaryFields));\n    }\n    public createBinaryDataObjects() {\n        reduxStore.dispatch(addBinaryDataObjects(this.analysedFileData.binaryDataObjects));\n    }\n    public createIgnoreFields() {\n        reduxStore.dispatch(addIgnoreFields(this.analysedFileData.ignoreFields));\n    }\n    public createIgnoreDataObjects() {\n        reduxStore.dispatch(addIgnoreDataObjects(this.analysedFileData.ignoreDataObjects));\n    }\n    public createAll() {\n        this.createFields();\n        this.createIntervalFields();\n        this.createIntervalDataObjects();\n        this.createNominalFields();\n        this.createNominalDataObjects();\n        this.createOrdinalFields();\n        this.createOrdinalDataObjects();\n        this.createBinaryFields();\n        this.createBinaryDataObjects();\n        this.createIgnoreFields();\n        this.createIgnoreDataObjects();\n    }\n}\n","import { reduxStore } from '../../../ReduxStore/reduxStore';\n\nexport class AnalyseNominalData {\n    private readonly dataObjects = reduxStore.getState().importedData.dataObjects;\n    private nominalFields: any;\n    private nominalDataObjects: Array<object> = [];\n    constructor(nominalFields: Array<string>) {\n        this.nominalFields = nominalFields;\n    }\n    public validateNominalData(): Array<object> {\n        if (this.nominalFields.length > 0) {\n            for (const field of this.nominalFields) {\n                this.nominalDataObjects.push(this.getFieldObject(field));\n            }\n        }\n        return this.nominalDataObjects;\n    }\n    private getFieldObject(field: string): object {\n        const fieldArray: Array<object> = [];\n        const objectToReturn: object = {};\n        const nominalValues = this.getAllNominalValues(field);\n        for (const value of nominalValues) {\n            fieldArray.push(this.createNominalObject(field, value, nominalValues));\n        }\n        // @ts-ignore\n        objectToReturn[field] = fieldArray;\n        return objectToReturn;\n    }\n    private getAllNominalValues(field: string): Array<string> {\n        const nominalValues: Array<string> = [];\n        for (const dataObject of this.dataObjects) {\n            for (const nominalField of this.nominalFields) {\n                if (field === nominalField) {\n                    const nominalValueToAdd = AnalyseNominalData.getNominalValue(dataObject, field);\n                    if (nominalValueToAdd !== '') {\n                        if (!nominalValues.includes(nominalValueToAdd)) {\n                            nominalValues.push(nominalValueToAdd);\n                        }\n                    }\n                }\n            }\n        }\n\n        return nominalValues;\n    }\n    private static getNominalValue(object: object, field: string): string {\n        for (const [key, value] of Object.entries(object)) {\n            if (key === field) {\n                return value;\n            }\n        }\n        return '';\n    }\n    private getNominalValueCount(field: string, nominalValue: string): number {\n        let count = 0;\n        for (const object of this.dataObjects) {\n            for (const [key, value] of Object.entries(object)) {\n                if (key === field && value === nominalValue) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n    private getNominalValuePercent(field: string, nominalValue: string, allValues: Array<string>): number {\n        let total = 0;\n        for (const value of allValues) {\n            total += this.getNominalValueCount(field, value);\n        }\n        const count = this.getNominalValueCount(field, nominalValue);\n        return Math.round((count / total) * 100);\n    }\n    private createNominalObject(field: string, nominalValue: string, allValues: Array<string>): object {\n        return {\n            name: nominalValue,\n            count: this.getNominalValueCount(field, nominalValue),\n            percent: this.getNominalValuePercent(field, nominalValue, allValues),\n        };\n    }\n}\n","import { reduxStore } from '../../../ReduxStore/reduxStore';\n\nexport class AnalyseOrdinalData {\n    private readonly dataObjects = reduxStore.getState().importedData.dataObjects;\n    private ordinalFields: any;\n    private ordinalDataObjects: Array<object> = [];\n    constructor(ordinalFields: Array<string>) {\n        this.ordinalFields = ordinalFields;\n    }\n    public validateOrdinalData(): Array<object> {\n        if (this.ordinalFields.length > 0) {\n            for (const field of this.ordinalFields) {\n                this.ordinalDataObjects.push(this.getFieldObject(field));\n            }\n        }\n        return this.ordinalDataObjects;\n    }\n    private getFieldObject(field: string): object {\n        const fieldArray: Array<object> = [];\n        const objectToReturn: object = {};\n        const allOrdinalValuesForField = this.getOrdinalValuesForField(field);\n        for (const value of allOrdinalValuesForField) {\n            fieldArray.push(this.createOrdinalValueObject(field, value, allOrdinalValuesForField));\n        }\n        // @ts-ignore\n        objectToReturn[field] = fieldArray;\n        return objectToReturn;\n    }\n    private getOrdinalValuesForField(field: string): Array<string> {\n        const ordinalValuesForField: Array<string> = [];\n        for (const object of this.dataObjects) {\n            for (const [key, value] of Object.entries(object)) {\n                if (key === field && !ordinalValuesForField.includes(value as string)) {\n                    ordinalValuesForField.push(value as string);\n                }\n            }\n        }\n        return ordinalValuesForField;\n    }\n    private getOrdinalValueCount(field: string, ordinalValue: string): number {\n        let count = 0;\n        for (const object of this.dataObjects) {\n            for (const [key, value] of Object.entries(object)) {\n                if (key === field && value === ordinalValue) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n    private getOrdinalValuePercent(field: string, ordinalValue: string, allValues: Array<string>): number {\n        let total = 0;\n        for (const value of allValues) {\n            total += this.getOrdinalValueCount(field, value);\n        }\n        const count = this.getOrdinalValueCount(field, ordinalValue);\n        return Math.round((count / total) * 100);\n    }\n    private createOrdinalValueObject(field: string, ordinalValue: string, allValues: Array<string>): object {\n        return {\n            name: ordinalValue,\n            count: this.getOrdinalValueCount(field, ordinalValue),\n            percent: this.getOrdinalValuePercent(field, ordinalValue, allValues),\n        };\n    }\n}\n","import { reduxStore } from '../../../ReduxStore/reduxStore';\n\nexport class AnalyseBinaryData {\n    private readonly dataObjects = reduxStore.getState().importedData.dataObjects;\n    private binaryFields: any;\n    private binaryDataObjects: Array<object> = [];\n    constructor(binaryFields: Array<string>) {\n        this.binaryFields = binaryFields;\n    }\n    public validateBinaryData(): Array<object> {\n        if (this.binaryFields.length > 0) {\n            for (const field of this.binaryFields) {\n                this.binaryDataObjects.push(this.getFieldObject(field));\n            }\n        }\n        return this.binaryDataObjects;\n    }\n    private getFieldObject(field: string): object {\n        const fieldArray: Array<object> = [];\n        const objectToReturn: object = {};\n        const allValuesForField = this.getValuesForField(field);\n        for (const value of allValuesForField) {\n            fieldArray.push(this.createValueObject(field, value, allValuesForField));\n        }\n        // @ts-ignore\n        objectToReturn[field] = fieldArray;\n        return objectToReturn;\n    }\n    private getValuesForField(field: string): Array<string> {\n        const valuesForField: Array<string> = [];\n        for (const object of this.dataObjects) {\n            for (const [key, value] of Object.entries(object)) {\n                if (key === field && !valuesForField.includes(value as string) && this.binaryFields.includes(key)) {\n                    valuesForField.push(value as string);\n                }\n            }\n        }\n        return valuesForField;\n    }\n    private getValueCount(field: string, binaryValue: string): number {\n        let count = 0;\n        for (const object of this.dataObjects) {\n            for (const [key, value] of Object.entries(object)) {\n                if (key === field && value === binaryValue) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n    private getValuePercent(field: string, binaryValue: string, allValues: Array<string>): number {\n        let total = 0;\n        for (const value of allValues) {\n            total += this.getValueCount(field, value);\n        }\n        const count = this.getValueCount(field, binaryValue);\n        return Math.round((count / total) * 100);\n    }\n    private createValueObject(field: string, binaryValue: string, allValues: Array<string>): object {\n        return {\n            name: binaryValue,\n            count: this.getValueCount(field, binaryValue),\n            percent: this.getValuePercent(field, binaryValue, allValues),\n        };\n    }\n}\n","import { reduxStore } from '../../../ReduxStore/reduxStore';\n\nexport class AnalyseIgnoreData {\n    private readonly dataObjects = reduxStore.getState().importedData.dataObjects;\n    private ignoreFields: any;\n    private ignoreDataObjects: Array<object> = [];\n    constructor(ignoreFields: Array<string>) {\n        this.ignoreFields = ignoreFields;\n    }\n    public validateIgnoreData(): Array<object> {\n        if (this.ignoreFields.length > 0) {\n            this.analyseIgnoreData();\n            return this.getIgnoredData().ignoreDataObjects;\n        }\n        return [];\n    }\n\n    private analyseIgnoreData() {\n        for (const currentObject of this.dataObjects) {\n            const objectToAdd: Object = {};\n            // eslint-disable-next-line prefer-destructuring\n            for (const [key, value] of Object.entries(currentObject)) {\n                if (this.ignoreFields.includes(key)) {\n                    // @ts-ignore\n                    objectToAdd[key] = value;\n                }\n            }\n            this.ignoreDataObjects.push(objectToAdd);\n        }\n    }\n    private getIgnoredData(): { ignoreFields: Array<string>; ignoreDataObjects: Array<object> } {\n        return {\n            ignoreFields: this.ignoreFields,\n            ignoreDataObjects: this.ignoreDataObjects,\n        };\n    }\n}\n","import { NotificationsHandler } from '../../UIHandling/NotificationsHandler';\nimport { AnalyseIntervalData } from './DataAnalysis/AnalyseIntervalData';\nimport { FieldTypes, IAnalysedFileData } from '../../Interfaces/Analyse/IAnalysedFileData';\nimport CreateAnalysedData from '../ReduxStoreHandling/AnalysedData/CreateAnalysedData';\nimport { AnalyseNominalData } from './DataAnalysis/AnalyseNominalData';\nimport { AnalyseOrdinalData } from './DataAnalysis/AnalyseOrdinalData';\nimport { AnalyseBinaryData } from './DataAnalysis/AnalyseBinaryData';\nimport { AnalyseIgnoreData } from './DataAnalysis/AnalyseIgnoreData';\n\nexport class AnalyseFileData {\n    private readonly fields: Array<object>;\n    private intervalFields: Array<string> = [];\n    private intervalDataObjects: Array<object> = [];\n    private nominalFields: Array<string> = [];\n    private nominalDataObjects: Array<object> = [];\n    private ordinalFields: Array<string> = [];\n    private ordinalDataObjects: Array<object> = [];\n    private binaryFields: Array<string> = [];\n    private binaryDataObjects: Array<object> = [];\n    private ignoreFields: Array<string> = [];\n    private ignoreDataObjects: Array<object> = [];\n    constructor(fields: Array<object>) {\n        this.fields = fields;\n    }\n    public validateAnalysedData(): NotificationsHandler {\n        const notifications = new NotificationsHandler();\n        this.getIntervalFields();\n        this.getNominalFields();\n        this.getOrdinalFields();\n        this.getBinaryFields();\n        this.getIgnoreFields();\n        if (this.intervalFields.length > 0) {\n            const analyseIntervalData = new AnalyseIntervalData(this.intervalFields);\n            this.intervalDataObjects = analyseIntervalData.validateIntervalData();\n        }\n        if (this.nominalFields.length > 0) {\n            const analyseNominalData = new AnalyseNominalData(this.nominalFields);\n            this.nominalDataObjects = analyseNominalData.validateNominalData();\n        }\n        if (this.ordinalFields.length > 0) {\n            const analyseOrdinalData = new AnalyseOrdinalData(this.ordinalFields);\n            this.ordinalDataObjects = analyseOrdinalData.validateOrdinalData();\n        }\n        if (this.binaryFields.length > 0) {\n            const analyseBinaryData = new AnalyseBinaryData(this.binaryFields);\n            this.binaryDataObjects = analyseBinaryData.validateBinaryData();\n        }\n        if (this.ignoreFields.length > 0) {\n            const analyseIgnoreData = new AnalyseIgnoreData(this.ignoreFields);\n            this.ignoreDataObjects = analyseIgnoreData.validateIgnoreData();\n        }\n        this.createAnalysedData();\n        return notifications;\n    }\n    private getIntervalFields() {\n        for (let objIndex = 0; objIndex < this.fields.length; objIndex += 1) {\n            const field = this.fields[objIndex];\n            const fieldValue = Object.values(field)[0];\n            const fieldTypeValue = Object.values(field)[1];\n            if (fieldTypeValue === FieldTypes.INTERVAL) {\n                this.intervalFields.push(fieldValue);\n            }\n        }\n    }\n    private getNominalFields() {\n        for (let objIndex = 0; objIndex < this.fields.length; objIndex += 1) {\n            const field = this.fields[objIndex];\n            const fieldValue = Object.values(field)[0];\n            const fieldTypeValue = Object.values(field)[1];\n            if (fieldTypeValue === FieldTypes.NOMINAL) {\n                this.nominalFields.push(fieldValue);\n            }\n        }\n    }\n    private getOrdinalFields() {\n        for (let objIndex = 0; objIndex < this.fields.length; objIndex += 1) {\n            const field = this.fields[objIndex];\n            const fieldValue = Object.values(field)[0];\n            const fieldTypeValue = Object.values(field)[1];\n            if (fieldTypeValue === FieldTypes.ORDINAL) {\n                this.ordinalFields.push(fieldValue);\n            }\n        }\n    }\n    private getBinaryFields() {\n        for (let objIndex = 0; objIndex < this.fields.length; objIndex += 1) {\n            const field = this.fields[objIndex];\n            const fieldValue = Object.values(field)[0];\n            const fieldTypeValue = Object.values(field)[1];\n            if (fieldTypeValue === FieldTypes.BINARY) {\n                this.binaryFields.push(fieldValue);\n            }\n        }\n    }\n    private getIgnoreFields() {\n        for (let objIndex = 0; objIndex < this.fields.length; objIndex += 1) {\n            const field = this.fields[objIndex];\n            const fieldValue = Object.values(field)[0];\n            const fieldTypeValue = Object.values(field)[1];\n            if (fieldTypeValue === FieldTypes.IGNORE) {\n                this.ignoreFields.push(fieldValue);\n            }\n        }\n    }\n\n    private createAnalysedData() {\n        const analysedData: IAnalysedFileData = {\n            fields: this.fields,\n            intervalFields: this.intervalFields,\n            intervalDataObjects: this.intervalDataObjects,\n            nominalFields: this.nominalFields,\n            nominalDataObjects: this.nominalDataObjects,\n            ordinalFields: this.ordinalFields,\n            ordinalDataObjects: this.ordinalDataObjects,\n            binaryFields: this.binaryFields,\n            binaryDataObjects: this.binaryDataObjects,\n            ignoreFields: this.ignoreFields,\n            ignoreDataObjects: this.ignoreDataObjects,\n        };\n        const createAnalysedData = new CreateAnalysedData(analysedData);\n        createAnalysedData.createAll();\n    }\n}\n","import { reduxStore } from '../../../ReduxStore/reduxStore';\nimport { IAnalysedFileData } from '../../../Interfaces/Analyse/IAnalysedFileData';\nexport default class GetAnalysedData {\n    private static getFields(): Array<object> {\n        return reduxStore.getState().analysedData.fields;\n    }\n    private static getIntegerFields(): Array<string> {\n        return reduxStore.getState().analysedData.intervalFields;\n    }\n\n    private static getIntegerDataObjects(): Array<object> {\n        return reduxStore.getState().analysedData.intervalDataObjects;\n    }\n    private static getNominalFields(): Array<string> {\n        return reduxStore.getState().analysedData.nominalFields;\n    }\n    private static getNominalDataObjects(): Array<object> {\n        return reduxStore.getState().analysedData.nominalDataObjects;\n    }\n    private static getOrdinalFields(): Array<string> {\n        return reduxStore.getState().analysedData.ordinalFields;\n    }\n    private static getOrdinalDataObjects(): Array<object> {\n        return reduxStore.getState().analysedData.ordinalDataObjects;\n    }\n    private static getBinaryFields(): Array<string> {\n        return reduxStore.getState().analysedData.binaryFields;\n    }\n    private static getBinaryDataObjects(): Array<object> {\n        return reduxStore.getState().analysedData.binaryDataObjects;\n    }\n    private static getIgnoreFields(): Array<string> {\n        return reduxStore.getState().analysedData.ignoreFields;\n    }\n    private static getIgnoreDataObjects(): Array<object> {\n        return reduxStore.getState().analysedData.ignoreDataObjects;\n    }\n    public get(): IAnalysedFileData {\n        return {\n            fields: GetAnalysedData.getFields(),\n            intervalFields: GetAnalysedData.getIntegerFields(),\n            intervalDataObjects: GetAnalysedData.getIntegerDataObjects(),\n            nominalFields: GetAnalysedData.getNominalFields(),\n            nominalDataObjects: GetAnalysedData.getNominalDataObjects(),\n            ordinalFields: GetAnalysedData.getOrdinalFields(),\n            ordinalDataObjects: GetAnalysedData.getOrdinalDataObjects(),\n            binaryFields: GetAnalysedData.getBinaryFields(),\n            binaryDataObjects: GetAnalysedData.getBinaryDataObjects(),\n            ignoreFields: GetAnalysedData.getIgnoreFields(),\n            ignoreDataObjects: GetAnalysedData.getIgnoreDataObjects(),\n        };\n    }\n}\n","import { NotificationsHandler } from './NotificationsHandler';\nimport ResetAnalysedData from '../Domain/ReduxStoreHandling/AnalysedData/ResetAnalysedData';\nimport { AnalyseFileData } from '../Domain/AnalyseFile/AnalyseFileData';\nimport ImportedData from '../Domain/ReduxStoreHandling/ImportedData/ImportedData';\nimport GetAnalysedData from '../Domain/ReduxStoreHandling/AnalysedData/GetAnalysedData';\n\nexport class AnalyseFileHandler {\n    public validateAnalysedData(fields: Array<object>): NotificationsHandler {\n        const notifications = new NotificationsHandler();\n        const getImportedColumns = new ImportedData().get().dataFields;\n        if (fields.length !== getImportedColumns.length) {\n            notifications.addNotification('Field types have not been selected for all fields');\n            return notifications;\n        } else {\n            const analyseData = new AnalyseFileData(fields);\n            notifications.concat(analyseData.validateAnalysedData());\n            return notifications;\n        }\n    }\n    public getAnalysedDataFields(): Array<object> {\n        return new GetAnalysedData().get().fields;\n    }\n    public resetAnalysedData() {\n        const resetAnalysedData = new ResetAnalysedData();\n        resetAnalysedData.resetAnalysedData();\n    }\n}\n","import React from 'react';\nimport {\n    Box,\n    Typography,\n    Select,\n    Table,\n    Paper,\n    TableHead,\n    TableCell,\n    TableRow,\n    Button,\n    TableBody,\n} from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FieldTypes } from '../../../../Interfaces/Analyse/IAnalysedFileData';\nimport { TableContainer } from '@material-ui/core';\nimport { AnalyseFileHandler } from '../../../../UIHandling/AnalyseFileHandler';\nimport { AlertType } from '../../../../Interfaces/Notification/INotification';\nimport { NotificationsHandler } from '../../../../UIHandling/NotificationsHandler';\nimport AlertNotification from '../../Notifications/AlertNotification';\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        height: '100%',\n        margin: theme.spacing(2),\n        padding: theme.spacing(2),\n    },\n    chips: {\n        backgroundColor: theme.palette.secondary.main,\n        margin: theme.spacing(1),\n        textColor: theme.palette.secondary.contrastText,\n    },\n    statDescription: {\n        margin: theme.spacing(1),\n        textAlign: 'left',\n        color: theme.palette.text.primary,\n    },\n    donutChart: {\n        margin: theme.spacing(2),\n    },\n    exampleObject: {\n        textColor: theme.palette.text.primary,\n    },\n    boxSize: {\n        maxWidth: '500px',\n    },\n    table: {\n        minWidth: 350,\n    },\n    dialogPaper: {\n        width: '500px',\n        height: '700px',\n    },\n    textColor: {\n        color: theme.palette.text.primary,\n    },\n}));\nconst fields: Array<object> = [];\nfunction DataTypes(props: any) {\n    const classes = useStyles();\n    const [submitIsDisabled, setSubmitIsDisabled] = React.useState(true);\n    const [notifications, setNotifications] = React.useState<{\n        outcome: AlertType | undefined;\n        outcomeMessage: string;\n        errors: NotificationsHandler;\n    }>({\n        outcome: undefined,\n        outcomeMessage: '',\n        errors: new NotificationsHandler(),\n    });\n    function addField(fieldToAdd: { field: string; fieldType: FieldTypes }) {\n        if (!fields.includes(fieldToAdd)) {\n            for (var objIndex = 0; objIndex < fields.length; objIndex += 1) {\n                const values = Object.values(fields[objIndex]);\n                if (values[0] === fieldToAdd.field) {\n                    fields[objIndex] = fieldToAdd;\n                    return;\n                }\n            }\n            fields.push(fieldToAdd);\n            console.log(fields);\n            if (fields.length === props.dataFields.length) {\n                setSubmitIsDisabled(false);\n            }\n        }\n    }\n    function analyseFile() {\n        const analyseFileHandler = new AnalyseFileHandler();\n        const errors = analyseFileHandler.validateAnalysedData(fields);\n        if (errors.isEmpty()) {\n            try {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Field Types Validated',\n                });\n            } catch (e) {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            setNotifications({\n                ...notifications,\n                errors: errors,\n            });\n        }\n    }\n    return (\n        <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"flex-start\" alignItems=\"flex-start\" id=\"field-types\">\n            <Box style={{ height: '50%', width: '50%' }} id={'alert-area'}>\n                {notifications.outcome && (\n                    <AlertNotification alert={notifications.outcome} notification={notifications.outcomeMessage} />\n                )}\n                {!notifications.errors.isEmpty() && (\n                    <AlertNotification\n                        alert={AlertType.FAILED}\n                        notification={`Error(s): ${notifications.errors.notification()}`}\n                    />\n                )}\n            </Box>\n            <Box\n                id=\"all-fields\"\n                display=\"flex\"\n                flexDirection=\"column\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                mx={10}\n                my={10}\n            >\n                <Typography id={'field-types-title'} className={classes.statDescription}>\n                    Select Field Types:\n                </Typography>\n                <TableContainer component={Paper} id={'fields-table'}>\n                    <Table className={classes.table}>\n                        <TableHead>\n                            <TableRow id={'table-headings'}>\n                                <TableCell id={'field-name-cell'}>Field Name</TableCell>\n                                <TableCell align={'center'} id={'field-type-cell'}>\n                                    Field Type\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {props.dataFields.map((value: string) => (\n                                <TableRow key={value + '-row'} id={value + '-table-row'}>\n                                    <TableCell component=\"th\" scope=\"row\" id={value + '-field-cell'}>\n                                        {value}\n                                    </TableCell>\n                                    <TableCell id={value + '-select-cell'}>\n                                        <Select\n                                            id={value + '-select'}\n                                            // defaultValue={FieldTypes.IGNORE}\n                                            style={{ minWidth: 150 }}\n                                            name={value + '-select'}\n                                            onChange={(event) => {\n                                                const fieldToAdd: any = {\n                                                    field: value,\n                                                    fieldType: event.target.value as FieldTypes,\n                                                };\n                                                addField(fieldToAdd);\n                                            }}\n                                        >\n                                            <option value={FieldTypes.INTERVAL}>Interval</option>\n                                            <option value={FieldTypes.NOMINAL}>Nominal</option>\n                                            <option value={FieldTypes.ORDINAL}>Ordinal</option>\n                                            <option value={FieldTypes.BINARY}>Binary</option>\n                                            <option value={FieldTypes.UNARY}>Unary</option>\n                                            <option value={FieldTypes.TIME}>Time</option>\n                                            <option value={FieldTypes.DATE}>Date</option>\n                                            <option value={FieldTypes.IGNORE}>Ignore</option>\n                                        </Select>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <Box\n                    id=\"all-fields\"\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                    mx={10}\n                    my={10}\n                >\n                    <Button\n                        disabled={submitIsDisabled}\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        id={'analyse-file-button'}\n                        style={{ marginRight: 10, borderRadius: '5em' }}\n                        onClick={analyseFile}\n                    >\n                        Analyse File\n                    </Button>\n                </Box>\n            </Box>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    dataFields: state.importedData.dataFields,\n    dataObjects: state.importedData.dataObjects,\n});\nexport default connect(mapStateToProps, {})(DataTypes);\n","import { reduxStore } from '../ReduxStore/reduxStore';\nimport { resetApplicationState } from '../ReduxStore/Actions/ReducerActions';\n\nexport class ResetDataHandler {\n    public resetData() {\n        reduxStore.dispatch(resetApplicationState());\n    }\n}\n","import React from 'react';\nimport { Box, Button, Divider, IconButton, makeStyles, Tooltip, Dialog } from '@material-ui/core';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport { DropzoneArea } from 'material-ui-dropzone';\n\nimport { AlertType } from '../../../Interfaces/Notification/INotification';\n\nimport { NotificationsHandler } from '../../../UIHandling/NotificationsHandler';\nimport { ImportFilesHandler } from '../../../UIHandling/ImportFilesHandler';\n\nimport AlertNotification from '../Notifications/AlertNotification';\nimport { IImportedFile } from '../../../Interfaces/import/IImportedFile';\n\nimport ImportedFileStats from './Import/ImportedFileStats';\nimport { IImportedFileStats } from '../../../Interfaces/import/IImportedFileStats';\nimport FileAnalysisComponent from './Analyse/FileAnalysisComponent';\nimport FieldTypes from './Analyse/DataTypes';\nimport { ResetDataHandler } from '../../../UIHandling/ResetDataHandler';\nimport ImportedData from '../../../Domain/ReduxStoreHandling/ImportedData/ImportedData';\n\ninterface IState {\n    importedFiles: Array<File>;\n    submitButtonDisabled: boolean;\n    outcome: AlertType | undefined;\n    outcomeMessage: string;\n    errors: NotificationsHandler;\n    files: string;\n    fileType: string;\n    importedFileStats: IImportedFileStats;\n    fieldTypesDialogOpen: boolean;\n}\nexport default class ImportFilesComponent extends React.Component<{}, IState> {\n    private classes: any = makeStyles((theme) => ({\n        root: {\n            height: '100%',\n            width: '75%',\n        },\n        componentArea: {\n            height: '70%',\n            width: '75%',\n        },\n        container: {\n            width: '100%',\n        },\n        verticalLine: {\n            background: theme.palette.primary.light,\n            width: '2px',\n            margin: theme.spacing(7),\n        },\n        space: {\n            minWidth: '10%',\n        },\n        dialogPaper: {\n            width: '500px',\n            height: '700px',\n        },\n    }));\n    constructor(props: object) {\n        super(props);\n        this.state = {\n            importedFiles: [],\n            submitButtonDisabled: true,\n            outcome: undefined,\n            outcomeMessage: '',\n            errors: new NotificationsHandler(),\n            files: '',\n            fileType: '',\n            importedFileStats: {\n                fileType: '',\n                fileSize: '',\n                characterCount: undefined,\n            },\n            fieldTypesDialogOpen: false,\n        };\n    }\n    private static checkFileType(files: File[]): string {\n        const file = files[0];\n        return file.type;\n    }\n    private async addFiles(files: File[]) {\n        this.setState({ importedFiles: files });\n        if (files.length > 0) {\n            const allFiles = await files[0].text();\n            this.setState({\n                submitButtonDisabled: false,\n                files: allFiles,\n                fileType: ImportFilesComponent.checkFileType(files),\n                importedFileStats: {\n                    fileType: ImportFilesComponent.checkFileType(files),\n                    fileSize: (files[0].size / 1000).toString(),\n                    characterCount: allFiles.length,\n                },\n            });\n        } else {\n            this.setState({\n                submitButtonDisabled: true,\n            });\n        }\n    }\n    private async uploadFiles() {\n        const file: IImportedFile = {\n            file: this.state.files,\n            fileType: this.state.fileType,\n        };\n        const files = new ImportFilesHandler(file);\n        const errors: NotificationsHandler = files.validate();\n        if (errors.isEmpty()) {\n            try {\n                this.setState({\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Files successfully uploaded',\n                    fieldTypesDialogOpen: true,\n                });\n            } catch (e) {\n                this.setState({\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            this.setState({ errors: errors });\n        }\n    }\n    private resetFiles() {\n        const resetData = new ResetDataHandler();\n        resetData.resetData();\n        this.setState({\n            importedFiles: [],\n            submitButtonDisabled: true,\n            outcome: undefined,\n            outcomeMessage: '',\n            errors: new NotificationsHandler(),\n            files: '',\n            fileType: '',\n            importedFileStats: {\n                fileType: '',\n                fileSize: '',\n                characterCount: undefined,\n            },\n        });\n    }\n    private static applicationHasData(): boolean {\n        const importedDataFields = new ImportedData().get().dataFields;\n        return importedDataFields.length === 0;\n    }\n    public render() {\n        return (\n            <main>\n                <Dialog\n                    open={this.state.fieldTypesDialogOpen}\n                    classes={{ paper: this.classes.dialogPaper }}\n                    onBackdropClick={() => {\n                        this.setState({ fieldTypesDialogOpen: false });\n                    }}\n                >\n                    <Box\n                        display=\"flex\"\n                        justifyContent=\"center\"\n                        flexDirection=\"column\"\n                        alignItems=\"center\"\n                        className={this.classes.root}\n                        id={'import-file-component'}\n                        my={15}\n                        mx={15}\n                    >\n                        <FieldTypes />\n                    </Box>\n                </Dialog>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    className={this.classes.root}\n                    id={'import-file-component'}\n                    my={15}\n                    mx={15}\n                >\n                    <Box style={{ height: '50%', width: '50%' }} my={15} id={'alert-area'}>\n                        {this.state.outcome && (\n                            <AlertNotification alert={this.state.outcome} notification={this.state.outcomeMessage} />\n                        )}\n                        {!this.state.errors.isEmpty() && (\n                            <AlertNotification\n                                alert={AlertType.FAILED}\n                                notification={`Error(s): ${this.state.errors.getNotifications()}`}\n                            />\n                        )}\n                    </Box>\n                    <Box\n                        display=\"flex\"\n                        flexDirection=\"row\"\n                        justifyContent=\"center\"\n                        alignItems=\"flex-start\"\n                        className={this.classes.componentArea}\n                    >\n                        <Box id=\"drop-zone-area\" mx={15} my={15}>\n                            <Tooltip title=\"Reset Application\">\n                                <IconButton\n                                    color=\"primary\"\n                                    style={{ marginRight: 10, borderRadius: '5em' }}\n                                    id=\"reset-application-button\"\n                                    disabled={ImportFilesComponent.applicationHasData()}\n                                    onClick={() => {\n                                        this.resetFiles();\n                                    }}\n                                >\n                                    <RotateLeftIcon />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"View and edit the field types\">\n                                <Button\n                                    style={{ marginRight: 10, borderRadius: '5em' }}\n                                    id=\"field-types-button\"\n                                    color=\"primary\"\n                                    disabled={ImportFilesComponent.applicationHasData()}\n                                    onClick={() => {\n                                        this.setState({\n                                            fieldTypesDialogOpen: true,\n                                        });\n                                    }}\n                                >\n                                    Field Types\n                                </Button>\n                            </Tooltip>\n                            <DropzoneArea\n                                showPreviews={true}\n                                onChange={async (files) => {\n                                    await this.addFiles(files);\n                                    await this.uploadFiles();\n                                }}\n                                showPreviewsInDropzone={false}\n                                useChipsForPreview\n                                previewGridProps={{ container: { spacing: 1, direction: 'row' } }}\n                                previewChipProps={{ classes: { root: this.classes.previewChip } }}\n                                previewText=\"Selected files\"\n                                showAlerts={false}\n                                // clearOnUnmount={true}\n                                acceptedFiles={['text/csv']}\n                                filesLimit={1}\n                            />\n\n                            <ImportedFileStats {...this.state.importedFileStats} />\n                        </Box>\n                        <Box mx={15} my={15}>\n                            <Divider orientation=\"vertical\" flexItem className={this.classes.verticalLine} />\n                            <FileAnalysisComponent />\n                        </Box>\n                    </Box>\n                </Box>\n            </main>\n        );\n    }\n}\n","import React from 'react';\n\nimport ImportFilesComponent from '../ImportFileHandling/ImportFilesComponent';\n\nexport default function Home() {\n    return (\n        <main id={'home-page'}>\n            <ImportFilesComponent />\n        </main>\n    );\n}\n","import React from 'react';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableFooter,\n    TablePagination,\n    TableRow,\n    Paper,\n    Box,\n    TableHead,\n} from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport { connect } from 'react-redux';\nimport ReactJson from 'react-json-view';\n\nconst useStyles1 = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexShrink: 0,\n            marginLeft: theme.spacing(2.5),\n        },\n    })\n);\n\ninterface TablePaginationActionsProps {\n    count: number;\n    page: number;\n    rowsPerPage: number;\n    onChangePage: (event: React.MouseEvent<HTMLButtonElement>, newPage: number) => void;\n}\n\nfunction TablePaginationActions(props: TablePaginationActionsProps) {\n    const classes = useStyles1();\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onChangePage } = props;\n\n    const handleFirstPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, 0);\n    };\n\n    const handleBackButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, page - 1);\n    };\n\n    const handleNextButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, page + 1);\n    };\n\n    const handleLastPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n\n    return (\n        <div className={classes.root}>\n            <IconButton onClick={handleFirstPageButtonClick} disabled={page === 0} aria-label=\"first page\">\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"next page\"\n            >\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"last page\"\n            >\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </div>\n    );\n}\n\nconst useStyles2 = makeStyles({\n    table: {\n        minWidth: 500,\n    },\n    paper: {\n        minWidth: 500,\n        maxWidth: 800,\n    },\n});\n\nfunction ImportedDataTable(props: any) {\n    const classes = useStyles2();\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    return (\n        <TableContainer component={Paper} className={classes.paper}>\n            <Table className={classes.table} aria-label=\"custom pagination table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Object Index</TableCell>\n                        <TableCell align=\"right\">Object</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {(rowsPerPage > 0\n                        ? props.dataObjects.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                        : props.dataObjects\n                    ).map((obj: any) => (\n                        <TableRow key={props.dataObjects.indexOf(obj)}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {props.dataObjects.indexOf(obj)}\n                            </TableCell>\n                            <TableCell align=\"right\">\n                                <Box id={'json-object'}>\n                                    <ReactJson\n                                        name={false}\n                                        src={obj}\n                                        theme=\"summerfruit:inverted\"\n                                        displayDataTypes={false}\n                                        displayObjectSize={true}\n                                        collapsed={true}\n                                    />\n                                </Box>\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n                <TableFooter>\n                    <TableRow>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                            colSpan={2}\n                            count={props.dataObjects.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            SelectProps={{\n                                inputProps: { 'aria-label': 'rows per page' },\n                                native: true,\n                            }}\n                            onChangePage={handleChangePage}\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\n                            ActionsComponent={TablePaginationActions}\n                        />\n                    </TableRow>\n                </TableFooter>\n            </Table>\n        </TableContainer>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    dataFields: state.importedData.dataFields,\n    dataObjects: state.importedData.dataObjects,\n});\nexport default connect(mapStateToProps, {})(ImportedDataTable);\n","import React from 'react';\nimport { Box, makeStyles } from '@material-ui/core';\nimport ImportedDataTable from './ImportedDataTable';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        height: '100%',\n        width: '100%',\n    },\n}));\n\nexport default function ViewImportedData(props: any) {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'view-imported-data'}\n            my={15}\n            mx={15}\n        >\n            <ImportedDataTable />\n        </Box>\n    );\n}\n","import { Box, Typography } from '@material-ui/core';\nimport React from 'react';\n\nexport default function TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography id={`page-${index}`}>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n","import React from 'react';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableFooter,\n    TablePagination,\n    TableRow,\n    Paper,\n} from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport { connect } from 'react-redux';\nimport ReactJson from 'react-json-view';\nimport { Box, TableHead } from '@material-ui/core';\n\nconst useStyles1 = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexShrink: 0,\n            marginLeft: theme.spacing(1.0),\n        },\n    })\n);\n\ninterface TablePaginationActionsProps {\n    count: number;\n    page: number;\n    rowsPerPage: number;\n    onChangePage: (event: React.MouseEvent<HTMLButtonElement>, newPage: number) => void;\n}\n\nfunction TablePaginationActions(props: TablePaginationActionsProps) {\n    const classes = useStyles1();\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onChangePage } = props;\n\n    const handleFirstPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, 0);\n    };\n\n    const handleBackButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, page - 1);\n    };\n\n    const handleNextButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, page + 1);\n    };\n\n    const handleLastPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n\n    return (\n        <div className={classes.root}>\n            <IconButton onClick={handleFirstPageButtonClick} disabled={page === 0} aria-label=\"first page\">\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"next page\"\n            >\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"last page\"\n            >\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </div>\n    );\n}\n\nconst useStyles2 = makeStyles({\n    table: {\n        minWidth: 300,\n        minHeight: 300,\n    },\n    paper: {\n        minWidth: 300,\n        maxWidth: 430,\n        minHeight: 300,\n    },\n});\n\nfunction IntervalDataTable(props: any) {\n    const classes = useStyles2();\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    return (\n        <TableContainer component={Paper} className={classes.paper} id={'interval-data-table'}>\n            <Table className={classes.table}>\n                <TableHead>\n                    <TableRow>\n                        <TableCell align=\"left\">Interval Objects</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {(rowsPerPage > 0\n                        ? props.intervalDataObjects.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                        : props.intervalDataObjects\n                    ).map((obj: any) => (\n                        <TableRow key={props.intervalDataObjects.indexOf(obj)}>\n                            <TableCell align=\"left\">\n                                <Box id={'json-object'}>\n                                    <ReactJson\n                                        name={'Object ' + props.intervalDataObjects.indexOf(obj)}\n                                        src={obj}\n                                        theme=\"summerfruit:inverted\"\n                                        displayDataTypes={false}\n                                        displayObjectSize={true}\n                                        collapsed={true}\n                                    />\n                                </Box>\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n                <TableFooter>\n                    <TableRow>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                            colSpan={2}\n                            count={props.intervalDataObjects.length}\n                            labelRowsPerPage={'Rows'}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            SelectProps={{\n                                native: true,\n                            }}\n                            onChangePage={handleChangePage}\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\n                            ActionsComponent={TablePaginationActions}\n                        />\n                    </TableRow>\n                </TableFooter>\n            </Table>\n        </TableContainer>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    intervalDataObjects: state.analysedData.intervalDataObjects,\n});\nexport default connect(mapStateToProps, {})(IntervalDataTable);\n","import React from 'react';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableFooter,\n    TablePagination,\n    TableRow,\n    Paper,\n} from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport { connect } from 'react-redux';\nimport ReactJson from 'react-json-view';\nimport { Box, TableHead } from '@material-ui/core';\n\nconst useStyles1 = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexShrink: 0,\n            marginLeft: theme.spacing(1.0),\n        },\n    })\n);\n\ninterface TablePaginationActionsProps {\n    count: number;\n    page: number;\n    rowsPerPage: number;\n    onChangePage: (event: React.MouseEvent<HTMLButtonElement>, newPage: number) => void;\n}\n\nfunction TablePaginationActions(props: TablePaginationActionsProps) {\n    const classes = useStyles1();\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onChangePage } = props;\n\n    const handleFirstPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, 0);\n    };\n\n    const handleBackButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, page - 1);\n    };\n\n    const handleNextButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, page + 1);\n    };\n\n    const handleLastPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n\n    return (\n        <div className={classes.root}>\n            <IconButton onClick={handleFirstPageButtonClick} disabled={page === 0} aria-label=\"first page\">\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"next page\"\n            >\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"last page\"\n            >\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </div>\n    );\n}\n\nconst useStyles2 = makeStyles({\n    table: {\n        minWidth: 300,\n        minHeight: 300,\n    },\n    paper: {\n        minWidth: 300,\n        maxWidth: 430,\n        minHeight: 300,\n    },\n});\n\nfunction NominalDataTable(props: any) {\n    const classes = useStyles2();\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    return (\n        <TableContainer component={Paper} className={classes.paper} id={'nominal-data-table'}>\n            <Table className={classes.table}>\n                <TableHead>\n                    <TableRow>\n                        <TableCell align=\"left\">Nominal Objects</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {(rowsPerPage > 0\n                        ? props.nominalDataObjects.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                        : props.nominalDataObjects\n                    ).map((obj: any) => (\n                        <TableRow key={props.nominalDataObjects.indexOf(obj)}>\n                            <TableCell align=\"left\">\n                                <Box id={'json-object'}>\n                                    <ReactJson\n                                        name={'Object ' + props.nominalDataObjects.indexOf(obj)}\n                                        src={obj}\n                                        theme=\"summerfruit:inverted\"\n                                        displayDataTypes={false}\n                                        displayObjectSize={true}\n                                        collapsed={true}\n                                    />\n                                </Box>\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n                <TableFooter>\n                    <TableRow>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                            colSpan={2}\n                            count={props.nominalDataObjects.length}\n                            labelRowsPerPage={'Rows'}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            SelectProps={{\n                                native: true,\n                            }}\n                            onChangePage={handleChangePage}\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\n                            ActionsComponent={TablePaginationActions}\n                        />\n                    </TableRow>\n                </TableFooter>\n            </Table>\n        </TableContainer>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    nominalDataObjects: state.analysedData.nominalDataObjects,\n});\nexport default connect(mapStateToProps, {})(NominalDataTable);\n","import React from 'react';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableFooter,\n    TablePagination,\n    TableRow,\n    Paper,\n} from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport { connect } from 'react-redux';\nimport ReactJson from 'react-json-view';\nimport { Box, TableHead } from '@material-ui/core';\n\nconst useStyles1 = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexShrink: 0,\n            marginLeft: theme.spacing(1.0),\n        },\n    })\n);\n\ninterface TablePaginationActionsProps {\n    count: number;\n    page: number;\n    rowsPerPage: number;\n    onChangePage: (event: React.MouseEvent<HTMLButtonElement>, newPage: number) => void;\n}\n\nfunction TablePaginationActions(props: TablePaginationActionsProps) {\n    const classes = useStyles1();\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onChangePage } = props;\n\n    const handleFirstPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, 0);\n    };\n\n    const handleBackButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, page - 1);\n    };\n\n    const handleNextButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, page + 1);\n    };\n\n    const handleLastPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n\n    return (\n        <div className={classes.root}>\n            <IconButton onClick={handleFirstPageButtonClick} disabled={page === 0} aria-label=\"first page\">\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"next page\"\n            >\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"last page\"\n            >\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </div>\n    );\n}\n\nconst useStyles2 = makeStyles({\n    table: {\n        minWidth: 300,\n        minHeight: 300,\n    },\n    paper: {\n        minWidth: 300,\n        maxWidth: 430,\n        minHeight: 300,\n    },\n});\n\nfunction OrdinalDataTable(props: any) {\n    const classes = useStyles2();\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    return (\n        <TableContainer component={Paper} className={classes.paper} id={'ordinal-data-table'}>\n            <Table className={classes.table}>\n                <TableHead>\n                    <TableRow>\n                        <TableCell align=\"left\">Ordinal Objects</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {(rowsPerPage > 0\n                        ? props.ordinalDataObjects.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                        : props.ordinalDataObjects\n                    ).map((obj: any) => (\n                        <TableRow key={props.ordinalDataObjects.indexOf(obj)}>\n                            <TableCell align=\"left\">\n                                <Box id={'json-object'}>\n                                    <ReactJson\n                                        name={'Object ' + props.ordinalDataObjects.indexOf(obj)}\n                                        src={obj}\n                                        theme=\"summerfruit:inverted\"\n                                        displayDataTypes={false}\n                                        displayObjectSize={true}\n                                        collapsed={true}\n                                    />\n                                </Box>\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n                <TableFooter>\n                    <TableRow>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                            colSpan={2}\n                            count={props.ordinalDataObjects.length}\n                            labelRowsPerPage={'Rows'}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            SelectProps={{\n                                native: true,\n                            }}\n                            onChangePage={handleChangePage}\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\n                            ActionsComponent={TablePaginationActions}\n                        />\n                    </TableRow>\n                </TableFooter>\n            </Table>\n        </TableContainer>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    ordinalDataObjects: state.analysedData.ordinalDataObjects,\n});\nexport default connect(mapStateToProps, {})(OrdinalDataTable);\n","import React from 'react';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableFooter,\n    TablePagination,\n    TableRow,\n    Paper,\n} from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport { connect } from 'react-redux';\nimport ReactJson from 'react-json-view';\nimport { Box, TableHead } from '@material-ui/core';\n\nconst useStyles1 = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexShrink: 0,\n            marginLeft: theme.spacing(1.0),\n        },\n    })\n);\n\ninterface TablePaginationActionsProps {\n    count: number;\n    page: number;\n    rowsPerPage: number;\n    onChangePage: (event: React.MouseEvent<HTMLButtonElement>, newPage: number) => void;\n}\n\nfunction TablePaginationActions(props: TablePaginationActionsProps) {\n    const classes = useStyles1();\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onChangePage } = props;\n\n    const handleFirstPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, 0);\n    };\n\n    const handleBackButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, page - 1);\n    };\n\n    const handleNextButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, page + 1);\n    };\n\n    const handleLastPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n\n    return (\n        <div className={classes.root}>\n            <IconButton onClick={handleFirstPageButtonClick} disabled={page === 0} aria-label=\"first page\">\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"next page\"\n            >\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"last page\"\n            >\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </div>\n    );\n}\n\nconst useStyles2 = makeStyles({\n    table: {\n        minWidth: 300,\n        minHeight: 300,\n    },\n    paper: {\n        minWidth: 300,\n        maxWidth: 430,\n        minHeight: 300,\n    },\n});\n\nfunction BinaryDataTable(props: any) {\n    const classes = useStyles2();\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    return (\n        <TableContainer component={Paper} className={classes.paper} id={'binary-data-table'}>\n            <Table className={classes.table}>\n                <TableHead>\n                    <TableRow>\n                        <TableCell align=\"left\">Binary Objects</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {(rowsPerPage > 0\n                        ? props.binaryDataObjects.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                        : props.binaryDataObjects\n                    ).map((obj: any) => (\n                        <TableRow key={props.binaryDataObjects.indexOf(obj)}>\n                            <TableCell align=\"left\">\n                                <Box id={'json-object'}>\n                                    <ReactJson\n                                        name={'Object ' + props.binaryDataObjects.indexOf(obj)}\n                                        src={obj}\n                                        theme=\"summerfruit:inverted\"\n                                        displayDataTypes={false}\n                                        displayObjectSize={true}\n                                        collapsed={true}\n                                    />\n                                </Box>\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n                <TableFooter>\n                    <TableRow>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                            colSpan={2}\n                            count={props.binaryDataObjects.length}\n                            labelRowsPerPage={'Rows'}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            SelectProps={{\n                                native: true,\n                            }}\n                            onChangePage={handleChangePage}\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\n                            ActionsComponent={TablePaginationActions}\n                        />\n                    </TableRow>\n                </TableFooter>\n            </Table>\n        </TableContainer>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    binaryDataObjects: state.analysedData.binaryDataObjects,\n});\nexport default connect(mapStateToProps, {})(BinaryDataTable);\n","import React from 'react';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableFooter,\n    TablePagination,\n    TableRow,\n    Paper,\n} from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport { connect } from 'react-redux';\nimport ReactJson from 'react-json-view';\nimport { Box, TableHead } from '@material-ui/core';\n\nconst useStyles1 = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexShrink: 0,\n            marginLeft: theme.spacing(1.0),\n        },\n    })\n);\n\ninterface TablePaginationActionsProps {\n    count: number;\n    page: number;\n    rowsPerPage: number;\n    onChangePage: (event: React.MouseEvent<HTMLButtonElement>, newPage: number) => void;\n}\n\nfunction TablePaginationActions(props: TablePaginationActionsProps) {\n    const classes = useStyles1();\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onChangePage } = props;\n\n    const handleFirstPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, 0);\n    };\n\n    const handleBackButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, page - 1);\n    };\n\n    const handleNextButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, page + 1);\n    };\n\n    const handleLastPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n\n    return (\n        <div className={classes.root}>\n            <IconButton onClick={handleFirstPageButtonClick} disabled={page === 0} aria-label=\"first page\">\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"next page\"\n            >\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"last page\"\n            >\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </div>\n    );\n}\n\nconst useStyles2 = makeStyles({\n    table: {\n        minWidth: 300,\n        minHeight: 300,\n    },\n    paper: {\n        minWidth: 300,\n        maxWidth: 430,\n        minHeight: 300,\n    },\n});\n\nfunction IgnoreDataTable(props: any) {\n    const classes = useStyles2();\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    return (\n        <TableContainer component={Paper} className={classes.paper} id={'ignore-data-table'}>\n            <Table className={classes.table}>\n                <TableHead>\n                    <TableRow>\n                        <TableCell align=\"left\">Ignored Objects</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {(rowsPerPage > 0\n                        ? props.ignoreDataObjects.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                        : props.ignoreDataObjects\n                    ).map((obj: any) => (\n                        <TableRow key={props.ignoreDataObjects.indexOf(obj)}>\n                            <TableCell align=\"left\">\n                                <Box id={'json-object'}>\n                                    <ReactJson\n                                        name={'Object ' + props.ignoreDataObjects.indexOf(obj)}\n                                        src={obj}\n                                        theme=\"summerfruit:inverted\"\n                                        displayDataTypes={false}\n                                        displayObjectSize={true}\n                                        collapsed={true}\n                                    />\n                                </Box>\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n                <TableFooter>\n                    <TableRow>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                            colSpan={2}\n                            count={props.ignoreDataObjects.length}\n                            labelRowsPerPage={'Rows'}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            SelectProps={{\n                                native: true,\n                            }}\n                            onChangePage={handleChangePage}\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\n                            ActionsComponent={TablePaginationActions}\n                        />\n                    </TableRow>\n                </TableFooter>\n            </Table>\n        </TableContainer>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    ignoreDataObjects: state.analysedData.ignoreDataObjects,\n});\nexport default connect(mapStateToProps, {})(IgnoreDataTable);\n","import React from 'react';\nimport { Box, makeStyles } from '@material-ui/core';\nimport IntervalDataTable from './Tables/IntervalDataTable';\nimport NominalDataTable from './Tables/NominalDataTable';\nimport OrdinalDataTable from './Tables/OrdinalDataTable';\nimport BinaryDataTable from './Tables/BinaryDataTable';\nimport IgnoreDataTable from './Tables/IgnoreDataTable';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: '100%',\n    },\n    container: {\n        width: '40%',\n    },\n    alignItemsAndJustifyContent: {\n        width: '100%',\n        height: '100%',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: 'pink',\n    },\n}));\n\nexport default function ViewAnalysedData() {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            my={15}\n        >\n            <Box\n                display=\"flex\"\n                justifyContent=\"center\"\n                flexDirection=\"row\"\n                alignItems=\"center\"\n                className={classes.root}\n                id={'view-imported-data1'}\n                my={15}\n            >\n                <Box mx={5}>\n                    <IntervalDataTable />\n                </Box>\n                <Box mx={5}>\n                    <NominalDataTable />\n                </Box>\n                <Box mx={5}>\n                    <IgnoreDataTable />\n                </Box>\n            </Box>\n            <Box\n                display=\"flex\"\n                justifyContent=\"center\"\n                flexDirection=\"row\"\n                alignItems=\"center\"\n                className={classes.root}\n                id={'view-imported-data2'}\n                my={15}\n            >\n                <Box mx={5}>\n                    <OrdinalDataTable />\n                </Box>\n                <Box mx={5}>\n                    <BinaryDataTable />\n                </Box>\n            </Box>\n        </Box>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box } from '@material-ui/core';\nimport { HorizontalGridLines, LineSeries, VerticalGridLines, XAxis, XYPlot, YAxis } from 'react-vis';\nimport { connect } from 'react-redux';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    statDescription: {\n        margin: theme.spacing(1),\n        textAlign: 'left',\n        color: theme.palette.text.primary,\n    },\n}));\n\nfunction LineSeriesVis(props: any) {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            flexWrap=\"nowrap\"\n            overflow=\"auto\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'line-series'}\n            mx={15}\n        >\n            <Box>\n                <XYPlot\n                    id={'line-series-vis'}\n                    height={props.currentLineVisual.height}\n                    width={props.currentLineVisual.width}\n                    margin={{ left: 75 }}\n                >\n                    <HorizontalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <VerticalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <XAxis\n                        //@ts-ignore\n                        style={{ text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600, margin: 5, padding: 5 } }}\n                    />\n                    <YAxis\n                        // left={50}\n                        style={{ text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600, margin: 5, padding: 5 } }}\n                    />\n\n                    <LineSeries\n                        style={{\n                            strokeLinejoin: 'round',\n                            strokeWidth: props.currentLineVisual.lineWidth,\n                        }}\n                        strokeStyle={props.currentLineVisual.lineStyle}\n                        opacity={props.currentLineVisual.opacity}\n                        curve={props.currentLineVisual.curve}\n                        data={props.currentLineVisual.data}\n                        stroke={props.currentLineVisual.stroke}\n                    />\n                </XYPlot>\n            </Box>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    currentLineVisual: state.currentLineVisual,\n    lineSeriesOptions: state.lineSeriesOptions,\n});\nexport default connect(mapStateToProps, {})(LineSeriesVis);\n","export interface ILineSeriesOptions {\n    xValue: string;\n    yValue: string;\n    height: number;\n    width: number;\n    stroke: string;\n    opacity: number;\n    curveType: CurveType | null;\n    lineStyle: LineStyle | undefined;\n    lineWidth: number;\n}\nexport enum CurveType {\n    curveLinear = 'curveLinear',\n    curveLinearClosed = 'curveLinearClosed',\n    curveMonotoneX = 'curveMonotoneX',\n    curveMonotoneY = 'curveMonotoneY',\n    curveNatural = 'curveNatural',\n    curveStep = 'curveStep',\n    curveStepAfter = 'curveStepAfter',\n    curveStepBefore = 'curveStepBefore',\n}\nexport enum LineStyle {\n    DASHED = 'dashed',\n    SOLID = 'solid',\n}\n","import { ILineSeriesOptions } from '../../../Interfaces/Visualisations/Line/ILineSeriesOptions';\nimport { NotificationsHandler } from '../../../UIHandling/NotificationsHandler';\n\nexport class LineSeriesOptionsValidate {\n    private readonly options: ILineSeriesOptions;\n    constructor(lineSeriesOptions: ILineSeriesOptions) {\n        this.options = lineSeriesOptions;\n    }\n    public validate(): NotificationsHandler {\n        const notifications: NotificationsHandler = new NotificationsHandler();\n        if (this.options.xValue === this.options.yValue) {\n            notifications.addNotification('Cannot select the same fields for X Value and Y Value');\n        }\n        if (!this.lengthIsValid(this.options.height)) {\n            notifications.addNotification(\n                `The minimum value for Height is 100, the maximum value for Height is 800. The current height is ${this.options.height}`\n            );\n        }\n        if (!this.lengthIsValid(this.options.width)) {\n            notifications.addNotification(\n                `The minimum value for Width is 100, the maximum value for Width is 800. The current width is ${this.options.width}`\n            );\n        }\n        if (!this.opacityIsValid(this.options.opacity)) {\n            notifications.addNotification(\n                `The minimum value for Opacity is 0, the maximum value for Opacity is 1. The current Opacity is ${this.options.opacity}`\n            );\n        }\n        if (!this.lineWidthIsValid(this.options.lineWidth)) {\n            notifications.addNotification(\n                `The minimum value for Line Width is 1, the maximum value for Line Width is 10. The current line width is ${this.options.lineWidth}`\n            );\n        }\n        return notifications;\n    }\n\n    private lengthIsValid(length: number): boolean {\n        return !(length > 800 || length < 100);\n    }\n    private opacityIsValid(opacity: number): boolean {\n        return !(opacity > 1 || opacity < 0);\n    }\n    private lineWidthIsValid(width: number): boolean {\n        return !(width > 10 || width < 1);\n    }\n}\n","import { FieldTypes, IAnalysedFileData } from '../Interfaces/Analyse/IAnalysedFileData';\nimport GetAnalysedData from '../Domain/ReduxStoreHandling/AnalysedData/GetAnalysedData';\n\nexport class DataHandler {\n    public createDataMapWithCount(xValue: string, yValue: string, analysedData: Array<object>): Map<any, any> {\n        const dataMap = new Map();\n        analysedData.forEach((obj) => {\n            const convertedObj = JSON.stringify(this.createIntegerDataObject(xValue, yValue, obj));\n            if (dataMap.has(convertedObj)) {\n                dataMap.get(convertedObj).count += 1;\n            } else {\n                dataMap.set(convertedObj, { count: 1 });\n            }\n        });\n        return dataMap;\n    }\n    public checkDataType(field: string, fields: Array<object>): FieldTypes {\n        // @ts-ignore\n        const index = fields.findIndex((object) => Object.values(object)[0] === field);\n        const fieldObject = Object.values(fields[index]);\n        return fieldObject[1];\n    }\n    public createArrayFromDataMap(xValue: string, yValue: string, dataMap: Map<any, any>): Array<object> {\n        const data: Array<object> = [];\n        dataMap.forEach((value, key) => {\n            const keyValues = Object.values(JSON.parse(key));\n            data.push({ x: keyValues[0], y: keyValues[1] });\n        });\n        return data.sort((a, b) => (Object.values(a)[0] > Object.values(b)[0] ? 1 : -1));\n    }\n\n    public createIntegerDataObject(xValue: string, yValue: string, currentObject: object): object {\n        let x: number = 0;\n        let y: number = 0;\n        for (const [key, value] of Object.entries(currentObject)) {\n            if (key === xValue) {\n                x = value;\n            } else if (key === yValue) {\n                y = value;\n                return { x, y };\n            }\n        }\n        return {};\n    }\n    public createAngleObjectFromColumnPercent(column: string, analysedDataObjects: Array<object>): Array<object> {\n        const angleObjectsArray: Array<object> = [];\n        analysedDataObjects.forEach((dataObject) => {\n            for (const [key, value] of Object.entries(dataObject)) {\n                if (key === column) {\n                    value.forEach((valueObject: object) => {\n                        angleObjectsArray.push({\n                            angle: Object.values(valueObject)[2],\n                            label: Object.values(valueObject)[0],\n                        });\n                    });\n                }\n            }\n        });\n        return angleObjectsArray;\n    }\n    public getAnalysedData(): IAnalysedFileData {\n        const getAnalysedData = new GetAnalysedData();\n        return getAnalysedData.get();\n    }\n    public createNonIntegerDataObject(valueObject: object, yValue: string): object {\n        let x: string = '';\n        let y: number = 0;\n        for (const [key, value] of Object.entries(valueObject)) {\n            if (key === 'name') {\n                x = value;\n            } else if (key === yValue) {\n                y = value;\n                return { x, y };\n            }\n        }\n        return {};\n    }\n\n    public getNonIntegerFieldValues(field: string): object {\n        const { nominalDataObjects } = this.getAnalysedData();\n        const { ordinalDataObjects } = this.getAnalysedData();\n        const { binaryDataObjects } = this.getAnalysedData();\n        const allObjects = [...nominalDataObjects, ...ordinalDataObjects, ...binaryDataObjects];\n        for (const object of allObjects) {\n            if (Object.keys(object)[0] === field) {\n                return object;\n            }\n        }\n        return {};\n    }\n    public createNonIntegerDataArray(value: string, countOrPercent: string): Array<object> {\n        const fieldValues = this.getNonIntegerFieldValues(value);\n        const arrayOfValues = Object.values(fieldValues)[0];\n        const data: Array<Object> = [];\n        for (const valueObject of arrayOfValues) {\n            const dataObject = this.createNonIntegerDataObject(valueObject, countOrPercent);\n            data.push(dataObject);\n        }\n        return data;\n    }\n    public createIntegerDataArray(xValue: string, yValue: string, dataObjectsArray: Array<object>): Array<object> {\n        const data: Array<Object> = [];\n        for (const object of dataObjectsArray) {\n            const dataObject = this.createIntegerDataObject(xValue, yValue, object);\n            data.push(dataObject);\n        }\n        return data;\n    }\n}\n","import { reduxStore } from '../../../../ReduxStore/reduxStore';\nimport { addLineOptions, resetLineOptions } from '../../../../ReduxStore/Actions/ReducerActions';\nimport { ILineSeriesOptions } from '../../../../Interfaces/Visualisations/Line/ILineSeriesOptions';\n\nexport default class LineSeriesOptions {\n    public create(options: ILineSeriesOptions) {\n        reduxStore.dispatch(addLineOptions(options));\n    }\n    public get(): ILineSeriesOptions {\n        return reduxStore.getState().lineSeriesOptions;\n    }\n    public reset() {\n        reduxStore.dispatch(resetLineOptions());\n    }\n}\n","import { ILineSeriesVis } from '../../../Interfaces/Visualisations/Line/ILineSeriesVis';\nimport { DataHandler } from '../../../Util/DataHandler';\nimport LineSeriesOptions from '../../ReduxStoreHandling/Plotting/Line/LineSeriesOptions';\n\nexport class LineSeriesCreateVis {\n    private dataHandler = new DataHandler();\n    public createVis(): ILineSeriesVis {\n        const lineSeriesOptions = new LineSeriesOptions().get();\n        if (Object.keys(lineSeriesOptions).length === 0) {\n            return this.createDefaultOptions();\n        }\n\n        const dataMap = this.dataHandler.createDataMapWithCount(\n            lineSeriesOptions.xValue,\n            lineSeriesOptions.yValue,\n            this.dataHandler.getAnalysedData().intervalDataObjects\n        );\n        return {\n            data: this.dataHandler.createArrayFromDataMap(lineSeriesOptions.xValue, lineSeriesOptions.yValue, dataMap),\n            height: lineSeriesOptions.height,\n            width: lineSeriesOptions.width,\n            stroke: lineSeriesOptions.stroke,\n            opacity: lineSeriesOptions.opacity,\n            curveType: lineSeriesOptions.curveType,\n            lineStyle: lineSeriesOptions.lineStyle,\n            lineWidth: lineSeriesOptions.lineWidth,\n        };\n    }\n    private createDefaultOptions(): ILineSeriesVis {\n        const { intervalFields } = this.dataHandler.getAnalysedData();\n        const dataMap = this.dataHandler.createDataMapWithCount(\n            intervalFields[0],\n            intervalFields[1],\n            this.dataHandler.getAnalysedData().intervalDataObjects\n        );\n        return {\n            data: this.dataHandler.createArrayFromDataMap(intervalFields[0], intervalFields[1], dataMap),\n            height: 800,\n            width: 800,\n            stroke: '#000000',\n            opacity: 1,\n            curveType: null,\n            lineStyle: undefined,\n            lineWidth: 2,\n        };\n    }\n}\n","import { reduxStore } from '../../../../ReduxStore/reduxStore';\nimport { addCurrentLineVisual, resetCurrentLineVisual } from '../../../../ReduxStore/Actions/ReducerActions';\nimport { ILineSeriesVis } from '../../../../Interfaces/Visualisations/Line/ILineSeriesVis';\n\nexport default class CurrentLineVisual {\n    public create(currentVisual: ILineSeriesVis) {\n        reduxStore.dispatch(addCurrentLineVisual(currentVisual));\n    }\n    public get(): ILineSeriesVis {\n        return reduxStore.getState().currentLineVisual;\n    }\n    public reset() {\n        reduxStore.dispatch(resetCurrentLineVisual());\n    }\n}\n","import { LineSeriesCreateVis } from '../../../Domain/Visualisations/LineSeries/LineSeriesCreateVis';\nimport CurrentLineVisual from '../../../Domain/ReduxStoreHandling/Plotting/Line/CurrentLineVisual';\n\nexport class LineSeriesVisHandler {\n    public createLineVisual() {\n        const createLineVis = new LineSeriesCreateVis().createVis();\n        const createCurrentLineVisual = new CurrentLineVisual();\n        createCurrentLineVisual.create(createLineVis);\n    }\n    public resetLineVisual() {\n        new CurrentLineVisual().reset();\n    }\n}\n","import { ILineSeriesOptions } from '../../../Interfaces/Visualisations/Line/ILineSeriesOptions';\nimport { NotificationsHandler } from '../../NotificationsHandler';\nimport { LineSeriesOptionsValidate } from '../../../Domain/Visualisations/LineSeries/LineSeriesOptionsValidate';\nimport { LineSeriesVisHandler } from './LineSeriesVisHandler';\nimport LineSeriesOptions from '../../../Domain/ReduxStoreHandling/Plotting/Line/LineSeriesOptions';\n\nexport class LineSeriesOptionsHandler {\n    private options: ILineSeriesOptions;\n    private lineSeriesOptions = new LineSeriesOptions();\n    constructor(options: ILineSeriesOptions) {\n        this.options = options;\n    }\n    public validateOptions(): NotificationsHandler {\n        const notifications = new NotificationsHandler();\n        const lineSeriesOptions = new LineSeriesOptionsValidate(this.options);\n        const optionsErrors = lineSeriesOptions.validate();\n        notifications.concat(optionsErrors);\n        if (notifications.isEmpty()) {\n            this.createOptions();\n            new LineSeriesVisHandler().createLineVisual();\n        }\n        return notifications;\n    }\n    private createOptions() {\n        this.lineSeriesOptions.create(this.options);\n    }\n    public getOptions(): ILineSeriesOptions {\n        return this.lineSeriesOptions.get();\n    }\n    public resetOptions() {\n        this.lineSeriesOptions.reset();\n    }\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Button, FormControl, FormHelperText, InputLabel, Select, TextField, Typography } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport {\n    CurveType,\n    ILineSeriesOptions,\n    LineStyle,\n} from '../../../../Interfaces/Visualisations/Line/ILineSeriesOptions';\n\nimport { AlertType } from '../../../../Interfaces/Notification/INotification';\nimport { NotificationsHandler } from '../../../../UIHandling/NotificationsHandler';\nimport AlertNotification from '../../Notifications/AlertNotification';\nimport { LineSeriesOptionsHandler } from '../../../../UIHandling/Visualisations/LineSeries/LineSeriesOptionsHandler';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    root: {\n        // width: '100%',\n    },\n    textColor: {\n        color: theme.palette.text.primary,\n    },\n    helperTextColor: {\n        color: theme.palette.text.disabled,\n    },\n}));\nfunction LineOptions(props: any) {\n    const classes = useStyles();\n    const [options, setOptions] = React.useState<{\n        xValue: string;\n        yValue: string;\n        height: number;\n        width: number;\n        stroke: string;\n        opacity: number;\n        curveType: CurveType | null;\n        lineStyle: LineStyle | undefined;\n        lineWidth: number;\n    }>({\n        xValue: '',\n        yValue: '',\n        height: 800,\n        width: 800,\n        stroke: '#000000',\n        opacity: 1,\n        curveType: null,\n        lineStyle: undefined,\n        lineWidth: 2,\n    });\n    const [notifications, setNotifications] = React.useState<{\n        outcome: AlertType | undefined;\n        outcomeMessage: string;\n        errors: NotificationsHandler;\n    }>({\n        outcome: undefined,\n        outcomeMessage: '',\n        errors: new NotificationsHandler(),\n    });\n    function submitIsEnabled(): boolean {\n        return !(options.xValue.length !== 0 && options.yValue.length !== 0 && xValAndYValIsEqual());\n    }\n    function xValAndYValIsEqual(): boolean {\n        return options.xValue !== options.yValue;\n    }\n    function validateDataOptions() {\n        const optionsToValidate: ILineSeriesOptions = {\n            xValue: options.xValue,\n            yValue: options.yValue,\n            height: options.height,\n            width: options.width,\n            stroke: options.stroke,\n            opacity: options.opacity,\n            curveType: options.curveType,\n            lineStyle: options.lineStyle,\n            lineWidth: options.lineWidth,\n        };\n        const validateOptions = new LineSeriesOptionsHandler(optionsToValidate);\n        const errors: NotificationsHandler = validateOptions.validateOptions();\n        if (errors.isEmpty()) {\n            try {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Options Validated',\n                });\n            } catch (e) {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            setNotifications({\n                ...notifications,\n                errors: errors,\n            });\n        }\n    }\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'line-plotting-options'}\n            mx={15}\n        >\n            <Box style={{ height: '50%', width: '50%' }} id={'alert-area'}>\n                {notifications.outcome && (\n                    <AlertNotification alert={notifications.outcome} notification={notifications.outcomeMessage} />\n                )}\n                {!notifications.errors.isEmpty() && (\n                    <AlertNotification\n                        alert={AlertType.FAILED}\n                        notification={`Error(s): ${notifications.errors.notification()}`}\n                    />\n                )}\n            </Box>\n            <div className={classes.paper}>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    className={classes.root}\n                    id={'line-plotting-options'}\n                    px={20}\n                    py={20}\n                >\n                    <Typography id={'line-plotting-title'}>Line Series Plotting Options</Typography>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\n                        <FormControl required style={{ minWidth: 200 }} id={'x-values-select'}>\n                            <InputLabel className={classes.textColor}>X Value</InputLabel>\n                            <Select\n                                id={'select-xValue'}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        xValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"X Values\"\n                                renderValue={(value) => {\n                                    if (!xValAndYValIsEqual()) {\n                                        return `⚠️  - ${value}`;\n                                    }\n                                    return `${value}`;\n                                }}\n                            >\n                                {props.intervalFields.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on X-Axis</FormHelperText>\n                        </FormControl>\n                        <Box mx={5} />\n                        <FormControl required style={{ minWidth: 200 }} id={'y-values-select'}>\n                            <InputLabel className={classes.textColor}>Y Value</InputLabel>\n                            <Select\n                                renderValue={(value) => {\n                                    if (!xValAndYValIsEqual()) {\n                                        return `⚠️  - ${value}`;\n                                    }\n                                    return `${value}`;\n                                }}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        yValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"Y Values\"\n                            >\n                                {props.intervalFields.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on Y-Axis</FormHelperText>\n                        </FormControl>\n                    </Box>\n                    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'size-textfields'}>\n                        <TextField\n                            type={'number'}\n                            id=\"height-textfield\"\n                            label=\"Height\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    height: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"width-textfield\"\n                            label=\"Width\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    width: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'stroke-textfields'}>\n                        <FormControl style={{ minWidth: 200 }} id={'stroke-select'}>\n                            <InputLabel className={classes.textColor}>Colour</InputLabel>\n                            <Select\n                                value={options.stroke}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        stroke: event.target.value as string,\n                                    });\n                                }}\n                                name=\"stroke\"\n                            >\n                                <option value={'red'}>red</option>\n                                <option value={'green'}>green</option>\n                                <option value={'blue'}>blue</option>\n                                <option value={'purple'}>purple</option>\n                                <option value={'orange'}>orange</option>\n                                <option value={'black'}>black</option>\n                                <option value={'yellow'}>yellow</option>\n                                <option value={'brown'}>brown</option>\n                                <option value={'pink'}>pink</option>\n                                <option value={'turquoise'}>turquoise</option>\n                            </Select>\n                        </FormControl>\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"opacity-textfield\"\n                            label=\"Opacity\"\n                            variant=\"outlined\"\n                            helperText=\"Value must be between 0 and 1\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    opacity: parseFloat(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box>\n                        <FormControl style={{ minWidth: 400 }} id={'curve-select'}>\n                            <InputLabel className={classes.textColor}>Curve</InputLabel>\n                            <Select\n                                // value={options.curveType}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        curveType: event.target.value as CurveType,\n                                    });\n                                }}\n                                name=\"Curve Type\"\n                            >\n                                <option value={CurveType.curveLinear}>Linear</option>\n                                <option value={CurveType.curveLinearClosed}>Linear Closed</option>\n                                <option value={CurveType.curveMonotoneX}>Monotone X</option>\n                                <option value={CurveType.curveMonotoneY}>Monotone Y</option>\n                                <option value={CurveType.curveNatural}>Natural</option>\n                                <option value={CurveType.curveStep}>Step</option>\n                                <option value={CurveType.curveStepAfter}>Step After</option>\n                                <option value={CurveType.curveStepBefore}>Step Before</option>\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>\n                                Function used to create curve\n                            </FormHelperText>\n                        </FormControl>\n                    </Box>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'line-options'}>\n                        <FormControl style={{ minWidth: 200 }} id={'line-style-select'}>\n                            <InputLabel className={classes.textColor}>Line Style</InputLabel>\n                            <Select\n                                value={options.lineStyle}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        lineStyle: event.target.value as LineStyle,\n                                    });\n                                }}\n                                name=\"Y Values\"\n                            >\n                                <option value={LineStyle.SOLID}>Solid</option>\n                                <option value={LineStyle.DASHED}>Dashed</option>\n                            </Select>\n                        </FormControl>\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"line-width-textfield\"\n                            label=\"Line Width\"\n                            variant=\"outlined\"\n                            helperText=\"Default: 2px\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    lineWidth: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box id={'submit-button'}>\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            disabled={submitIsEnabled()}\n                            id={'options-submit-button'}\n                            onClick={validateDataOptions}\n                        >\n                            Submit\n                        </Button>\n                    </Box>\n                </Box>\n            </div>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    intervalFields: state.analysedData.intervalFields,\n});\nexport default connect(mapStateToProps, {})(LineOptions);\n","export interface IBarSeriesOptions {\n    xValue: string;\n    yValue: yValue;\n    height: number;\n    width: number;\n    colour: string;\n    stroke: string;\n    opacity: number;\n    fill: string;\n    barWidth: number;\n}\nexport enum yValue {\n    count = 'count',\n    percent = 'percent',\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box } from '@material-ui/core';\nimport LineSeriesVis from './LineSeriesVis';\nimport LineSeriesOptions from './LineOptions';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n}));\n\nexport default function LineSeriesPage() {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"row\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'line-plotting-page'}\n        >\n            <Box mx={10}>\n                <LineSeriesVis />\n            </Box>\n            <Box mx={10}>\n                <LineSeriesOptions />\n            </Box>\n        </Box>\n    );\n}\n","import { IBarSeriesOptions } from '../../../Interfaces/Visualisations/Bar/IBarSeriesOptions';\nimport { NotificationsHandler } from '../../../UIHandling/NotificationsHandler';\n\nexport class BarSeriesOptionsValidate {\n    private readonly options: IBarSeriesOptions;\n    constructor(barSeriesOptions: IBarSeriesOptions) {\n        this.options = barSeriesOptions;\n    }\n    public validate(): NotificationsHandler {\n        const notifications = new NotificationsHandler();\n        if (!this.lengthIsValid(this.options.height)) {\n            notifications.addNotification(\n                `The minimum value for Height is 100, the maximum value for Height is 800. The current height is ${this.options.height}`\n            );\n        }\n        if (!this.lengthIsValid(this.options.width)) {\n            notifications.addNotification(\n                `The minimum value for Width is 100, the maximum value for Width is 800. The current width is ${this.options.width}`\n            );\n        }\n        if (!this.opacityOrBarWidthIsValid(this.options.opacity)) {\n            notifications.addNotification(\n                `The minimum value for Opacity is 0, the maximum value for Opacity is 1. The current Opacity is ${this.options.opacity}`\n            );\n        }\n        if (!this.opacityOrBarWidthIsValid(this.options.barWidth)) {\n            notifications.addNotification(\n                `The minimum value for bar width is 0, the maximum value for bar width is 1. The current bar width is ${this.options.barWidth}`\n            );\n        }\n        return notifications;\n    }\n    private lengthIsValid(length: number): boolean {\n        return !(length > 800 || length < 100);\n    }\n    private opacityOrBarWidthIsValid(opacity: number): boolean {\n        return !(opacity > 1 || opacity < 0);\n    }\n}\n","import { reduxStore } from '../../../../ReduxStore/reduxStore';\nimport { addBarOptions, resetBarOptions } from '../../../../ReduxStore/Actions/ReducerActions';\nimport { IBarSeriesOptions } from '../../../../Interfaces/Visualisations/Bar/IBarSeriesOptions';\n\nexport default class BarSeriesOptions {\n    public create(options: IBarSeriesOptions) {\n        reduxStore.dispatch(addBarOptions(options));\n    }\n    public get(): IBarSeriesOptions {\n        return reduxStore.getState().barSeriesOptions;\n    }\n    public reset() {\n        reduxStore.dispatch(resetBarOptions());\n    }\n}\n","import { IBarSeriesVis } from '../../../Interfaces/Visualisations/Bar/IBarSeriesVis';\nimport { DataHandler } from '../../../Util/DataHandler';\nimport BarSeriesOptions from '../../ReduxStoreHandling/Plotting/Bar/BarSeriesOptions';\n\nexport class BarSeriesCreateVis {\n    private dataHandler = new DataHandler();\n    public createVis(): IBarSeriesVis {\n        const barSeriesOptions = new BarSeriesOptions().get();\n        if (Object.keys(barSeriesOptions).length === 0) {\n            return this.createDefaultOptions();\n        }\n        return {\n            barWidth: barSeriesOptions.barWidth,\n            colour: barSeriesOptions.colour,\n            data: this.dataHandler.createNonIntegerDataArray(barSeriesOptions.xValue, barSeriesOptions.yValue),\n            fill: barSeriesOptions.fill,\n            height: barSeriesOptions.height,\n            opacity: barSeriesOptions.opacity,\n            stroke: barSeriesOptions.stroke,\n            width: barSeriesOptions.width,\n        };\n    }\n    private createDefaultOptions(): IBarSeriesVis {\n        return {\n            barWidth: 0.5,\n            colour: '#000000',\n            fill: '#000000',\n            height: 800,\n            opacity: 1,\n            stroke: '#000000',\n            width: 800,\n            data: [{ x: this.getFirstXValue(), y: this.getFirstYValue() }],\n        };\n    }\n    private getFirstXValue(): any {\n        const { nominalDataObjects } = this.dataHandler.getAnalysedData();\n        const firstField = nominalDataObjects[0];\n        const fieldArray = Object.values(firstField)[0];\n        const firstObject = fieldArray[0];\n        return Object.values(firstObject)[0];\n    }\n    private getFirstYValue(): any {\n        const { nominalDataObjects } = this.dataHandler.getAnalysedData();\n        const firstField = nominalDataObjects[0];\n        const fieldArray = Object.values(firstField)[0];\n        const firstObject = fieldArray[0];\n        return Object.values(firstObject)[2];\n    }\n}\n","import { reduxStore } from '../../../../ReduxStore/reduxStore';\nimport { addCurrentBarVisual, resetCurrentBarVisual } from '../../../../ReduxStore/Actions/ReducerActions';\nimport { IBarSeriesVis } from '../../../../Interfaces/Visualisations/Bar/IBarSeriesVis';\n\nexport default class CurrentBarVisual {\n    public create(currentVisual: IBarSeriesVis) {\n        reduxStore.dispatch(addCurrentBarVisual(currentVisual));\n    }\n    public get(): IBarSeriesVis {\n        return reduxStore.getState().currentBarVisual;\n    }\n    public reset() {\n        reduxStore.dispatch(resetCurrentBarVisual());\n    }\n}\n","import { BarSeriesCreateVis } from '../../../Domain/Visualisations/BarSeries/BarSeriesCreateVis';\nimport CurrentBarVisual from '../../../Domain/ReduxStoreHandling/Plotting/Bar/CurrentBarVisual';\n\nexport class BarSeriesVisHandler {\n    public createBarVisual() {\n        const createBarVis = new BarSeriesCreateVis().createVis();\n        const createCurrentBarVisual = new CurrentBarVisual();\n        createCurrentBarVisual.create(createBarVis);\n    }\n    public resetBarVisual() {\n        new CurrentBarVisual().reset();\n    }\n}\n","import { IBarSeriesOptions } from '../../../Interfaces/Visualisations/Bar/IBarSeriesOptions';\nimport { NotificationsHandler } from '../../NotificationsHandler';\nimport { BarSeriesOptionsValidate } from '../../../Domain/Visualisations/BarSeries/BarSeriesOptionsValidate';\nimport { BarSeriesVisHandler } from './BarSeriesVisHandler';\nimport BarSeriesOptions from '../../../Domain/ReduxStoreHandling/Plotting/Bar/BarSeriesOptions';\n\nexport class BarSeriesOptionsHandler {\n    private options: IBarSeriesOptions;\n    private barSeriesOptions = new BarSeriesOptions();\n    constructor(options: IBarSeriesOptions) {\n        this.options = options;\n    }\n    public validateOptions(): NotificationsHandler {\n        const notifications = new NotificationsHandler();\n        const barSeriesOptions = new BarSeriesOptionsValidate(this.options);\n        const optionsErrors = barSeriesOptions.validate();\n        notifications.concat(optionsErrors);\n        if (notifications.isEmpty()) {\n            this.createOptions();\n            new BarSeriesVisHandler().createBarVisual();\n        }\n        return notifications;\n    }\n    private createOptions() {\n        this.barSeriesOptions.create(this.options);\n    }\n    public getOptions(): IBarSeriesOptions {\n        return this.barSeriesOptions.get();\n    }\n    public resetOptions() {\n        this.barSeriesOptions.reset();\n    }\n}\n","import React from 'react';\nimport { Box, Button, FormControl, FormHelperText, InputLabel, Select, TextField, Typography } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { AlertType } from '../../../../Interfaces/Notification/INotification';\nimport { NotificationsHandler } from '../../../../UIHandling/NotificationsHandler';\nimport { IBarSeriesOptions, yValue } from '../../../../Interfaces/Visualisations/Bar/IBarSeriesOptions';\nimport AlertNotification from '../../Notifications/AlertNotification';\nimport { BarSeriesOptionsHandler } from '../../../../UIHandling/Visualisations/BarSeries/BarSeriesOptionsHandler';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    root: {\n        // width: '100%',\n    },\n    textColor: {\n        color: theme.palette.text.primary,\n    },\n    helperTextColor: {\n        color: theme.palette.text.disabled,\n    },\n}));\nfunction BarOptions(props: any) {\n    const classes = useStyles();\n    // @ts-ignore\n    const [options, setOptions] = React.useState<{\n        xValue: string;\n        yValue: yValue;\n        height: number;\n        width: number;\n        colour: string;\n        stroke: string;\n        opacity: number;\n        fill: string;\n        barWidth: number;\n    }>({\n        barWidth: 1,\n        colour: '#000000',\n        fill: '#000000',\n        height: 800,\n        opacity: 1,\n        stroke: '#000000',\n        width: 800,\n        xValue: '',\n        yValue: yValue.count,\n    });\n    const allValues = [...props.nominalFields, ...props.ordinalFields, ...props.binaryFields];\n    const [notifications, setNotifications] = React.useState<{\n        outcome: AlertType | undefined;\n        outcomeMessage: string;\n        errors: NotificationsHandler;\n    }>({\n        outcome: undefined,\n        outcomeMessage: '',\n        errors: new NotificationsHandler(),\n    });\n    function submitIsEnabled(): boolean {\n        return !(options.xValue.length !== 0 && options.yValue !== undefined);\n    }\n    function validateDataOptions() {\n        const optionsToValidate: IBarSeriesOptions = {\n            barWidth: options.barWidth,\n            colour: options.colour,\n            fill: '',\n            xValue: options.xValue,\n            yValue: options.yValue,\n            height: options.height,\n            width: options.width,\n            stroke: options.stroke,\n            opacity: options.opacity,\n        };\n        const validateOptions = new BarSeriesOptionsHandler(optionsToValidate);\n        const errors: NotificationsHandler = validateOptions.validateOptions();\n        if (errors.isEmpty()) {\n            try {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Options Validated',\n                });\n            } catch (e) {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            setNotifications({\n                ...notifications,\n                errors: errors,\n            });\n        }\n    }\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'bar-plotting-options'}\n            mx={15}\n        >\n            <Box style={{ height: '50%', width: '50%' }} id={'alert-area'}>\n                {notifications.outcome && (\n                    <AlertNotification alert={notifications.outcome} notification={notifications.outcomeMessage} />\n                )}\n                {!notifications.errors.isEmpty() && (\n                    <AlertNotification\n                        alert={AlertType.FAILED}\n                        notification={`Error(s): ${notifications.errors.notification()}`}\n                    />\n                )}\n            </Box>\n            <div className={classes.paper}>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    className={classes.root}\n                    id={'bar-plotting-options'}\n                    px={20}\n                    py={20}\n                >\n                    <Typography id={'bar-plotting-title'}>Bar Series Options</Typography>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\n                        <FormControl required style={{ minWidth: 200 }} id={'x-values-select'}>\n                            <InputLabel className={classes.textColor}>X Value</InputLabel>\n                            <Select\n                                id={'select-xValue'}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        xValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"X Values\"\n                                value={options.xValue}\n                            >\n                                {allValues.map((field: string) => (\n                                    <option value={field} id={field + '-option'}>{`${field}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on X-Axis</FormHelperText>\n                        </FormControl>\n                        <Box mx={5} />\n                        <FormControl required style={{ minWidth: 200 }} id={'y-values-select'}>\n                            <InputLabel className={classes.textColor}>Y Value</InputLabel>\n                            <Select\n                                name=\"Y Values\"\n                                value={options.yValue}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        yValue: event.target.value as yValue,\n                                    });\n                                }}\n                            >\n                                <option value={yValue.count}>Count</option>\n                                <option value={yValue.percent}>Percent</option>\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on Y-Axis</FormHelperText>\n                        </FormControl>\n                    </Box>\n                    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'size-textfields'}>\n                        <TextField\n                            type={'number'}\n                            id=\"height-textfield\"\n                            label=\"Height\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    height: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"width-textfield\"\n                            label=\"Width\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    width: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'colour-options'}>\n                        <FormControl style={{ minWidth: 200 }} id={'colour-select'}>\n                            <InputLabel className={classes.textColor}>Bar Fill Colour</InputLabel>\n                            <Select\n                                value={options.colour}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        colour: event.target.value as string,\n                                    });\n                                }}\n                                name=\"colour\"\n                            >\n                                <option value={'red'}>red</option>\n                                <option value={'green'}>green</option>\n                                <option value={'blue'}>blue</option>\n                                <option value={'purple'}>purple</option>\n                                <option value={'orange'}>orange</option>\n                                <option value={'black'}>black</option>\n                                <option value={'yellow'}>yellow</option>\n                                <option value={'brown'}>brown</option>\n                                <option value={'pink'}>pink</option>\n                                <option value={'turquoise'}>turquoise</option>\n                            </Select>\n                        </FormControl>\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"opacity-textfield\"\n                            label=\"Bar Fill Opacity\"\n                            variant=\"outlined\"\n                            helperText=\"Value must be between 0 and 1\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    opacity: parseFloat(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'other-textfields'}>\n                        <FormControl style={{ minWidth: 200 }} id={'stroke-select'}>\n                            <InputLabel className={classes.textColor}>Line Colour</InputLabel>\n                            <Select\n                                value={options.stroke}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        stroke: event.target.value as string,\n                                    });\n                                }}\n                                name=\"stroke\"\n                            >\n                                <option value={'red'}>red</option>\n                                <option value={'green'}>green</option>\n                                <option value={'blue'}>blue</option>\n                                <option value={'purple'}>purple</option>\n                                <option value={'orange'}>orange</option>\n                                <option value={'black'}>black</option>\n                                <option value={'yellow'}>yellow</option>\n                                <option value={'brown'}>brown</option>\n                                <option value={'pink'}>pink</option>\n                                <option value={'turquoise'}>turquoise</option>\n                            </Select>\n                        </FormControl>\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"bar-width-textfield\"\n                            label=\"Bar Width\"\n                            variant=\"outlined\"\n                            helperText=\"Value must be between 0 and 1\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    barWidth: parseFloat(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box id={'submit-button'}>\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            disabled={submitIsEnabled()}\n                            id={'options-submit-button'}\n                            onClick={validateDataOptions}\n                        >\n                            Submit\n                        </Button>\n                    </Box>\n                </Box>\n            </div>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    nominalFields: state.analysedData.nominalFields,\n    ordinalFields: state.analysedData.ordinalFields,\n    binaryFields: state.analysedData.binaryFields,\n});\nexport default connect(mapStateToProps, {})(BarOptions);\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport {\n    XYPlot,\n    XAxis,\n    YAxis,\n    VerticalGridLines,\n    HorizontalGridLines,\n    VerticalBarSeries,\n    VerticalBarSeriesCanvas,\n} from 'react-vis';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    statDescription: {\n        margin: theme.spacing(1),\n        textAlign: 'left',\n        color: theme.palette.text.primary,\n    },\n}));\nfunction BarSeriesVis(props: any) {\n    const classes = useStyles();\n    const [useCanvas] = React.useState(false);\n    const BarSeries = useCanvas ? VerticalBarSeriesCanvas : VerticalBarSeries;\n    return (\n        <Box\n            display=\"flex\"\n            flexWrap=\"nowrap\"\n            overflow=\"auto\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'bar-series'}\n            mx={15}\n        >\n            <Box>\n                <XYPlot\n                    id={'bar-series-vis'}\n                    xType=\"ordinal\"\n                    width={props.currentBarVisual.width}\n                    height={props.currentBarVisual.height}\n                    margin={{ left: 75 }}\n                    xDistance={100}\n                >\n                    <VerticalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <HorizontalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <BarSeries\n                        barWidth={props.currentBarVisual.barWidth}\n                        color={props.currentBarVisual.colour}\n                        opacity={props.currentBarVisual.opacity}\n                        stroke={props.currentBarVisual.stroke}\n                        className=\"vertical-bar-series-example\"\n                        data={props.currentBarVisual.data}\n                    />\n                    <XAxis\n                        //@ts-ignore\n                        style={{ text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600, margin: 5, padding: 5 } }}\n                    />\n                    <YAxis\n                        //@ts-ignore\n                        style={{ text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600, margin: 5, padding: 5 } }}\n                    />\n                </XYPlot>\n            </Box>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    currentBarVisual: state.currentBarVisual,\n    barSeriesOptions: state.barSeriesOptions,\n});\nexport default connect(mapStateToProps, {})(BarSeriesVis);\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box } from '@material-ui/core';\nimport BarSeriesOptions from './BarOptions';\nimport BarSeriesVis from './BarSeriesVis';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n}));\nexport default function BarSeriesPage() {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"row\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'bar-series-page'}\n        >\n            <Box mx={10}>\n                <BarSeriesVis />\n            </Box>\n            <Box mx={10}>\n                <BarSeriesOptions />\n            </Box>\n        </Box>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box } from '@material-ui/core';\nimport { HorizontalGridLines, MarkSeries, VerticalGridLines, XAxis, XYPlot, YAxis } from 'react-vis';\nimport { connect } from 'react-redux';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    statDescription: {\n        margin: theme.spacing(1),\n        textAlign: 'left',\n        color: theme.palette.text.primary,\n    },\n}));\nfunction MarkSeriesVis(props: any) {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            flexWrap=\"nowrap\"\n            overflow=\"auto\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'mark-series'}\n            mx={15}\n        >\n            <Box>\n                <XYPlot\n                    id={'mark-series-vis'}\n                    height={props.currentMarkVisual.height}\n                    width={props.currentMarkVisual.width}\n                    margin={{ left: 75 }}\n                >\n                    <HorizontalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <VerticalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <XAxis\n                        //@ts-ignore\n                        style={{ text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600, margin: 5, padding: 5 } }}\n                    />\n                    <YAxis\n                        // left={50}\n                        style={{ text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600, margin: 5, padding: 5 } }}\n                    />\n                    <MarkSeries\n                        strokeWidth={2}\n                        stroke={props.currentMarkVisual.stroke}\n                        opacity={props.currentMarkVisual.opacity}\n                        sizeRange={[5, 15]}\n                        fill={props.currentMarkVisual.colour}\n                        data={props.currentMarkVisual.data}\n                    />\n                </XYPlot>\n            </Box>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    currentMarkVisual: state.currentMarkVisual,\n});\nexport default connect(mapStateToProps, {})(MarkSeriesVis);\n","import { IMarkSeriesOptions } from '../../../Interfaces/Visualisations/Mark/IMarkSeriesOptions';\nimport { NotificationsHandler } from '../../../UIHandling/NotificationsHandler';\n\nexport class MarkSeriesOptionsValidate {\n    private readonly options: IMarkSeriesOptions;\n    constructor(markSeriesOptions: IMarkSeriesOptions) {\n        this.options = markSeriesOptions;\n    }\n    public validate(): NotificationsHandler {\n        const notifications = new NotificationsHandler();\n        if (!this.lengthIsValid(this.options.height)) {\n            notifications.addNotification(\n                `The minimum value for Height is 100, the maximum value for Height is 800. The current height is ${this.options.height}`\n            );\n        }\n        if (!this.lengthIsValid(this.options.width)) {\n            notifications.addNotification(\n                `The minimum value for Width is 100, the maximum value for Width is 800. The current width is ${this.options.width}`\n            );\n        }\n        if (!this.opacityIsValid(this.options.opacity)) {\n            notifications.addNotification(\n                `The minimum value for Opacity is 0, the maximum value for Opacity is 1. The current Opacity is ${this.options.opacity}`\n            );\n        }\n        return notifications;\n    }\n    private lengthIsValid(length: number): boolean {\n        return !(length > 800 || length < 100);\n    }\n    private opacityIsValid(opacity: number): boolean {\n        return !(opacity > 1 || opacity < 0);\n    }\n}\n","import { reduxStore } from '../../../../ReduxStore/reduxStore';\nimport { addMarkOptions, resetMarkOptions } from '../../../../ReduxStore/Actions/ReducerActions';\nimport { IMarkSeriesOptions } from '../../../../Interfaces/Visualisations/Mark/IMarkSeriesOptions';\n\nexport default class MarkSeriesOptions {\n    public create(options: IMarkSeriesOptions) {\n        reduxStore.dispatch(addMarkOptions(options));\n    }\n    public get(): IMarkSeriesOptions {\n        return reduxStore.getState().markSeriesOptions;\n    }\n    public reset() {\n        reduxStore.dispatch(resetMarkOptions());\n    }\n}\n","import { IMarkSeriesVis } from '../../../Interfaces/Visualisations/Mark/IMarkSeriesVis';\nimport { DataHandler } from '../../../Util/DataHandler';\nimport MarkSeriesOptions from '../../ReduxStoreHandling/Plotting/Mark/MarkSeriesOptions';\nexport class MarkSeriesCreateVis {\n    private dataHandler = new DataHandler();\n    public createVis(): IMarkSeriesVis {\n        const options = new MarkSeriesOptions().get();\n        if (Object.keys(options).length === 0) {\n            return this.createDefaultOptions();\n        }\n        return {\n            data: this.dataHandler.createIntegerDataArray(\n                options.xValue,\n                options.yValue,\n                this.dataHandler.getAnalysedData().intervalDataObjects\n            ),\n            height: options.height,\n            width: options.width,\n            stroke: options.stroke,\n            opacity: options.opacity,\n            fill: options.fill,\n            colour: options.colour,\n        };\n    }\n    private createDefaultOptions(): IMarkSeriesVis {\n        const { intervalFields } = this.dataHandler.getAnalysedData();\n        return {\n            data: this.dataHandler.createIntegerDataArray(\n                intervalFields[0],\n                intervalFields[1],\n                this.dataHandler.getAnalysedData().intervalDataObjects\n            ),\n            height: 800,\n            width: 800,\n            stroke: 'black',\n            opacity: 1,\n            fill: 'black',\n            colour: 'black',\n        };\n    }\n}\n","import { reduxStore } from '../../../../ReduxStore/reduxStore';\nimport { addCurrentMarkVisual, resetCurrentMarkVisual } from '../../../../ReduxStore/Actions/ReducerActions';\nimport { IMarkSeriesVis } from '../../../../Interfaces/Visualisations/Mark/IMarkSeriesVis';\n\nexport default class CurrentMarkVisual {\n    public create(currentVisual: IMarkSeriesVis) {\n        reduxStore.dispatch(addCurrentMarkVisual(currentVisual));\n    }\n    public get(): IMarkSeriesVis {\n        return reduxStore.getState().currentMarkVisual;\n    }\n    public reset() {\n        reduxStore.dispatch(resetCurrentMarkVisual());\n    }\n}\n","import { MarkSeriesCreateVis } from '../../../Domain/Visualisations/MarkSeries/MarkSeriesCreateVis';\nimport CurrentMarkVisual from '../../../Domain/ReduxStoreHandling/Plotting/Mark/CurrentMarkVisual';\n\nexport class MarkSeriesVisHandler {\n    public createVisual() {\n        const createVis = new MarkSeriesCreateVis().createVis();\n        const currentVisual = new CurrentMarkVisual();\n        currentVisual.create(createVis);\n    }\n    public reset() {\n        new CurrentMarkVisual().reset();\n    }\n}\n","import { NotificationsHandler } from '../../NotificationsHandler';\nimport { IMarkSeriesOptions } from '../../../Interfaces/Visualisations/Mark/IMarkSeriesOptions';\nimport { MarkSeriesOptionsValidate } from '../../../Domain/Visualisations/MarkSeries/MarkSeriesOptionsValidate';\nimport { MarkSeriesVisHandler } from './MarkSeriesVisHandler';\nimport MarkSeriesOptions from '../../../Domain/ReduxStoreHandling/Plotting/Mark/MarkSeriesOptions';\n\nexport class MarkSeriesOptionsHandler {\n    private readonly options: IMarkSeriesOptions;\n    private markSeriesOptions = new MarkSeriesOptions();\n    constructor(options: IMarkSeriesOptions) {\n        this.options = options;\n    }\n    public validateOptions(): NotificationsHandler {\n        const notifications = new NotificationsHandler();\n        const seriesOptions = new MarkSeriesOptionsValidate(this.options);\n        const optionsErrors = seriesOptions.validate();\n        notifications.concat(optionsErrors);\n        if (notifications.isEmpty()) {\n            this.createOptions();\n            new MarkSeriesVisHandler().createVisual();\n        }\n        return notifications;\n    }\n    private createOptions() {\n        this.markSeriesOptions.create(this.options);\n    }\n    public getOptions(): IMarkSeriesOptions {\n        return this.markSeriesOptions.get();\n    }\n    public resetOptions() {\n        this.markSeriesOptions.reset();\n    }\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Button, FormControl, FormHelperText, InputLabel, Select, TextField, Typography } from '@material-ui/core';\nimport { connect } from 'react-redux';\n\nimport { AlertType } from '../../../../Interfaces/Notification/INotification';\nimport { NotificationsHandler } from '../../../../UIHandling/NotificationsHandler';\nimport AlertNotification from '../../Notifications/AlertNotification';\nimport { IMarkSeriesOptions } from '../../../../Interfaces/Visualisations/Mark/IMarkSeriesOptions';\nimport { MarkSeriesOptionsHandler } from '../../../../UIHandling/Visualisations/MarkSeries/MarkSeriesOptionsHandler';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    root: {\n        // width: '100%',\n    },\n    textColor: {\n        color: theme.palette.text.primary,\n    },\n    helperTextColor: {\n        color: theme.palette.text.disabled,\n    },\n}));\nfunction MarkOptions(props: any) {\n    const classes = useStyles();\n    const [options, setOptions] = React.useState<{\n        xValue: string;\n        yValue: string;\n        height: number;\n        width: number;\n        colour: string;\n        stroke: string;\n        opacity: number;\n        fill: string;\n    }>({\n        xValue: '',\n        yValue: '',\n        height: 800,\n        width: 800,\n        stroke: '#000000',\n        opacity: 1,\n        fill: '',\n        colour: '',\n    });\n    const [notifications, setNotifications] = React.useState<{\n        outcome: AlertType | undefined;\n        outcomeMessage: string;\n        errors: NotificationsHandler;\n    }>({\n        outcome: undefined,\n        outcomeMessage: '',\n        errors: new NotificationsHandler(),\n    });\n    function submitIsEnabled(): boolean {\n        return !(options.xValue.length !== 0 && options.yValue.length !== 0 && xValAndYValIsEqual());\n    }\n    function xValAndYValIsEqual(): boolean {\n        return options.xValue !== options.yValue;\n    }\n    function validateDataOptions() {\n        const optionsToValidate: IMarkSeriesOptions = {\n            xValue: options.xValue,\n            yValue: options.yValue,\n            height: options.height,\n            width: options.width,\n            stroke: options.stroke,\n            opacity: options.opacity,\n            colour: options.colour,\n            fill: options.fill,\n        };\n        const validateOptions = new MarkSeriesOptionsHandler(optionsToValidate);\n        const errors: NotificationsHandler = validateOptions.validateOptions();\n        if (errors.isEmpty()) {\n            try {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Options Validated',\n                });\n            } catch (e) {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            setNotifications({\n                ...notifications,\n                errors: errors,\n            });\n        }\n    }\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'mark-plotting-options'}\n            mx={15}\n        >\n            <Box style={{ height: '50%', width: '50%' }} id={'alert-area'}>\n                {notifications.outcome && (\n                    <AlertNotification alert={notifications.outcome} notification={notifications.outcomeMessage} />\n                )}\n                {!notifications.errors.isEmpty() && (\n                    <AlertNotification\n                        alert={AlertType.FAILED}\n                        notification={`Error(s): ${notifications.errors.notification()}`}\n                    />\n                )}\n            </Box>\n            <div className={classes.paper}>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    className={classes.root}\n                    id={'mark-plotting-options'}\n                    px={20}\n                    py={20}\n                >\n                    <Typography id={'mark-plotting-title'}>Mark Series Options</Typography>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\n                        <FormControl required style={{ minWidth: 200 }} id={'x-values-select'}>\n                            <InputLabel className={classes.textColor}>X Value</InputLabel>\n                            <Select\n                                id={'select-xValue'}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        xValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"X Values\"\n                                renderValue={(value) => {\n                                    if (!xValAndYValIsEqual()) {\n                                        return `⚠️  - ${value}`;\n                                    }\n                                    return `${value}`;\n                                }}\n                            >\n                                {props.intervalFields.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on X-Axis</FormHelperText>\n                        </FormControl>\n                        <Box mx={5} />\n                        <FormControl required style={{ minWidth: 200 }} id={'y-values-select'}>\n                            <InputLabel className={classes.textColor}>Y Value</InputLabel>\n                            <Select\n                                renderValue={(value) => {\n                                    if (!xValAndYValIsEqual()) {\n                                        return `⚠️  - ${value}`;\n                                    }\n                                    return `${value}`;\n                                }}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        yValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"Y Values\"\n                            >\n                                {props.intervalFields.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on Y-Axis</FormHelperText>\n                        </FormControl>\n                    </Box>\n                    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'size-textfields'}>\n                        <TextField\n                            type={'number'}\n                            id=\"height-textfield\"\n                            label=\"Height\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    height: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"width-textfield\"\n                            label=\"Width\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    width: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'stroke-textfields'}>\n                        <FormControl style={{ minWidth: 200 }} id={'stroke-select'}>\n                            <InputLabel className={classes.textColor}>Mark Colour</InputLabel>\n                            <Select\n                                value={options.stroke}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        stroke: event.target.value as string,\n                                    });\n                                }}\n                                name=\"stroke\"\n                            >\n                                <option value={'red'}>red</option>\n                                <option value={'green'}>green</option>\n                                <option value={'blue'}>blue</option>\n                                <option value={'purple'}>purple</option>\n                                <option value={'orange'}>orange</option>\n                                <option value={'black'}>black</option>\n                                <option value={'yellow'}>yellow</option>\n                                <option value={'brown'}>brown</option>\n                                <option value={'pink'}>pink</option>\n                                <option value={'turquoise'}>turquoise</option>\n                            </Select>\n                        </FormControl>\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"opacity-textfield\"\n                            label=\"Opacity\"\n                            variant=\"outlined\"\n                            helperText=\"Value must be between 0 and 1\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    opacity: parseFloat(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'colour-options'}>\n                        <FormControl style={{ minWidth: 200 }} id={'colour-select'}>\n                            <InputLabel className={classes.textColor}>Mark Fill Colour</InputLabel>\n                            <Select\n                                value={options.colour}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        colour: event.target.value as string,\n                                    });\n                                }}\n                                name=\"colour\"\n                            >\n                                <option value={'red'}>red</option>\n                                <option value={'green'}>green</option>\n                                <option value={'blue'}>blue</option>\n                                <option value={'purple'}>purple</option>\n                                <option value={'orange'}>orange</option>\n                                <option value={'black'}>black</option>\n                                <option value={'yellow'}>yellow</option>\n                                <option value={'brown'}>brown</option>\n                                <option value={'pink'}>pink</option>\n                                <option value={'turquoise'}>turquoise</option>\n                            </Select>\n                        </FormControl>\n                    </Box>\n                    <Box id={'submit-button'} my={15}>\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            disabled={submitIsEnabled()}\n                            id={'options-submit-button'}\n                            onClick={validateDataOptions}\n                        >\n                            Submit\n                        </Button>\n                    </Box>\n                </Box>\n            </div>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    intervalFields: state.analysedData.intervalFields,\n});\nexport default connect(mapStateToProps, {})(MarkOptions);\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box } from '@material-ui/core';\nimport MarkSeriesVis from './MarkSeriesVis';\nimport MarkSeriesOptions from './MarkOptions';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n}));\n\nexport default function MarkSeriesPage() {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"row\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'mark-plotting-page'}\n        >\n            <Box mx={10}>\n                <MarkSeriesVis />\n            </Box>\n            <Box mx={10}>\n                <MarkSeriesOptions />\n            </Box>\n        </Box>\n    );\n}\n","import { IHeatmapSeriesOptions } from '../../../Interfaces/Visualisations/Heatmap/IHeatmapSeriesOptions';\nimport { NotificationsHandler } from '../../../UIHandling/NotificationsHandler';\nexport class HeatmapSeriesOptionsValidate {\n    private readonly options: IHeatmapSeriesOptions;\n    constructor(options: IHeatmapSeriesOptions) {\n        this.options = options;\n    }\n    public validate(): NotificationsHandler {\n        const notifications = new NotificationsHandler();\n        if (this.options.xValue === this.options.yValue) {\n            notifications.addNotification(`Cannot select the same fields for X Value and Y Value`);\n        }\n        if (!this.lengthIsValid(this.options.height)) {\n            notifications.addNotification(\n                `The minimum value for Height is 100, the maximum value for Height is 800. The current height is ${this.options.height}`\n            );\n        }\n        if (!this.lengthIsValid(this.options.width)) {\n            notifications.addNotification(\n                `The minimum value for Width is 100, the maximum value for Width is 800. The current width is ${this.options.width}`\n            );\n        }\n        if (!this.opacity(this.options.opacity)) {\n            notifications.addNotification(\n                `The minimum value for Opacity is 0, the maximum value for Opacity is 1. The current Opacity is ${this.options.opacity}`\n            );\n        }\n        return notifications;\n    }\n    private lengthIsValid(length: number): boolean {\n        return !(length > 800 || length < 100);\n    }\n    private opacity(opacity: number): boolean {\n        return !(opacity > 1 || opacity < 0);\n    }\n}\n","import { reduxStore } from '../../../../ReduxStore/reduxStore';\nimport { addHeatmapOptions, resetHeatmapOptions } from '../../../../ReduxStore/Actions/ReducerActions';\nimport { IHeatmapSeriesOptions } from '../../../../Interfaces/Visualisations/Heatmap/IHeatmapSeriesOptions';\n\nexport default class HeatmapSeriesOptions {\n    public create(options: IHeatmapSeriesOptions) {\n        reduxStore.dispatch(addHeatmapOptions(options));\n    }\n    public get(): IHeatmapSeriesOptions {\n        return reduxStore.getState().heatmapSeriesOptions;\n    }\n    public reset() {\n        reduxStore.dispatch(resetHeatmapOptions());\n    }\n}\n","import { IHeatmapSeriesVis } from '../../../Interfaces/Visualisations/Heatmap/IHeatmapSeriesVis';\nimport { DataHandler } from '../../../Util/DataHandler';\nimport HeatmapSeriesOptions from '../../ReduxStoreHandling/Plotting/Heatmap/HeatmapSeriesOptions';\n\nexport class HeatmapCreateVis {\n    private dataHandler = new DataHandler();\n\n    public createVis(): IHeatmapSeriesVis {\n        const options = new HeatmapSeriesOptions().get();\n        if (Object.keys(options).length === 0) {\n            return this.createDefaultOptions();\n        }\n\n        return {\n            colourRange: options.colourRange,\n            data: this.createDataAndColorArray(options.xValue, options.yValue),\n            height: options.height,\n            width: options.width,\n            stroke: options.stroke,\n            opacity: options.opacity,\n            fill: options.fill,\n            colour: options.colour,\n        };\n    }\n    private createDefaultOptions(): IHeatmapSeriesVis {\n        const { intervalFields } = this.dataHandler.getAnalysedData();\n        return {\n            colourRange: {\n                colour1: 'red',\n                colour2: 'green',\n            },\n            data: this.createDataAndColorArray(intervalFields[0], intervalFields[1]),\n            height: 800,\n            width: 800,\n            stroke: 'black',\n            opacity: 1,\n            fill: 'black',\n            colour: 'black',\n        };\n    }\n    private createDataAndColorArray(xValue: string, yValue: string): Array<object> {\n        const analysedData = this.dataHandler.getAnalysedData().intervalDataObjects;\n        const dataMap = this.dataHandler.createDataMapWithCount(xValue, yValue, analysedData);\n        const data: Array<object> = [];\n        dataMap.forEach((value, key) => {\n            const keyValues = Object.values(JSON.parse(key));\n            const countValue = Object.values(value);\n            data.push({ x: keyValues[0], y: keyValues[1], color: countValue[0] });\n        });\n        return data;\n    }\n}\n","import { reduxStore } from '../../../../ReduxStore/reduxStore';\nimport { addCurrentHeatmapVisual, resetCurrentHeatmapVisual } from '../../../../ReduxStore/Actions/ReducerActions';\nimport { IHeatmapSeriesVis } from '../../../../Interfaces/Visualisations/Heatmap/IHeatmapSeriesVis';\n\nexport default class CurrentHeatmapVisual {\n    public create(currentVisual: IHeatmapSeriesVis) {\n        reduxStore.dispatch(addCurrentHeatmapVisual(currentVisual));\n    }\n    public get(): IHeatmapSeriesVis {\n        return reduxStore.getState().currentHeatmapVisual;\n    }\n    public reset() {\n        reduxStore.dispatch(resetCurrentHeatmapVisual());\n    }\n}\n","import { HeatmapCreateVis } from '../../../Domain/Visualisations/HeatmapSeries/HeatmapCreateVis';\nimport CurrentHeatmapVisual from '../../../Domain/ReduxStoreHandling/Plotting/Heatmap/CurrentHeatmapVisual';\n\nexport class HeatmapVisHandler {\n    public createVisual() {\n        const createVis = new HeatmapCreateVis().createVis();\n        const currentVisual = new CurrentHeatmapVisual();\n        currentVisual.create(createVis);\n    }\n    public resetHeatmapVisual() {\n        new CurrentHeatmapVisual().reset();\n    }\n}\n","import { NotificationsHandler } from '../../NotificationsHandler';\nimport { IHeatmapSeriesOptions } from '../../../Interfaces/Visualisations/Heatmap/IHeatmapSeriesOptions';\nimport { HeatmapSeriesOptionsValidate } from '../../../Domain/Visualisations/HeatmapSeries/HeatmapSeriesOptionsValidate';\nimport { HeatmapVisHandler } from './HeatmapVisHandler';\nimport HeatmapSeriesOptions from '../../../Domain/ReduxStoreHandling/Plotting/Heatmap/HeatmapSeriesOptions';\n\nexport class HeatmapSeriesOptionsHandler {\n    private options: IHeatmapSeriesOptions;\n    private reduxHandler = new HeatmapSeriesOptions();\n    constructor(options: IHeatmapSeriesOptions) {\n        this.options = options;\n    }\n    public validateOptions(): NotificationsHandler {\n        const notifications = new NotificationsHandler();\n        const seriesOptions = new HeatmapSeriesOptionsValidate(this.options);\n        const optionsErrors = seriesOptions.validate();\n        notifications.concat(optionsErrors);\n        if (notifications.isEmpty()) {\n            this.createOptions();\n            new HeatmapVisHandler().createVisual();\n        }\n        return notifications;\n    }\n    private createOptions() {\n        this.reduxHandler.create(this.options);\n    }\n    public getOptions(): IHeatmapSeriesOptions {\n        return this.reduxHandler.get();\n    }\n    public resetOptions() {\n        this.reduxHandler.reset();\n    }\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Button, FormControl, FormHelperText, InputLabel, Select, TextField, Typography } from '@material-ui/core';\nimport { connect } from 'react-redux';\n\nimport { AlertType } from '../../../../Interfaces/Notification/INotification';\nimport { NotificationsHandler } from '../../../../UIHandling/NotificationsHandler';\nimport AlertNotification from '../../Notifications/AlertNotification';\nimport { IHeatmapSeriesOptions } from '../../../../Interfaces/Visualisations/Heatmap/IHeatmapSeriesOptions';\nimport { HeatmapSeriesOptionsHandler } from '../../../../UIHandling/Visualisations/HeatmapSeries/HeatmapSeriesOptionsHandler';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    root: {\n        // width: '100%',\n    },\n    textColor: {\n        color: theme.palette.text.primary,\n    },\n    helperTextColor: {\n        color: theme.palette.text.disabled,\n    },\n}));\nfunction HeatmapOptions(props: any) {\n    const classes = useStyles();\n    const [options, setOptions] = React.useState<{\n        xValue: string;\n        yValue: string;\n        height: number;\n        width: number;\n        colourRange: { colour1: string; colour2: string };\n        colour: string;\n        stroke: string;\n        opacity: number;\n        fill: string;\n    }>({\n        xValue: '',\n        yValue: '',\n        height: 500,\n        width: 500,\n        colourRange: { colour1: '#000000', colour2: '#00F000' },\n        colour: '#000000',\n        stroke: '#000000',\n        opacity: 1,\n        fill: '',\n    });\n    const [notifications, setNotifications] = React.useState<{\n        outcome: AlertType | undefined;\n        outcomeMessage: string;\n        errors: NotificationsHandler;\n    }>({\n        outcome: undefined,\n        outcomeMessage: '',\n        errors: new NotificationsHandler(),\n    });\n    function submitIsEnabled(): boolean {\n        return !(options.xValue.length !== 0 && options.yValue.length !== 0 && xValAndYValIsEqual());\n    }\n    function xValAndYValIsEqual(): boolean {\n        return options.xValue !== options.yValue;\n    }\n    function validateDataOptions() {\n        const optionsToValidate: IHeatmapSeriesOptions = {\n            colourRange: options.colourRange,\n            xValue: options.xValue,\n            yValue: options.yValue,\n            height: options.height,\n            width: options.width,\n            stroke: options.stroke,\n            opacity: options.opacity,\n            colour: options.colour,\n            fill: options.fill,\n        };\n        const validateOptions = new HeatmapSeriesOptionsHandler(optionsToValidate);\n        const errors: NotificationsHandler = validateOptions.validateOptions();\n        if (errors.isEmpty()) {\n            try {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Options Validated',\n                });\n            } catch (e) {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            setNotifications({\n                ...notifications,\n                errors: errors,\n            });\n        }\n    }\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'heatmap-plotting-options'}\n            mx={15}\n        >\n            <Box style={{ height: '50%', width: '50%' }} id={'alert-area'}>\n                {notifications.outcome && (\n                    <AlertNotification alert={notifications.outcome} notification={notifications.outcomeMessage} />\n                )}\n                {!notifications.errors.isEmpty() && (\n                    <AlertNotification\n                        alert={AlertType.FAILED}\n                        notification={`Error(s): ${notifications.errors.notification()}`}\n                    />\n                )}\n            </Box>\n            <div className={classes.paper}>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    className={classes.root}\n                    id={'heatmap-plotting-options'}\n                    px={20}\n                    py={20}\n                >\n                    <Typography id={'heatmap-plotting-title'}>Heatmap Series Options</Typography>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\n                        <FormControl required style={{ minWidth: 200 }} id={'x-values-select'}>\n                            <InputLabel className={classes.textColor}>X Value</InputLabel>\n                            <Select\n                                id={'select-xValue'}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        xValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"X Values\"\n                                renderValue={(value) => {\n                                    if (!xValAndYValIsEqual()) {\n                                        return `⚠️  - ${value}`;\n                                    }\n                                    return `${value}`;\n                                }}\n                            >\n                                {props.intervalFields.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on X-Axis</FormHelperText>\n                        </FormControl>\n                        <Box mx={5} />\n                        <FormControl required style={{ minWidth: 200 }} id={'y-values-select'}>\n                            <InputLabel className={classes.textColor}>Y Value</InputLabel>\n                            <Select\n                                renderValue={(value) => {\n                                    if (!xValAndYValIsEqual()) {\n                                        return `⚠️  - ${value}`;\n                                    }\n                                    return `${value}`;\n                                }}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        yValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"Y Values\"\n                            >\n                                {props.intervalFields.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on Y-Axis</FormHelperText>\n                        </FormControl>\n                    </Box>\n                    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'size-textfields'}>\n                        <TextField\n                            type={'number'}\n                            id=\"height-textfield\"\n                            label=\"Height\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    height: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"width-textfield\"\n                            label=\"Width\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    width: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'visuals-textfields'}>\n                        <FormControl style={{ minWidth: 200 }} id={'stroke-select'}>\n                            <InputLabel className={classes.textColor}>Stroke</InputLabel>\n                            <Select\n                                value={options.stroke}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        stroke: event.target.value as string,\n                                    });\n                                }}\n                                name=\"stroke\"\n                            >\n                                <option value={'red'}>red</option>\n                                <option value={'green'}>green</option>\n                                <option value={'blue'}>blue</option>\n                                <option value={'purple'}>purple</option>\n                                <option value={'orange'}>orange</option>\n                                <option value={'black'}>black</option>\n                                <option value={'yellow'}>yellow</option>\n                                <option value={'brown'}>brown</option>\n                                <option value={'pink'}>pink</option>\n                                <option value={'turquoise'}>turquoise</option>\n                            </Select>\n                        </FormControl>\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"opacity-textfield\"\n                            label=\"Opacity\"\n                            variant=\"outlined\"\n                            helperText=\"Value must be between 0 and 1\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    opacity: parseFloat(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'colour-options'}>\n                        <FormControl style={{ minWidth: 200 }} id={'colour1-select'}>\n                            <InputLabel className={classes.textColor}>Colour 1</InputLabel>\n                            <Select\n                                value={options.colourRange.colour1}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        colourRange: {\n                                            ...options.colourRange,\n                                            colour1: event.target.value as string,\n                                        },\n                                    });\n                                }}\n                                name=\"colour\"\n                            >\n                                <option value={'red'}>red</option>\n                                <option value={'green'}>green</option>\n                                <option value={'blue'}>blue</option>\n                                <option value={'purple'}>purple</option>\n                                <option value={'orange'}>orange</option>\n                                <option value={'black'}>black</option>\n                                <option value={'yellow'}>yellow</option>\n                                <option value={'brown'}>brown</option>\n                                <option value={'pink'}>pink</option>\n                                <option value={'turquoise'}>turquoise</option>\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Low frequency</FormHelperText>\n                        </FormControl>\n                        <Box mx={5} />\n                        <FormControl style={{ minWidth: 200 }} id={'colour2-select'}>\n                            <InputLabel className={classes.textColor}>Colour 2</InputLabel>\n                            <Select\n                                value={options.colourRange.colour2}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        colourRange: {\n                                            ...options.colourRange,\n                                            colour2: event.target.value as string,\n                                        },\n                                    });\n                                }}\n                                name=\"colour\"\n                            >\n                                <option value={'red'}>red</option>\n                                <option value={'green'}>green</option>\n                                <option value={'blue'}>blue</option>\n                                <option value={'purple'}>purple</option>\n                                <option value={'orange'}>orange</option>\n                                <option value={'black'}>black</option>\n                                <option value={'yellow'}>yellow</option>\n                                <option value={'brown'}>brown</option>\n                                <option value={'pink'}>pink</option>\n                                <option value={'turquoise'}>turquoise</option>\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>High frequency</FormHelperText>\n                        </FormControl>\n                        <Box mx={5} />\n                    </Box>\n                    <Box id={'submit-button'} my={15}>\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            disabled={submitIsEnabled()}\n                            id={'options-submit-button'}\n                            onClick={validateDataOptions}\n                        >\n                            Submit\n                        </Button>\n                    </Box>\n                </Box>\n            </div>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    intervalFields: state.analysedData.intervalFields,\n});\nexport default connect(mapStateToProps, {})(HeatmapOptions);\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box } from '@material-ui/core';\nimport { HeatmapSeries, HorizontalGridLines, VerticalGridLines, XAxis, XYPlot, YAxis } from 'react-vis';\nimport { connect } from 'react-redux';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    statDescription: {\n        margin: theme.spacing(1),\n        textAlign: 'left',\n        color: theme.palette.text.primary,\n    },\n}));\nfunction HeatmapVis(props: any) {\n    const classes = useStyles();\n    const options = props.currentHeatmapVisual;\n    const colourRange = () => {\n        if (options.colourRange) {\n            return [options.colourRange.colour1, options.colourRange.colour2];\n        }\n        return [];\n    };\n    return (\n        <Box\n            display=\"flex\"\n            flexWrap=\"nowrap\"\n            overflow=\"auto\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'heatmap-series'}\n            mx={15}\n        >\n            <Box>\n                <XYPlot id={'heatmap-series'} height={options.height} width={options.width} margin={{ left: 75 }}>\n                    <HorizontalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <VerticalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <XAxis\n                        //@ts-ignore\n                        style={{ text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600, margin: 5, padding: 5 } }}\n                    />\n                    <YAxis\n                        style={{ text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600, margin: 5, padding: 5 } }}\n                    />\n                    <HeatmapSeries\n                        stroke={options.stroke}\n                        opacity={options.opacity}\n                        sizeRange={[5, 15]}\n                        data={options.data}\n                        colorRange={colourRange()}\n                    />\n                </XYPlot>\n            </Box>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    currentHeatmapVisual: state.currentHeatmapVisual,\n    heatmapSeriesOptions: state.heatmapSeriesOptions,\n});\nexport default connect(mapStateToProps, {})(HeatmapVis);\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box } from '@material-ui/core';\nimport HeatmapOptions from './HeatmapOptions';\nimport HeatmapVis from './HeatmapVis';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n}));\n\nexport default function HeatmapPage() {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"row\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'heatmap-plotting-page'}\n        >\n            <Box mx={10}>\n                <HeatmapVis />\n            </Box>\n            <Box mx={10}>\n                <HeatmapOptions />\n            </Box>\n        </Box>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box } from '@material-ui/core';\nimport { AreaSeries, HorizontalGridLines, VerticalGridLines, XAxis, XYPlot, YAxis } from 'react-vis';\nimport { connect } from 'react-redux';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    statDescription: {\n        margin: theme.spacing(1),\n        textAlign: 'left',\n        color: theme.palette.text.primary,\n    },\n}));\nfunction AreaSeriesVis(props: any) {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            flexWrap=\"nowrap\"\n            overflow=\"auto\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'area-series'}\n            mx={15}\n        >\n            <Box>\n                <XYPlot\n                    id={'area-series-vis'}\n                    height={props.currentAreaVisual.height}\n                    width={props.currentAreaVisual.width}\n                    margin={{ left: 75 }}\n                >\n                    <HorizontalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <VerticalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <XAxis\n                        //@ts-ignore\n                        style={{ text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600, margin: 5, padding: 5 } }}\n                    />\n                    <YAxis\n                        // left={50}\n                        style={{ text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600, margin: 5, padding: 5 } }}\n                    />\n                    <AreaSeries\n                        stroke={props.currentAreaVisual.stroke}\n                        fill={props.currentAreaVisual.fill}\n                        opacity={props.currentAreaVisual.opacity}\n                        data={props.currentAreaVisual.data}\n                    />\n                </XYPlot>\n            </Box>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    currentAreaVisual: state.currentAreaVisual,\n});\nexport default connect(mapStateToProps, {})(AreaSeriesVis);\n","import { reduxStore } from '../../../../ReduxStore/reduxStore';\nimport { addAreaOptions, resetAreaOptions } from '../../../../ReduxStore/Actions/ReducerActions';\nimport { IAreaSeriesOptions } from '../../../../Interfaces/Visualisations/Area/IAreaSeriesOptions';\n\nexport default class AreaSeriesOptions {\n    public create(options: IAreaSeriesOptions) {\n        reduxStore.dispatch(addAreaOptions(options));\n    }\n    public get(): IAreaSeriesOptions {\n        return reduxStore.getState().areaSeriesOptions;\n    }\n    public reset() {\n        reduxStore.dispatch(resetAreaOptions());\n    }\n}\n","import { NotificationsHandler } from '../../../UIHandling/NotificationsHandler';\nimport { IAreaSeriesOptions } from '../../../Interfaces/Visualisations/Area/IAreaSeriesOptions';\n\nexport class AreaSeriesOptionsValidate {\n    private readonly options: IAreaSeriesOptions;\n    constructor(options: IAreaSeriesOptions) {\n        this.options = options;\n    }\n    public validate(): NotificationsHandler {\n        const notifications = new NotificationsHandler();\n        if (!this.lengthIsValid(this.options.height)) {\n            notifications.addNotification(\n                `The minimum value for Height is 100, the maximum value for Height is 800. The current height is ${this.options.height}`\n            );\n        }\n        if (!this.lengthIsValid(this.options.width)) {\n            notifications.addNotification(\n                `The minimum value for Width is 100, the maximum value for Width is 800. The current width is ${this.options.width}`\n            );\n        }\n        if (!this.opacityIsValid(this.options.opacity)) {\n            notifications.addNotification(\n                `The minimum value for Opacity is 0, the maximum value for Opacity is 1. The current Opacity is ${this.options.opacity}`\n            );\n        }\n        return notifications;\n    }\n    private lengthIsValid(length: number): boolean {\n        return !(length > 800 || length < 100);\n    }\n    private opacityIsValid(opacity: number): boolean {\n        return !(opacity > 1 || opacity < 0);\n    }\n}\n","import { DataHandler } from '../../../Util/DataHandler';\nimport { IAreaSeriesVis } from '../../../Interfaces/Visualisations/Area/IAreaSeriesVis';\nimport AreaSeriesOptions from '../../ReduxStoreHandling/Plotting/Area/AreaSeriesOptions';\nimport { CurveType } from '../../../Interfaces/Visualisations/Line/ILineSeriesOptions';\nexport class AreaSeriesCreateVis {\n    private dataHandler = new DataHandler();\n    public createVis(): IAreaSeriesVis {\n        const options = new AreaSeriesOptions().get();\n        if (Object.keys(options).length === 0) {\n            return this.createDefaultOptions();\n        }\n        return {\n            data: this.dataHandler.createIntegerDataArray(\n                options.xValue,\n                options.yValue,\n                this.dataHandler.getAnalysedData().intervalDataObjects\n            ),\n            height: options.height,\n            width: options.width,\n            fill: options.fill,\n            stroke: options.stroke,\n            opacity: options.opacity,\n            curveType: options.curveType,\n        };\n    }\n    private createDefaultOptions(): IAreaSeriesVis {\n        const { intervalFields } = this.dataHandler.getAnalysedData();\n        return {\n            data: this.dataHandler.createIntegerDataArray(\n                intervalFields[0],\n                intervalFields[1],\n                this.dataHandler.getAnalysedData().intervalDataObjects\n            ),\n            height: 800,\n            width: 800,\n            fill: '#000000',\n            stroke: '#000000',\n            opacity: 1,\n            curveType: CurveType.curveLinear,\n        };\n    }\n}\n","import { reduxStore } from '../../../../ReduxStore/reduxStore';\nimport { addCurrentAreaVisual, resetCurrentAreaVisual } from '../../../../ReduxStore/Actions/ReducerActions';\nimport { IAreaSeriesVis } from '../../../../Interfaces/Visualisations/Area/IAreaSeriesVis';\n\nexport default class CurrentAreaVis {\n    public create(currentVisual: IAreaSeriesVis) {\n        reduxStore.dispatch(addCurrentAreaVisual(currentVisual));\n    }\n    public get(): IAreaSeriesVis {\n        return reduxStore.getState().currentAreaVisual;\n    }\n    public reset() {\n        reduxStore.dispatch(resetCurrentAreaVisual());\n    }\n}\n","import { AreaSeriesCreateVis } from '../../../Domain/Visualisations/AreaSeries/AreaSeriesCreateVis';\nimport CurrentAreaVis from '../../../Domain/ReduxStoreHandling/Plotting/Area/CurrentAreaVis';\n\nexport class AreaSeriesVisHandler {\n    public createVisual() {\n        const createVis = new AreaSeriesCreateVis().createVis();\n        const currentVisual = new CurrentAreaVis();\n        currentVisual.create(createVis);\n    }\n    public reset() {\n        new CurrentAreaVis().reset();\n    }\n}\n","import { NotificationsHandler } from '../../NotificationsHandler';\nimport { IAreaSeriesOptions } from '../../../Interfaces/Visualisations/Area/IAreaSeriesOptions';\nimport AreaSeriesOptions from '../../../Domain/ReduxStoreHandling/Plotting/Area/AreaSeriesOptions';\nimport { AreaSeriesOptionsValidate } from '../../../Domain/Visualisations/AreaSeries/AreaSeriesOptionsValidate';\nimport { AreaSeriesVisHandler } from './AreaSeriesVisHandler';\n\nexport class AreaSeriesOptionsHandler {\n    private readonly options: IAreaSeriesOptions;\n    private areaSeriesOptions = new AreaSeriesOptions();\n    constructor(options: IAreaSeriesOptions) {\n        this.options = options;\n    }\n    public validateOptions(): NotificationsHandler {\n        const notifications = new NotificationsHandler();\n        const seriesOptions = new AreaSeriesOptionsValidate(this.options);\n        const optionsErrors = seriesOptions.validate();\n        notifications.concat(optionsErrors);\n        if (notifications.isEmpty()) {\n            this.createOptions();\n            new AreaSeriesVisHandler().createVisual();\n        }\n        return notifications;\n    }\n    private createOptions() {\n        this.areaSeriesOptions.create(this.options);\n    }\n    public getOptions(): IAreaSeriesOptions {\n        return this.areaSeriesOptions.get();\n    }\n    public resetOptions() {\n        this.areaSeriesOptions.reset();\n    }\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Button, FormControl, FormHelperText, InputLabel, Select, TextField, Typography } from '@material-ui/core';\nimport { connect } from 'react-redux';\n\nimport { AlertType } from '../../../../Interfaces/Notification/INotification';\nimport { NotificationsHandler } from '../../../../UIHandling/NotificationsHandler';\nimport AlertNotification from '../../Notifications/AlertNotification';\nimport { IAreaSeriesOptions } from '../../../../Interfaces/Visualisations/Area/IAreaSeriesOptions';\nimport { AreaSeriesOptionsHandler } from '../../../../UIHandling/Visualisations/AreaSeries/AreaSeriesOptionsHandler';\nimport { CurveType } from '../../../../Interfaces/Visualisations/Line/ILineSeriesOptions';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    root: {\n        // width: '100%',\n    },\n    textColor: {\n        color: theme.palette.text.primary,\n    },\n    helperTextColor: {\n        color: theme.palette.text.disabled,\n    },\n}));\nfunction AreaOptions(props: any) {\n    const classes = useStyles();\n    const [options, setOptions] = React.useState<{\n        xValue: string;\n        yValue: string;\n        height: number;\n        width: number;\n        stroke: string;\n        opacity: number;\n        curveType: CurveType | null;\n        fill: string;\n    }>({\n        xValue: '',\n        yValue: '',\n        height: 800,\n        width: 800,\n        stroke: '#000000',\n        opacity: 1,\n        curveType: CurveType.curveLinear,\n        fill: '#000000',\n    });\n    const [notifications, setNotifications] = React.useState<{\n        outcome: AlertType | undefined;\n        outcomeMessage: string;\n        errors: NotificationsHandler;\n    }>({\n        outcome: undefined,\n        outcomeMessage: '',\n        errors: new NotificationsHandler(),\n    });\n    function submitIsEnabled(): boolean {\n        return !(options.xValue.length !== 0 && options.yValue.length !== 0 && xValAndYValIsEqual());\n    }\n    function xValAndYValIsEqual(): boolean {\n        return options.xValue !== options.yValue;\n    }\n    function validateDataOptions() {\n        const optionsToValidate: IAreaSeriesOptions = {\n            xValue: options.xValue,\n            yValue: options.yValue,\n            height: options.height,\n            width: options.width,\n            fill: options.fill,\n            stroke: options.stroke,\n            opacity: options.opacity,\n            curveType: options.curveType,\n        };\n        const validateOptions = new AreaSeriesOptionsHandler(optionsToValidate);\n        const errors: NotificationsHandler = validateOptions.validateOptions();\n        if (errors.isEmpty()) {\n            try {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Options Validated',\n                });\n            } catch (e) {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            setNotifications({\n                ...notifications,\n                errors: errors,\n            });\n        }\n    }\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'polygon-plotting-options'}\n            mx={15}\n        >\n            <Box style={{ height: '50%', width: '50%' }} id={'alert-area'}>\n                {notifications.outcome && (\n                    <AlertNotification alert={notifications.outcome} notification={notifications.outcomeMessage} />\n                )}\n                {!notifications.errors.isEmpty() && (\n                    <AlertNotification\n                        alert={AlertType.FAILED}\n                        notification={`Error(s): ${notifications.errors.notification()}`}\n                    />\n                )}\n            </Box>\n            <div className={classes.paper}>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    className={classes.root}\n                    id={'polygon-plotting-options'}\n                    px={20}\n                    py={20}\n                >\n                    <Typography id={'area-plotting-title'}>Area Series Options</Typography>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\n                        <FormControl required style={{ minWidth: 200 }} id={'x-values-select'}>\n                            <InputLabel className={classes.textColor}>X Value</InputLabel>\n                            <Select\n                                id={'select-xValue'}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        xValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"X Values\"\n                                renderValue={(value) => {\n                                    if (!xValAndYValIsEqual()) {\n                                        return `⚠️  - ${value}`;\n                                    }\n                                    return `${value}`;\n                                }}\n                            >\n                                {props.intervalFields.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on X-Axis</FormHelperText>\n                        </FormControl>\n                        <Box mx={5} />\n                        <FormControl required style={{ minWidth: 200 }} id={'y-values-select'}>\n                            <InputLabel className={classes.textColor}>Y Value</InputLabel>\n                            <Select\n                                renderValue={(value) => {\n                                    if (!xValAndYValIsEqual()) {\n                                        return `⚠️  - ${value}`;\n                                    }\n                                    return `${value}`;\n                                }}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        yValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"Y Values\"\n                            >\n                                {props.intervalFields.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on Y-Axis</FormHelperText>\n                        </FormControl>\n                    </Box>\n                    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'size-textfields'}>\n                        <TextField\n                            type={'number'}\n                            id=\"height-textfield\"\n                            label=\"Height\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    height: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"width-textfield\"\n                            label=\"Width\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    width: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'fill-textfields'}>\n                        <FormControl style={{ minWidth: 200 }} id={'fill-select'}>\n                            <InputLabel className={classes.textColor}>Fill</InputLabel>\n                            <Select\n                                value={options.fill}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        fill: event.target.value as string,\n                                    });\n                                }}\n                                name=\"fill\"\n                            >\n                                <option value={'red'}>red</option>\n                                <option value={'green'}>green</option>\n                                <option value={'blue'}>blue</option>\n                                <option value={'purple'}>purple</option>\n                                <option value={'orange'}>orange</option>\n                                <option value={'black'}>black</option>\n                                <option value={'yellow'}>yellow</option>\n                                <option value={'brown'}>brown</option>\n                                <option value={'pink'}>pink</option>\n                                <option value={'turquoise'}>turquoise</option>\n                            </Select>\n                        </FormControl>\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"opacity-textfield\"\n                            label=\"Opacity\"\n                            variant=\"outlined\"\n                            helperText=\"Value must be between 0 and 1\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    opacity: parseFloat(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'line-textfields'}>\n                        <Box>\n                            <FormControl style={{ minWidth: 200 }} id={'curve-select'}>\n                                <InputLabel className={classes.textColor}>Curve</InputLabel>\n                                <Select\n                                    // value={options.curveType}\n                                    onChange={(event) => {\n                                        setOptions({\n                                            ...options,\n                                            curveType: event.target.value as CurveType,\n                                        });\n                                    }}\n                                    name=\"Curve Type\"\n                                >\n                                    <option value={CurveType.curveLinear}>Linear</option>\n                                    <option value={CurveType.curveLinearClosed}>Linear Closed</option>\n                                    <option value={CurveType.curveMonotoneX}>Monotone X</option>\n                                    <option value={CurveType.curveMonotoneY}>Monotone Y</option>\n                                    <option value={CurveType.curveNatural}>Natural</option>\n                                    <option value={CurveType.curveStep}>Step</option>\n                                    <option value={CurveType.curveStepAfter}>Step After</option>\n                                    <option value={CurveType.curveStepBefore}>Step Before</option>\n                                </Select>\n                                <FormHelperText className={classes.helperTextColor}>\n                                    Function used to create curve\n                                </FormHelperText>\n                            </FormControl>\n                        </Box>\n                        <Box mx={5} />\n                        <Box>\n                            <FormControl style={{ minWidth: 200 }} id={'stroke-select'}>\n                                <InputLabel className={classes.textColor}>Stroke</InputLabel>\n                                <Select\n                                    value={options.stroke}\n                                    onChange={(event) => {\n                                        setOptions({\n                                            ...options,\n                                            stroke: event.target.value as string,\n                                        });\n                                    }}\n                                    name=\"stroke\"\n                                >\n                                    <option value={'red'}>red</option>\n                                    <option value={'green'}>green</option>\n                                    <option value={'blue'}>blue</option>\n                                    <option value={'purple'}>purple</option>\n                                    <option value={'orange'}>orange</option>\n                                    <option value={'black'}>black</option>\n                                    <option value={'yellow'}>yellow</option>\n                                    <option value={'brown'}>brown</option>\n                                    <option value={'pink'}>pink</option>\n                                    <option value={'turquoise'}>turquoise</option>\n                                </Select>\n                            </FormControl>\n                        </Box>\n                    </Box>\n                    <Box id={'submit-button'} my={15}>\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            disabled={submitIsEnabled()}\n                            id={'options-submit-button'}\n                            onClick={validateDataOptions}\n                        >\n                            Submit\n                        </Button>\n                    </Box>\n                </Box>\n            </div>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    intervalFields: state.analysedData.intervalFields,\n});\nexport default connect(mapStateToProps, {})(AreaOptions);\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box } from '@material-ui/core';\nimport AreaSeriesVis from './AreaSeriesVis';\nimport AreaOptions from './AreaOptions';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n}));\n\nexport default function AreaSeriesPage() {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"row\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'polygon-plotting-page'}\n        >\n            <Box mx={10}>\n                <AreaSeriesVis />\n            </Box>\n            <Box mx={10}>\n                <AreaOptions />\n            </Box>\n        </Box>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box } from '@material-ui/core';\nimport { RadialChart } from 'react-vis';\nimport { connect } from 'react-redux';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    statDescription: {\n        margin: theme.spacing(1),\n        textAlign: 'left',\n        color: theme.palette.text.primary,\n    },\n}));\nfunction RadialSeriesVis(props: any) {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            flexWrap=\"nowrap\"\n            overflow=\"auto\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'radial-series'}\n            mx={15}\n        >\n            <Box>\n                <RadialChart\n                    height={props.currentRadialVisual.height ? props.currentRadialVisual.height : 0}\n                    width={props.currentRadialVisual.width ? props.currentRadialVisual.width : 0}\n                    data={props.currentRadialVisual.data ? props.currentRadialVisual.data : []}\n                    labelsRadiusMultiplier={1.1}\n                    labelsStyle={{\n                        fontSize: 24,\n                    }}\n                    showLabels\n                />\n            </Box>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    currentRadialVisual: state.currentRadialVisual,\n});\nexport default connect(mapStateToProps, {})(RadialSeriesVis);\n","import { reduxStore } from '../../../../ReduxStore/reduxStore';\nimport { addRadialOptions, resetRadialOptions } from '../../../../ReduxStore/Actions/ReducerActions';\nimport { IRadialSeriesOptions } from '../../../../Interfaces/Visualisations/Radial/IRadialSeriesOptions';\n\nexport default class RadialSeriesOptions {\n    public create(options: IRadialSeriesOptions) {\n        reduxStore.dispatch(addRadialOptions(options));\n    }\n    public get(): IRadialSeriesOptions {\n        return reduxStore.getState().radialSeriesOptions;\n    }\n    public reset() {\n        reduxStore.dispatch(resetRadialOptions());\n    }\n}\n","import { NotificationsHandler } from '../../../UIHandling/NotificationsHandler';\nimport { IRadialSeriesOptions } from '../../../Interfaces/Visualisations/Radial/IRadialSeriesOptions';\n\nexport class RadialSeriesOptionsValidate {\n    private readonly options: IRadialSeriesOptions;\n    constructor(radialSeriesOptions: IRadialSeriesOptions) {\n        this.options = radialSeriesOptions;\n    }\n    public validate(): NotificationsHandler {\n        const notifications = new NotificationsHandler();\n        if (!this.lengthIsValid(this.options.height)) {\n            notifications.addNotification(\n                `The minimum value for Height is 100, the maximum value for Height is 800. The current height is ${this.options.height}`\n            );\n        }\n        if (!this.lengthIsValid(this.options.width)) {\n            notifications.addNotification(\n                `The minimum value for Width is 100, the maximum value for Width is 800. The current width is ${this.options.width}`\n            );\n        }\n        return notifications;\n    }\n    private lengthIsValid(length: number): boolean {\n        return !(length > 800 || length < 100);\n    }\n}\n","import { DataHandler } from '../../../Util/DataHandler';\nimport { IRadialSeriesVis } from '../../../Interfaces/Visualisations/Radial/IRadialSeriesVis';\nimport RadialSeriesOptions from '../../ReduxStoreHandling/Plotting/Radial/RadialSeriesOptions';\nimport GetAnalysedData from '../../ReduxStoreHandling/AnalysedData/GetAnalysedData';\nimport { FieldTypes } from '../../../Interfaces/Analyse/IAnalysedFileData';\n\nexport class RadialSeriesCreateVis {\n    private dataHandler = new DataHandler();\n    public createVis(): IRadialSeriesVis {\n        const options = new RadialSeriesOptions().get();\n        if (Object.keys(options).length === 0) {\n            return this.createDefaultOptions();\n        }\n\n        const fieldType = this.dataHandler.checkDataType(options.column, new GetAnalysedData().get().fields);\n        return {\n            data: this.getDataObjectsForField(options.column, fieldType),\n            height: options.height,\n            width: options.width,\n        };\n    }\n    private getDataObjectsForField(field: string, fieldType: FieldTypes): Array<object> {\n        if (fieldType === FieldTypes.BINARY) {\n            const dataObjects = new GetAnalysedData().get().binaryDataObjects;\n            return this.dataHandler.createAngleObjectFromColumnPercent(field, dataObjects);\n        }\n        if (fieldType === FieldTypes.ORDINAL) {\n            const dataObjects = new GetAnalysedData().get().ordinalDataObjects;\n            return this.dataHandler.createAngleObjectFromColumnPercent(field, dataObjects);\n        }\n        if (fieldType === FieldTypes.NOMINAL) {\n            const dataObjects = new GetAnalysedData().get().nominalDataObjects;\n            return this.dataHandler.createAngleObjectFromColumnPercent(field, dataObjects);\n        }\n        return [];\n    }\n    public createDefaultOptions(): IRadialSeriesVis {\n        return {\n            data: [],\n            height: 0,\n            width: 0,\n        };\n    }\n}\n","import { reduxStore } from '../../../../ReduxStore/reduxStore';\nimport { addCurrentRadialVisual, resetCurrentRadialVisual } from '../../../../ReduxStore/Actions/ReducerActions';\nimport { IRadialSeriesVis } from '../../../../Interfaces/Visualisations/Radial/IRadialSeriesVis';\n\nexport default class CurrentRadialVisual {\n    public create(currentVisual: IRadialSeriesVis) {\n        reduxStore.dispatch(addCurrentRadialVisual(currentVisual));\n    }\n    public get(): IRadialSeriesVis {\n        return reduxStore.getState().currentRadialVisual;\n    }\n    public reset() {\n        reduxStore.dispatch(resetCurrentRadialVisual());\n    }\n}\n","import { RadialSeriesCreateVis } from '../../../Domain/Visualisations/RadialSeries/RadialSeriesCreateVis';\nimport CurrentRadialVisual from '../../../Domain/ReduxStoreHandling/Plotting/Radial/CurrentRadialVisual';\n\nexport class RadialSeriesVisHandler {\n    public createVisual() {\n        const createVis = new RadialSeriesCreateVis().createVis();\n        const currentVisual = new CurrentRadialVisual();\n        currentVisual.create(createVis);\n    }\n    public createDefaultVisual() {\n        const createVis = new RadialSeriesCreateVis().createDefaultOptions();\n        new CurrentRadialVisual().create(createVis);\n    }\n    public reset() {\n        new CurrentRadialVisual().reset();\n    }\n}\n","import { NotificationsHandler } from '../../NotificationsHandler';\nimport { IRadialSeriesOptions } from '../../../Interfaces/Visualisations/Radial/IRadialSeriesOptions';\nimport RadialSeriesOptions from '../../../Domain/ReduxStoreHandling/Plotting/Radial/RadialSeriesOptions';\nimport { RadialSeriesOptionsValidate } from '../../../Domain/Visualisations/RadialSeries/RadialSeriesOptionsValidate';\nimport { RadialSeriesVisHandler } from './RadialSeriesVisHandler';\n\nexport class RadialSeriesOptionsHandler {\n    private readonly options: IRadialSeriesOptions;\n    private radialSeriesOptions = new RadialSeriesOptions();\n    constructor(options: IRadialSeriesOptions) {\n        this.options = options;\n    }\n    public validateOptions(): NotificationsHandler {\n        const notifications = new NotificationsHandler();\n        const seriesOptions = new RadialSeriesOptionsValidate(this.options);\n        const optionsErrors = seriesOptions.validate();\n        notifications.concat(optionsErrors);\n        if (notifications.isEmpty()) {\n            this.createOptions();\n            new RadialSeriesVisHandler().createVisual();\n        }\n        return notifications;\n    }\n    private createOptions() {\n        this.radialSeriesOptions.create(this.options);\n    }\n    public getOptions(): IRadialSeriesOptions {\n        return this.radialSeriesOptions.get();\n    }\n    public resetOptions() {\n        this.radialSeriesOptions.reset();\n    }\n}\n","import React from 'react';\nimport { IRadialSeriesOptions } from '../../../../Interfaces/Visualisations/Radial/IRadialSeriesOptions';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Button, FormControl, FormHelperText, InputLabel, Select, TextField, Typography } from '@material-ui/core';\nimport { connect } from 'react-redux';\n\nimport { AlertType } from '../../../../Interfaces/Notification/INotification';\nimport { NotificationsHandler } from '../../../../UIHandling/NotificationsHandler';\nimport AlertNotification from '../../Notifications/AlertNotification';\nimport { RadialSeriesOptionsHandler } from '../../../../UIHandling/Visualisations/Radial/RadialSeriesOptionsHandler';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    root: {\n        // width: '100%',\n    },\n    textColor: {\n        color: theme.palette.text.primary,\n    },\n    helperTextColor: {\n        color: theme.palette.text.disabled,\n    },\n}));\nfunction RadialOptions(props: any) {\n    const classes = useStyles();\n    const [options, setOptions] = React.useState<{\n        column: string;\n        height: number;\n        width: number;\n    }>({\n        column: '',\n        height: 800,\n        width: 800,\n    });\n    const [notifications, setNotifications] = React.useState<{\n        outcome: AlertType | undefined;\n        outcomeMessage: string;\n        errors: NotificationsHandler;\n    }>({\n        outcome: undefined,\n        outcomeMessage: '',\n        errors: new NotificationsHandler(),\n    });\n    const allValues = [...props.nominalFields, ...props.ordinalFields, ...props.binaryFields];\n    function submitIsEnabled(): boolean {\n        return !(options.column.length !== 0);\n    }\n    function validateDataOptions() {\n        const optionsToValidate: IRadialSeriesOptions = {\n            column: options.column,\n            height: options.height,\n            width: options.width,\n        };\n        const validateOptions = new RadialSeriesOptionsHandler(optionsToValidate);\n        const errors: NotificationsHandler = validateOptions.validateOptions();\n        if (errors.isEmpty()) {\n            try {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Options Validated',\n                });\n            } catch (e) {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            setNotifications({\n                ...notifications,\n                errors: errors,\n            });\n        }\n    }\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'radial-plotting-options'}\n            mx={15}\n        >\n            <Box style={{ height: '50%', width: '50%' }} id={'alert-area'}>\n                {notifications.outcome && (\n                    <AlertNotification alert={notifications.outcome} notification={notifications.outcomeMessage} />\n                )}\n                {!notifications.errors.isEmpty() && (\n                    <AlertNotification\n                        alert={AlertType.FAILED}\n                        notification={`Error(s): ${notifications.errors.notification()}`}\n                    />\n                )}\n            </Box>\n            <div className={classes.paper}>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    className={classes.root}\n                    id={'radial-plotting-options'}\n                    px={20}\n                    py={20}\n                >\n                    <Typography id={'radial-plotting-title'}>Radial Series Options</Typography>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\n                        <FormControl required style={{ minWidth: 200 }} id={'column-value-select'}>\n                            <InputLabel className={classes.textColor}>Column</InputLabel>\n                            <Select\n                                id={'select-column'}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        column: event.target.value as string,\n                                    });\n                                }}\n                                name=\"Column Select\"\n                            >\n                                {allValues.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Slice Categories</FormHelperText>\n                        </FormControl>\n                    </Box>\n                    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'size-textfields'}>\n                        <TextField\n                            type={'number'}\n                            id=\"height-textfield\"\n                            label=\"Height\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    height: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"width-textfield\"\n                            label=\"Width\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    width: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n\n                    <Box id={'submit-button'} my={15}>\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            disabled={submitIsEnabled()}\n                            id={'options-submit-button'}\n                            onClick={validateDataOptions}\n                        >\n                            Submit\n                        </Button>\n                    </Box>\n                </Box>\n            </div>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    nominalFields: state.analysedData.nominalFields,\n    ordinalFields: state.analysedData.ordinalFields,\n    binaryFields: state.analysedData.binaryFields,\n});\nexport default connect(mapStateToProps, {})(RadialOptions);\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box } from '@material-ui/core';\nimport RadialSeriesVis from './RadialSeriesVis';\nimport RadialOptions from './RadialOptions';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n}));\n\nexport default function RadialSeriesPage() {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"row\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'radial-plotting-page'}\n        >\n            <Box mx={10}>\n                <RadialSeriesVis />\n            </Box>\n            <Box mx={10}>\n                <RadialOptions />\n            </Box>\n        </Box>\n    );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { AppBar, Tabs, Tab, Box, Typography } from '@material-ui/core';\n\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\nimport BarChartIcon from '@material-ui/icons/BarChart';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport GraphicEqIcon from '@material-ui/icons/GraphicEq';\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\nimport StreetviewIcon from '@material-ui/icons/Streetview';\n\nimport LineSeriesPage from './Line/LineSeriesPage';\nimport BarSeriesPage from './Bar/BarSeriesPage';\nimport MarkSeriesPage from './Mark/MarkSeriesPage';\nimport HeatmapPage from './Heatmap/HeatmapPage';\nimport AreaSeriesPage from './Area/AreaSeriesPage';\nimport RadialSeriesPage from './Radial/RadialSeriesPage';\n\n//Switches tabs\nfunction TabPanel(props: any) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`scrollable-force-tabpanel-${index}`}\n            aria-labelledby={`scrollable-force-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index: number) {\n    return {\n        id: `scrollable-force-tab-${index}`,\n        'aria-controls': `scrollable-force-tabpanel-${index}`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    stickToBottom: {\n        width: '100%',\n        position: 'fixed',\n        bottom: 0,\n        justifyContent: 'center',\n    },\n    tab: {\n        color: theme.palette.text.primary,\n        opacity: 1,\n    },\n}));\n\nexport default function VisualiseNav() {\n    const classes = useStyles();\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event: any, newValue: any) => {\n        setValue(newValue);\n    };\n\n    return (\n        <div className={classes.root} id={'plotting-tab-panel'}>\n            <TabPanel value={value} index={0}>\n                <LineSeriesPage />\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n                <BarSeriesPage />\n            </TabPanel>\n            <TabPanel value={value} index={2}>\n                <MarkSeriesPage />\n            </TabPanel>\n            <TabPanel value={value} index={3}>\n                <AreaSeriesPage />\n            </TabPanel>\n            <TabPanel value={value} index={4}>\n                <RadialSeriesPage />\n            </TabPanel>\n            <TabPanel value={value} index={5}>\n                <HeatmapPage />\n            </TabPanel>\n\n            <AppBar position=\"static\" color=\"default\" style={{ position: 'fixed' }}>\n                <Tabs\n                    id={'plotting-tabs'}\n                    value={value}\n                    onChange={handleChange}\n                    scrollButtons=\"on\"\n                    indicatorColor=\"primary\"\n                    aria-label=\"scrollable force tabs example\"\n                    className={classes.stickToBottom}\n                    centered\n                >\n                    <Tab\n                        label=\"Line\"\n                        icon={<ShowChartIcon />}\n                        {...a11yProps(0)}\n                        id={'line-tab'}\n                        className={classes.tab}\n                    />\n                    <Tab label=\"Bar\" icon={<BarChartIcon />} {...a11yProps(1)} id={'bar-tab'} className={classes.tab} />\n                    <Tab\n                        label=\"Mark\"\n                        icon={<FiberManualRecordIcon />}\n                        {...a11yProps(2)}\n                        id={'mark-tab'}\n                        className={classes.tab}\n                    />\n                    <Tab\n                        label=\"Area\"\n                        icon={<GraphicEqIcon />}\n                        {...a11yProps(3)}\n                        id={'area-tab'}\n                        className={classes.tab}\n                    />\n                    <Tab\n                        label=\"Radial\"\n                        icon={<DonutLargeIcon />}\n                        {...a11yProps(4)}\n                        id={'radial-tab'}\n                        className={classes.tab}\n                    />\n                    <Tab\n                        label=\"Heatmap\"\n                        icon={<StreetviewIcon />}\n                        {...a11yProps(5)}\n                        id={'heatmap-tab'}\n                        className={classes.tab}\n                    />\n                </Tabs>\n            </AppBar>\n        </div>\n    );\n}\n","import React from 'react';\n\nimport VisualiseNav from './VisualiseNav';\nimport { Box } from '@material-ui/core';\n\nexport default function Visualisations() {\n    return (\n        <Box>\n            <VisualiseNav />\n        </Box>\n    );\n}\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Tab, Tabs, AppBar } from '@material-ui/core';\nimport { connect } from 'react-redux';\n\nimport Home from '../Home/Home';\nimport ViewImportedData from '../ViewImportedData/ViewImportedData';\nimport TabPanel from './TabPanel';\nimport ViewAnalysedData from '../ViewAnalysedData/ViewAnalysedData';\nimport Visualisations from '../Visualisation/Visualisations';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    hide: {\n        display: 'none',\n    },\n    tabIndicator: {\n        backgroundColor: theme.palette.text.secondary,\n    },\n    tabText: {\n        textColor: theme.palette.text.secondary,\n    },\n    tab: {\n        '&:disabled': {\n            color: theme.palette.text.disabled,\n            opacity: 1,\n        },\n    },\n}));\n\nfunction a11yProps(index: number) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nfunction UserNavigation(props: any) {\n    const classes = useStyles();\n    const [tab, setTab] = useState(0);\n    const handleTabChange = (e: any, newValue: number) => {\n        setTab(newValue);\n    };\n    function tabIsDisabled(): boolean {\n        return (\n            props.intervalFields.length === 0 &&\n            props.nominalFields.length === 0 &&\n            props.ordinalFields.length === 0 &&\n            props.ignoreFields.length === 0 &&\n            props.binaryFields.length === 0\n        );\n    }\n    function importTabIsDisabled(): boolean {\n        return props.dataFields.length === 0;\n    }\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Tabs\n                    value={tab}\n                    onChange={handleTabChange}\n                    orientation={'horizontal'}\n                    classes={{\n                        indicator: classes.tabIndicator,\n                    }}\n                    id=\"menu-tabs\"\n                >\n                    <Tab label={'Home'} {...a11yProps(0)} />\n                    <Tab\n                        label={'Imported Data'}\n                        disabled={importTabIsDisabled()}\n                        className={classes.tab}\n                        {...a11yProps(1)}\n                    />\n                    <Tab label={'Analysed Data'} disabled={tabIsDisabled()} className={classes.tab} {...a11yProps(2)} />\n                    <Tab label={'Plotting'} disabled={tabIsDisabled()} className={classes.tab} {...a11yProps(3)} />\n                </Tabs>\n            </AppBar>\n\n            <TabPanel value={tab} index={0}>\n                <Home />\n            </TabPanel>\n            <TabPanel value={tab} index={1}>\n                <ViewImportedData />\n            </TabPanel>\n            <TabPanel value={tab} index={2}>\n                <ViewAnalysedData />\n            </TabPanel>\n            <TabPanel value={tab} index={3}>\n                <Visualisations />\n            </TabPanel>\n        </div>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    dataFields: state.importedData.dataFields,\n    intervalFields: state.analysedData.intervalFields,\n    nominalFields: state.analysedData.nominalFields,\n    ordinalFields: state.analysedData.ordinalFields,\n    binaryFields: state.analysedData.binaryFields,\n    ignoreFields: state.analysedData.ignoreFields,\n});\nexport default connect(mapStateToProps, {})(UserNavigation);\n","import React from 'react';\n\nimport UserNavigation from './UI/LoggedIn/Navigation/UserNavigation';\nimport './App.css';\n\nexport default function App() {\n    return (\n        <div>\n            <UserNavigation />\n        </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport App from './App';\nimport { reduxStore } from './ReduxStore/reduxStore';\n\nconst theme = createMuiTheme({\n    palette: {\n        text: {\n            primary: '#000000',\n            secondary: '#FFFFFF',\n            disabled: '#808080',\n        },\n        primary: {\n            // light: will be calculated from palette.primary.main,\n            main: '#673ab7',\n            // dark: will be calculated from palette.primary.main,\n            // contrastText: will be calculated to contrast with palette.primary.main\n        },\n        secondary: {\n            main: '#ffeb3b',\n        },\n        contrastThreshold: 3,\n        tonalOffset: 0.2,\n    },\n    spacing: 2,\n});\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={reduxStore}>\n            <MuiThemeProvider theme={theme} key=\"app\">\n                <React.StrictMode>\n                    <BrowserRouter>\n                        <App />\n                    </BrowserRouter>\n                </React.StrictMode>\n            </MuiThemeProvider>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}