[{"/Users/aatikaseedat/Documents/data-visualiser/src/index.js":"1","/Users/aatikaseedat/Documents/data-visualiser/src/App.js":"2","/Users/aatikaseedat/Documents/data-visualiser/src/serviceWorker.js":"3","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/store.js":"4","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Reducers/ReduxReducer.js":"5","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Navigation/UserNavigation.tsx":"6","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/ReduxState.js":"7","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Actions/ReducerActionTypes.js":"8","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Navigation/TabPanel.js":"9","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Settings/Settings.js":"10","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Home/Home.js":"11","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Export/Export.js":"12","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/PlottingPage.tsx":"13","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/PlottingNav.tsx":"14","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Import/ImportedFileStats.tsx":"15","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Notifications/AlertNotification.tsx":"16","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/ImportFilesHandler.tsx":"17","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/NotificationsHandler.tsx":"18","/Users/aatikaseedat/Documents/data-visualiser/src/interfaces/INotification.tsx":"19","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LinePlottingPage.tsx":"20","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ImportedFile/ImportFileData.tsx":"21","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/ResetImportedData.tsx":"22","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/ResetAnalysedData.tsx":"23","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ImportedFile/AnalyseFileData.tsx":"24","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LinePlottingOptions.tsx":"25","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Actions/ReducerActions.tsx":"26","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/CreateAnalysedData.tsx":"27","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/GetImportedData.tsx":"28","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/LinePlotOptionsHandler.tsx":"29","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/CreateImportedData.tsx":"30","/Users/aatikaseedat/Documents/data-visualiser/src/interfaces/plotting/ILinePlotOptions.tsx":"31","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ImportedFile/FileProcessors/CSVProcessor.tsx":"32","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/LinePlotOptions/ResetLinePlotOptions.tsx":"33","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/LinePlotOptions/CreateLinePlotOptions.tsx":"34","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/LinePlotOptions/GetLinePlotOptions.tsx":"35","/Users/aatikaseedat/Documents/data-visualiser/src/domain/LineSeriesVis/LineSeriesOptionsValidate.tsx":"36","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/ImportFilesComponent.tsx":"37","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Analyse/FileAnalysisComponent.tsx":"38","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/LineSeriesVisHandler.tsx":"39","/Users/aatikaseedat/Documents/data-visualiser/src/domain/LineSeriesVis/LineSeriesCreateVis.tsx":"40","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/GetAnalysedData.tsx":"41","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/CurrentVisualisation/ResetCurrentVisualisation.tsx":"42","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/CurrentVisualisation/CreateCurrentVisualisation.tsx":"43","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LineSeriesVis.tsx":"44","/Users/aatikaseedat/Documents/data-visualiser/src/interfaces/plotting/ILinePlotCreateVis.tsx":"45"},{"size":1620,"mtime":1609579694144,"results":"46","hashOfConfig":"47"},{"size":233,"mtime":1609946572554,"results":"48","hashOfConfig":"47"},{"size":5854,"mtime":1608309343000,"results":"49","hashOfConfig":"47"},{"size":215,"mtime":1608735235191,"results":"50","hashOfConfig":"47"},{"size":2724,"mtime":1610638113370,"results":"51","hashOfConfig":"47"},{"size":2803,"mtime":1609580084041,"results":"52","hashOfConfig":"47"},{"size":296,"mtime":1610637978367,"results":"53","hashOfConfig":"47"},{"size":750,"mtime":1610637814328,"results":"54","hashOfConfig":"47"},{"size":601,"mtime":1608732474371,"results":"55","hashOfConfig":"47"},{"size":966,"mtime":1608732749916,"results":"56","hashOfConfig":"47"},{"size":614,"mtime":1610558733032,"results":"57","hashOfConfig":"47"},{"size":962,"mtime":1608732474397,"results":"58","hashOfConfig":"47"},{"size":550,"mtime":1609327048703,"results":"59","hashOfConfig":"47"},{"size":5075,"mtime":1609748221737,"results":"60","hashOfConfig":"47"},{"size":2272,"mtime":1609946362973,"results":"61","hashOfConfig":"47"},{"size":1098,"mtime":1610974415290,"results":"62","hashOfConfig":"47"},{"size":1687,"mtime":1610366515337,"results":"63","hashOfConfig":"47"},{"size":607,"mtime":1610266600513,"results":"64","hashOfConfig":"47"},{"size":168,"mtime":1610968410686,"results":"65","hashOfConfig":"47"},{"size":949,"mtime":1610787931801,"results":"66","hashOfConfig":"47"},{"size":2487,"mtime":1610266600603,"results":"67","hashOfConfig":"47"},{"size":264,"mtime":1608733523669,"results":"68","hashOfConfig":"47"},{"size":258,"mtime":1608733523665,"results":"69","hashOfConfig":"47"},{"size":3806,"mtime":1610557000243,"results":"70","hashOfConfig":"47"},{"size":16801,"mtime":1610971315758,"results":"71","hashOfConfig":"47"},{"size":1793,"mtime":1610637805106,"results":"72","hashOfConfig":"47"},{"size":749,"mtime":1608733523683,"results":"73","hashOfConfig":"47"},{"size":799,"mtime":1609946360577,"results":"74","hashOfConfig":"47"},{"size":1725,"mtime":1610640470313,"results":"75","hashOfConfig":"47"},{"size":769,"mtime":1609946360428,"results":"76","hashOfConfig":"47"},{"size":1068,"mtime":1610872073190,"results":"77","hashOfConfig":"47"},{"size":1805,"mtime":1610266600528,"results":"78","hashOfConfig":"47"},{"size":263,"mtime":1610027177763,"results":"79","hashOfConfig":"47"},{"size":498,"mtime":1610027217593,"results":"80","hashOfConfig":"47"},{"size":285,"mtime":1610027556180,"results":"81","hashOfConfig":"47"},{"size":2057,"mtime":1610872073188,"results":"82","hashOfConfig":"47"},{"size":7763,"mtime":1610974288494,"results":"83","hashOfConfig":"47"},{"size":5320,"mtime":1610783169416,"results":"84","hashOfConfig":"47"},{"size":703,"mtime":1610640470189,"results":"85","hashOfConfig":"47"},{"size":2524,"mtime":1610875899188,"results":"86","hashOfConfig":"47"},{"size":649,"mtime":1609946360456,"results":"87","hashOfConfig":"47"},{"size":276,"mtime":1610638778765,"results":"88","hashOfConfig":"47"},{"size":522,"mtime":1610638594826,"results":"89","hashOfConfig":"47"},{"size":3269,"mtime":1610875809441,"results":"90","hashOfConfig":"47"},{"size":317,"mtime":1610874793490,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"1llt5h",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"94"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"105"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"105"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"105"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"105"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"105"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/aatikaseedat/Documents/data-visualiser/src/index.js",[],["190","191"],"/Users/aatikaseedat/Documents/data-visualiser/src/App.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/serviceWorker.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/store.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Reducers/ReduxReducer.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Navigation/UserNavigation.tsx",[],["192","193"],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/ReduxState.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Actions/ReducerActionTypes.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Navigation/TabPanel.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Settings/Settings.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Home/Home.js",["194"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core';\n\nimport ImportFilesComponent from '../ImportFileHandling/ImportFilesComponent';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    alignItemsAndJustifyContent: {\n        width: '100%',\n        height: '100%',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: 'pink',\n    },\n}));\n\nexport default function Home() {\n    return (\n        <main id={'home-page'}>\n            <ImportFilesComponent />\n        </main>\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Export/Export.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/PlottingPage.tsx",["195"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport PlottingNav from './PlottingNav';\nimport { Box } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        '& > *': {\n            margin: theme.spacing(1),\n            width: theme.spacing(16),\n            height: theme.spacing(16),\n        },\n    },\n}));\n\nexport default function PlottingPage() {\n    return (\n        <Box>\n            <PlottingNav />\n        </Box>\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/PlottingNav.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Import/ImportedFileStats.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Notifications/AlertNotification.tsx",["196","197"],"/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/ImportFilesHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/NotificationsHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/interfaces/INotification.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LinePlottingPage.tsx",["198","199","200","201","202","203","204"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Grid } from '@material-ui/core';\nimport { LineSeries, XYPlot, VerticalGridLines, HorizontalGridLines, XAxis, YAxis } from 'react-vis';\nimport LineSeriesVis from './LineSeriesVis';\nimport LinePlottingOptions from './LinePlottingOptions';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n}));\n\nexport default function LinePlottingPage() {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"row\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'line-plotting-page'}\n        >\n            <Box mx={10}>\n                <LineSeriesVis />\n            </Box>\n            <Box mx={10}>\n                <LinePlottingOptions />\n            </Box>\n        </Box>\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ImportedFile/ImportFileData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/ResetImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/ResetAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ImportedFile/AnalyseFileData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LinePlottingOptions.tsx",["205","206"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ColorPicker } from 'material-ui-color';\nimport {\n    Box,\n    Button,\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    Paper,\n    Select,\n    TextField,\n    Typography,\n} from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { CurveType, ILinePlotOptions, LineStyle } from '../../../../interfaces/plotting/ILinePlotOptions';\n\nimport { AlertType } from '../../../../interfaces/INotification';\nimport { NotificationsHandler } from '../../../../UIHandling/NotificationsHandler';\nimport AlertNotification from '../../Notifications/AlertNotification';\nimport { LinePlotOptionsHandler } from '../../../../UIHandling/LinePlotOptionsHandler';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    root: {\n        // width: '100%',\n    },\n    textColor: {\n        color: theme.palette.text.primary,\n    },\n    helperTextColor: {\n        color: theme.palette.text.disabled,\n    },\n}));\nfunction LinePlottingOptions(props: any) {\n    const classes = useStyles();\n    const [options, setOptions] = React.useState<{\n        xValue: string;\n        yValue: string;\n        height: number;\n        width: number;\n        colour: string;\n        opacity: number;\n        curveType: CurveType | null;\n        lineStyle: LineStyle | undefined;\n        lineWidth: number;\n    }>({\n        xValue: '',\n        yValue: '',\n        height: 400,\n        width: 400,\n        colour: '#000000',\n        opacity: 1,\n        curveType: null,\n        lineStyle: undefined,\n        lineWidth: 2,\n    });\n    const [notifications, setNotifications] = React.useState<{\n        outcome: AlertType | undefined;\n        outcomeMessage: string;\n        errors: NotificationsHandler;\n    }>({\n        outcome: undefined,\n        outcomeMessage: '',\n        errors: new NotificationsHandler(),\n    });\n    function submitIsEnabled(): boolean {\n        return !(options.xValue.length !== 0 && options.yValue.length !== 0 && xValAndYValIsEqual());\n    }\n    function xValAndYValIsEqual(): boolean {\n        return options.xValue !== options.yValue;\n    }\n    function validateDataOptions() {\n        const optionsToValidate: ILinePlotOptions = {\n            xValue: options.xValue,\n            yValue: options.yValue,\n            height: options.height,\n            width: options.width,\n            colour: options.colour,\n            opacity: options.opacity,\n            curveType: options.curveType,\n            lineStyle: options.lineStyle,\n            lineWidth: options.lineWidth,\n        };\n        const validateOptions = new LinePlotOptionsHandler(optionsToValidate);\n        const errors: NotificationsHandler = validateOptions.validateOptions();\n        if (errors.isEmpty()) {\n            try {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Options Validated',\n                });\n            } catch (e) {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            setNotifications({\n                ...notifications,\n                errors: errors,\n            });\n        }\n    }\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'line-plotting-options'}\n            mx={15}\n        >\n            <Box style={{ height: '50%', width: '50%' }} id={'alert-area'}>\n                {notifications.outcome && (\n                    <AlertNotification alert={notifications.outcome} notification={notifications.outcomeMessage} />\n                )}\n                {!notifications.errors.isEmpty() && (\n                    <AlertNotification\n                        alert={AlertType.FAILED}\n                        notification={`Error(s): ${notifications.errors.notification()}`}\n                    />\n                )}\n            </Box>\n            <div className={classes.paper}>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    className={classes.root}\n                    id={'line-plotting-options'}\n                    px={20}\n                    py={20}\n                >\n                    <Typography id={'line-plotting-title'}>Line Series Plotting Options</Typography>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\n                        <FormControl required style={{ minWidth: 200 }} id={'x-values-select'}>\n                            <InputLabel className={classes.textColor}>X Value</InputLabel>\n                            <Select\n                                id={'select-xValue'}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        xValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"X Values\"\n                                renderValue={(value) => {\n                                    if (!xValAndYValIsEqual()) {\n                                        return `⚠️  - ${value}`;\n                                    }\n                                    return `${value}`;\n                                }}\n                            >\n                                {props.integerFields.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on X-Axis</FormHelperText>\n                        </FormControl>\n                        <Box mx={5} />\n                        <FormControl required style={{ minWidth: 200 }} id={'y-values-select'}>\n                            <InputLabel className={classes.textColor}>Y Value</InputLabel>\n                            <Select\n                                renderValue={(value) => {\n                                    if (!xValAndYValIsEqual()) {\n                                        return `⚠️  - ${value}`;\n                                    }\n                                    return `${value}`;\n                                }}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        yValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"Y Values\"\n                            >\n                                {props.integerFields.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on Y-Axis</FormHelperText>\n                        </FormControl>\n                    </Box>\n                    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'size-textfields'}>\n                        <TextField\n                            type={'number'}\n                            id=\"height-textfield\"\n                            label=\"Height\"\n                            variant=\"outlined\"\n                            helperText=\"Default 400\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    height: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"width-textfield\"\n                            label=\"Width\"\n                            variant=\"outlined\"\n                            helperText=\"Default 400\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    width: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'colour-textfields'}>\n                        <FormControl style={{ minWidth: 200 }} id={'colour-select'}>\n                            <InputLabel className={classes.textColor}>Colour</InputLabel>\n                            <Select\n                                value={options.lineStyle}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        colour: event.target.value as string,\n                                    });\n                                }}\n                                name=\"colour\"\n                            >\n                                <option value={'red'}>red</option>\n                                <option value={'green'}>green</option>\n                                <option value={'blue'}>blue</option>\n                                <option value={'purple'}>purple</option>\n                                <option value={'orange'}>orange</option>\n                                <option value={'black'}>black</option>\n                                <option value={'yellow'}>yellow</option>\n                                <option value={'brown'}>brown</option>\n                                <option value={'pink'}>pink</option>\n                                <option value={'turquoise'}>turquoise</option>\n                            </Select>\n                        </FormControl>\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"opacity-textfield\"\n                            label=\"Opacity\"\n                            variant=\"outlined\"\n                            helperText=\"Value must be between 0 and 1\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    opacity: parseFloat(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box>\n                        <FormControl style={{ minWidth: 400 }} id={'curve-select'}>\n                            <InputLabel className={classes.textColor}>Curve</InputLabel>\n                            <Select\n                                // value={options.curveType}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        curveType: event.target.value as CurveType,\n                                    });\n                                    console.log(options.curveType);\n                                }}\n                                name=\"Y Values\"\n                            >\n                                <option value={CurveType.curveLinear}>Linear</option>\n                                <option value={CurveType.curveLinearClosed}>Linear Closed</option>\n                                <option value={CurveType.curveMonotoneX}>Monotone X</option>\n                                <option value={CurveType.curveMonotoneY}>Monotone Y</option>\n                                <option value={CurveType.curveNatural}>Natural</option>\n                                <option value={CurveType.curveStep}>Step</option>\n                                <option value={CurveType.curveStepAfter}>Step After</option>\n                                <option value={CurveType.curveStepBefore}>Step Before</option>\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>\n                                Function used to create curve\n                            </FormHelperText>\n                        </FormControl>\n                    </Box>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'line-options'}>\n                        <FormControl style={{ minWidth: 200 }} id={'line-style-select'}>\n                            <InputLabel className={classes.textColor}>Line Style</InputLabel>\n                            <Select\n                                value={options.lineStyle}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        lineStyle: event.target.value as LineStyle,\n                                    });\n                                }}\n                                name=\"Y Values\"\n                            >\n                                <option value={LineStyle.SOLID}>Solid</option>\n                                <option value={LineStyle.DASHED}>Dashed</option>\n                            </Select>\n                        </FormControl>\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"line-width-textfield\"\n                            label=\"Line Width\"\n                            variant=\"outlined\"\n                            helperText=\"Default: 2px\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    lineWidth: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box id={'submit-button'}>\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            disabled={submitIsEnabled()}\n                            id={'options-submit-button'}\n                            onClick={validateDataOptions}\n                        >\n                            Submit\n                        </Button>\n                    </Box>\n                </Box>\n            </div>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    integerFields: state.analysedData.integerFields,\n});\nexport default connect(mapStateToProps, {})(LinePlottingOptions);\n","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Actions/ReducerActions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/CreateAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/GetImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/LinePlotOptionsHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/CreateImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/interfaces/plotting/ILinePlotOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ImportedFile/FileProcessors/CSVProcessor.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/LinePlotOptions/ResetLinePlotOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/LinePlotOptions/CreateLinePlotOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/LinePlotOptions/GetLinePlotOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/LineSeriesVis/LineSeriesOptionsValidate.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/ImportFilesComponent.tsx",["207","208","209","210"],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Analyse/FileAnalysisComponent.tsx",["211","212"],"import React from 'react';\nimport { Box, CssBaseline, Typography, CircularProgress, Chip, Grid } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ReactJson from 'react-json-view';\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        height: '100%',\n        margin: theme.spacing(2),\n        padding: theme.spacing(2),\n    },\n    chips: {\n        backgroundColor: theme.palette.secondary.main,\n        margin: theme.spacing(1),\n        textColor: theme.palette.secondary.contrastText,\n    },\n    statDescription: {\n        margin: theme.spacing(1),\n        textAlign: 'left',\n        color: theme.palette.text.primary,\n    },\n    donutChart: {\n        margin: theme.spacing(2),\n    },\n    exampleObject: {\n        textColor: theme.palette.text.primary,\n    },\n    boxSize: {\n        maxWidth: '300px',\n    },\n}));\nfunction calcIntColumnsPercentage(intColumns: number, allColumns: number): number {\n    if (intColumns === 0 || allColumns === 0) {\n        return 0;\n    }\n    return Math.round((intColumns / allColumns) * 100);\n}\nfunction getExampleObject(integerDataObjects: Array<object>): Object {\n    if (integerDataObjects.length === 0) {\n        return {};\n    }\n    const [firstObject] = integerDataObjects;\n    const objectToReturn: Object = {};\n    for (const [key, value] of Object.entries(firstObject)) {\n        // @ts-ignore\n        objectToReturn[key] = value;\n    }\n    return objectToReturn;\n}\nfunction calcNumberOfIgnoredObjects(integerDataObjects: Array<object>, dataAsObjects: Array<object>): number {\n    const analysedDataLength = integerDataObjects.length;\n    const importedDataLength = dataAsObjects.length;\n    return importedDataLength - analysedDataLength;\n}\nfunction FileAnalysisComponent(props: any) {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"flex-start\"\n            alignItems=\"flex-start\"\n            id=\"file-analysis\"\n        >\n            <Box id=\"title\">\n                <Typography variant=\"h4\" style={{ paddingBottom: '20px' }} id=\"file-analysis-title\">\n                    File Analysis:\n                </Typography>\n            </Box>\n            <Box my={15} id=\"percent-integer-columns\">\n                <Typography className={classes.statDescription}>Percentage of Integer Columns in file:</Typography>\n                <Box position=\"relative\" display=\"inline-flex\" className={classes.donutChart}>\n                    <CircularProgress\n                        id={'circular-progress'}\n                        variant=\"determinate\"\n                        {...props}\n                        color=\"primary\"\n                        thickness={7}\n                        size={200}\n                        value={calcIntColumnsPercentage(props.integerFields.length, props.dataFields.length)}\n                    />\n                    <Box\n                        id={'circular-progress-text'}\n                        top={0}\n                        left={0}\n                        bottom={0}\n                        right={0}\n                        position=\"absolute\"\n                        display=\"flex\"\n                        alignItems=\"center\"\n                        justifyContent=\"center\"\n                    >\n                        <Typography variant=\"h3\" component=\"div\" color=\"textPrimary\">{`${calcIntColumnsPercentage(\n                            props.integerFields.length,\n                            props.dataFields.length\n                        )}%`}</Typography>\n                    </Box>\n                </Box>\n            </Box>\n            <Box id=\"integer-columns\" className={classes.boxSize}>\n                <Typography className={classes.statDescription}>Integer Columns:</Typography>\n                {props.integerFields.map((integerField: string) => (\n                    <Chip className={classes.chips} label={integerField} id={integerField + '-chip'} />\n                ))}\n            </Box>\n            <Box my={15} id=\"ignored-objects\">\n                <Typography className={classes.statDescription}>Number of Ignored Data Objects:</Typography>\n                <Typography className={classes.statDescription}>\n                    {`${calcNumberOfIgnoredObjects(props.integerDataObjects, props.dataAsObjects)}`}\n                </Typography>\n            </Box>\n            <Box id=\"example-object\" className={classes.boxSize}>\n                <Typography className={classes.statDescription}>Example Data Object:</Typography>\n                <Box id={'json-object'}>\n                    <ReactJson\n                        src={getExampleObject(props.integerDataObjects)}\n                        theme=\"summerfruit:inverted\"\n                        displayDataTypes={false}\n                        displayObjectSize={false}\n                    />\n                </Box>\n            </Box>\n        </Box>\n    );\n}\n\nconst mapStateToProps = (state: any) => ({\n    integerFields: state.analysedData.integerFields,\n    integerDataObjects: state.analysedData.integerDataObjects,\n    dataFields: state.importedData.dataFields,\n    dataAsObjects: state.importedData.dataAsObjects,\n});\nexport default connect(mapStateToProps, {})(FileAnalysisComponent);\n","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/LineSeriesVisHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/LineSeriesVis/LineSeriesCreateVis.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/GetAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/CurrentVisualisation/ResetCurrentVisualisation.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/CurrentVisualisation/CreateCurrentVisualisation.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LineSeriesVis.tsx",["213"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Typography } from '@material-ui/core';\nimport { HorizontalGridLines, LineSeries, VerticalGridLines, XAxis, XYPlot, YAxis } from 'react-vis';\nimport { connect } from 'react-redux';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    statDescription: {\n        margin: theme.spacing(1),\n        textAlign: 'left',\n        color: theme.palette.text.primary,\n    },\n}));\nconst data = [\n    { x: 0, y: 8 },\n    { x: 1, y: 5 },\n    { x: 2, y: 4 },\n    { x: 3, y: 9 },\n    { x: 4, y: 1 },\n    { x: 5, y: 7 },\n    { x: 6, y: 6 },\n    { x: 7, y: 3 },\n    { x: 8, y: 2 },\n    { x: 9, y: 0 },\n];\nfunction LineSeriesVis(props: any) {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            flexWrap=\"nowrap\"\n            overflow=\"auto\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'line-series'}\n            mx={15}\n        >\n            <Box>\n                <XYPlot\n                    height={props.currentVisualisation.height}\n                    width={props.currentVisualisation.width}\n                    margin={{ left: 75 }}\n                >\n                    <HorizontalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <VerticalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <XAxis\n                        //@ts-ignore\n                        style={{ text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600, margin: 5, padding: 5 } }}\n                    />\n                    <YAxis\n                        // left={50}\n                        //@ts-ignore\n                        style={{ text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600, margin: 5, padding: 5 } }}\n                    />\n\n                    <LineSeries\n                        style={{\n                            strokeLinejoin: 'round',\n                            strokeWidth: props.currentVisualisation.lineWidth,\n                        }}\n                        strokeStyle={props.currentVisualisation.lineStyle}\n                        opacity={props.currentVisualisation.opacity}\n                        curve={props.currentVisualisation.curve}\n                        data={props.currentVisualisation.data}\n                        color={props.currentVisualisation.colour}\n                    />\n                </XYPlot>\n            </Box>\n            <Box my={15} id=\"graph-info\">\n                <Typography className={classes.statDescription}>Graph Info:</Typography>\n                <Typography\n                    className={classes.statDescription}\n                >{`X Axis - ${props.linePlotOptions.xValue}`}</Typography>\n                <Typography\n                    className={classes.statDescription}\n                >{`Y Axis - ${props.linePlotOptions.yValue}`}</Typography>\n            </Box>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    currentVisualisation: state.currentVisualisation,\n    linePlotOptions: state.linePlotOptions,\n});\nexport default connect(mapStateToProps, {})(LineSeriesVis);\n","/Users/aatikaseedat/Documents/data-visualiser/src/interfaces/plotting/ILinePlotCreateVis.tsx",["214"],{"ruleId":"215","replacedBy":"216"},{"ruleId":"217","replacedBy":"218"},{"ruleId":"215","replacedBy":"216"},{"ruleId":"217","replacedBy":"218"},{"ruleId":"219","severity":1,"message":"220","line":6,"column":7,"nodeType":"221","messageId":"222","endLine":6,"endColumn":16},{"ruleId":"223","severity":1,"message":"220","line":7,"column":7,"nodeType":"221","messageId":"222","endLine":7,"endColumn":16},{"ruleId":"223","severity":1,"message":"224","line":2,"column":8,"nodeType":"221","messageId":"222","endLine":2,"endColumn":13},{"ruleId":"223","severity":1,"message":"225","line":5,"column":10,"nodeType":"221","messageId":"222","endLine":5,"endColumn":18},{"ruleId":"223","severity":1,"message":"226","line":3,"column":15,"nodeType":"221","messageId":"222","endLine":3,"endColumn":19},{"ruleId":"223","severity":1,"message":"227","line":4,"column":10,"nodeType":"221","messageId":"222","endLine":4,"endColumn":20},{"ruleId":"223","severity":1,"message":"228","line":4,"column":22,"nodeType":"221","messageId":"222","endLine":4,"endColumn":28},{"ruleId":"223","severity":1,"message":"229","line":4,"column":30,"nodeType":"221","messageId":"222","endLine":4,"endColumn":47},{"ruleId":"223","severity":1,"message":"230","line":4,"column":49,"nodeType":"221","messageId":"222","endLine":4,"endColumn":68},{"ruleId":"223","severity":1,"message":"231","line":4,"column":70,"nodeType":"221","messageId":"222","endLine":4,"endColumn":75},{"ruleId":"223","severity":1,"message":"232","line":4,"column":77,"nodeType":"221","messageId":"222","endLine":4,"endColumn":82},{"ruleId":"223","severity":1,"message":"233","line":3,"column":10,"nodeType":"221","messageId":"222","endLine":3,"endColumn":21},{"ruleId":"223","severity":1,"message":"234","line":10,"column":5,"nodeType":"221","messageId":"222","endLine":10,"endColumn":10},{"ruleId":"223","severity":1,"message":"235","line":2,"column":15,"nodeType":"221","messageId":"222","endLine":2,"endColumn":21},{"ruleId":"223","severity":1,"message":"236","line":2,"column":23,"nodeType":"221","messageId":"222","endLine":2,"endColumn":32},{"ruleId":"223","severity":1,"message":"226","line":2,"column":43,"nodeType":"221","messageId":"222","endLine":2,"endColumn":47},{"ruleId":"223","severity":1,"message":"234","line":2,"column":73,"nodeType":"221","messageId":"222","endLine":2,"endColumn":78},{"ruleId":"223","severity":1,"message":"237","line":2,"column":15,"nodeType":"221","messageId":"222","endLine":2,"endColumn":26},{"ruleId":"223","severity":1,"message":"226","line":2,"column":64,"nodeType":"221","messageId":"222","endLine":2,"endColumn":68},{"ruleId":"223","severity":1,"message":"238","line":18,"column":7,"nodeType":"221","messageId":"222","endLine":18,"endColumn":11},{"ruleId":"223","severity":1,"message":"239","line":1,"column":21,"nodeType":"221","messageId":"222","endLine":1,"endColumn":37},"no-native-reassign",["240"],"no-negated-in-lhs",["241"],"no-unused-vars","'useStyles' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'Alert' is defined but never used.","'Collapse' is defined but never used.","'Grid' is defined but never used.","'LineSeries' is defined but never used.","'XYPlot' is defined but never used.","'VerticalGridLines' is defined but never used.","'HorizontalGridLines' is defined but never used.","'XAxis' is defined but never used.","'YAxis' is defined but never used.","'ColorPicker' is defined but never used.","'Paper' is defined but never used.","'Button' is defined but never used.","'Container' is defined but never used.","'CssBaseline' is defined but never used.","'data' is assigned a value but never used.","'ILinePlotOptions' is defined but never used.","no-global-assign","no-unsafe-negation"]