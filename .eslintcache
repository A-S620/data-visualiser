[{"/Users/aatikaseedat/Documents/data-visualiser/src/index.js":"1","/Users/aatikaseedat/Documents/data-visualiser/src/App.js":"2","/Users/aatikaseedat/Documents/data-visualiser/src/serviceWorker.js":"3","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/store.js":"4","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Reducers/ReduxReducer.js":"5","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Navigation/UserNavigation.tsx":"6","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/ReduxState.js":"7","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Actions/ReducerActionTypes.js":"8","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Navigation/TabPanel.js":"9","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Settings/Settings.js":"10","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Home/Home.js":"11","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Export/Export.js":"12","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/PlottingPage.tsx":"13","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/PlottingNav.tsx":"14","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Import/ImportedFileStats.tsx":"15","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Notifications/AlertNotification.tsx":"16","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/ImportFilesHandler.tsx":"17","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/NotificationsHandler.tsx":"18","/Users/aatikaseedat/Documents/data-visualiser/src/interfaces/INotification.tsx":"19","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LinePlottingPage.tsx":"20","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ImportedFile/ImportFileData.tsx":"21","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/ResetImportedData.tsx":"22","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/ResetAnalysedData.tsx":"23","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LinePlottingOptions.tsx":"24","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Actions/ReducerActions.tsx":"25","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/CreateAnalysedData.tsx":"26","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/GetImportedData.tsx":"27","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/LinePlotOptionsHandler.tsx":"28","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/CreateImportedData.tsx":"29","/Users/aatikaseedat/Documents/data-visualiser/src/interfaces/plotting/ILinePlotOptions.tsx":"30","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ImportedFile/FileProcessors/CSVProcessor.tsx":"31","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/LinePlotOptions/ResetLinePlotOptions.tsx":"32","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/LinePlotOptions/CreateLinePlotOptions.tsx":"33","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/LinePlotOptions/GetLinePlotOptions.tsx":"34","/Users/aatikaseedat/Documents/data-visualiser/src/domain/LineSeriesVis/LineSeriesOptionsValidate.tsx":"35","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/ImportFilesComponent.tsx":"36","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Analyse/FileAnalysisComponent.tsx":"37","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/LineSeriesVisHandler.tsx":"38","/Users/aatikaseedat/Documents/data-visualiser/src/domain/LineSeriesVis/LineSeriesCreateVis.tsx":"39","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/GetAnalysedData.tsx":"40","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/CurrentVisualisation/ResetCurrentVisualisation.tsx":"41","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/CurrentVisualisation/CreateCurrentVisualisation.tsx":"42","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LineSeriesVis.tsx":"43","/Users/aatikaseedat/Documents/data-visualiser/src/interfaces/plotting/ILinePlotCreateVis.tsx":"44","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ImportedFile/DataAnalysis/AnalyseIntervalData.tsx":"45","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Analyse/FieldTypes.tsx":"46","/Users/aatikaseedat/Documents/data-visualiser/src/interfaces/import/IAnalysedFileData.tsx":"47"},{"size":1620,"mtime":1609579694144,"results":"48","hashOfConfig":"49"},{"size":233,"mtime":1609946572554,"results":"50","hashOfConfig":"49"},{"size":5854,"mtime":1608309343000,"results":"51","hashOfConfig":"49"},{"size":215,"mtime":1608735235191,"results":"52","hashOfConfig":"49"},{"size":3002,"mtime":1611262782713,"results":"53","hashOfConfig":"49"},{"size":2809,"mtime":1611132266338,"results":"54","hashOfConfig":"49"},{"size":318,"mtime":1611261695531,"results":"55","hashOfConfig":"49"},{"size":793,"mtime":1611261823118,"results":"56","hashOfConfig":"49"},{"size":601,"mtime":1608732474371,"results":"57","hashOfConfig":"49"},{"size":966,"mtime":1608732749916,"results":"58","hashOfConfig":"49"},{"size":614,"mtime":1610558733032,"results":"59","hashOfConfig":"49"},{"size":962,"mtime":1608732474397,"results":"60","hashOfConfig":"49"},{"size":550,"mtime":1609327048703,"results":"61","hashOfConfig":"49"},{"size":5075,"mtime":1609748221737,"results":"62","hashOfConfig":"49"},{"size":2272,"mtime":1609946362973,"results":"63","hashOfConfig":"49"},{"size":1098,"mtime":1610974415290,"results":"64","hashOfConfig":"49"},{"size":1293,"mtime":1611175222983,"results":"65","hashOfConfig":"49"},{"size":607,"mtime":1610266600513,"results":"66","hashOfConfig":"49"},{"size":168,"mtime":1610968410686,"results":"67","hashOfConfig":"49"},{"size":949,"mtime":1610787931801,"results":"68","hashOfConfig":"49"},{"size":2487,"mtime":1610266600603,"results":"69","hashOfConfig":"49"},{"size":264,"mtime":1608733523669,"results":"70","hashOfConfig":"49"},{"size":258,"mtime":1608733523665,"results":"71","hashOfConfig":"49"},{"size":16805,"mtime":1611132142157,"results":"72","hashOfConfig":"49"},{"size":1920,"mtime":1611565679594,"results":"73","hashOfConfig":"49"},{"size":762,"mtime":1611132266312,"results":"74","hashOfConfig":"49"},{"size":799,"mtime":1609946360577,"results":"75","hashOfConfig":"49"},{"size":1725,"mtime":1610640470313,"results":"76","hashOfConfig":"49"},{"size":769,"mtime":1609946360428,"results":"77","hashOfConfig":"49"},{"size":648,"mtime":1610997885803,"results":"78","hashOfConfig":"49"},{"size":1805,"mtime":1610266600528,"results":"79","hashOfConfig":"49"},{"size":263,"mtime":1610027177763,"results":"80","hashOfConfig":"49"},{"size":498,"mtime":1610027217593,"results":"81","hashOfConfig":"49"},{"size":285,"mtime":1610027556180,"results":"82","hashOfConfig":"49"},{"size":2057,"mtime":1610872073188,"results":"83","hashOfConfig":"49"},{"size":9960,"mtime":1611474231468,"results":"84","hashOfConfig":"49"},{"size":5334,"mtime":1611132266325,"results":"85","hashOfConfig":"49"},{"size":703,"mtime":1610640470189,"results":"86","hashOfConfig":"49"},{"size":2600,"mtime":1611391432026,"results":"87","hashOfConfig":"49"},{"size":809,"mtime":1611391432017,"results":"88","hashOfConfig":"49"},{"size":276,"mtime":1610638778765,"results":"89","hashOfConfig":"49"},{"size":522,"mtime":1610638594826,"results":"90","hashOfConfig":"49"},{"size":2795,"mtime":1610998218952,"results":"91","hashOfConfig":"49"},{"size":317,"mtime":1610874793490,"results":"92","hashOfConfig":"49"},{"size":3871,"mtime":1611132302664,"results":"93","hashOfConfig":"49"},{"size":5672,"mtime":1611565679611,"results":"94","hashOfConfig":"49"},{"size":352,"mtime":1611391432035,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"1llt5h",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"98"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"109"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"109"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"109"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"109"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"109"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"109"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"109"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"109"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"109"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},"/Users/aatikaseedat/Documents/data-visualiser/src/index.js",[],["203","204"],"/Users/aatikaseedat/Documents/data-visualiser/src/App.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/serviceWorker.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/store.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Reducers/ReduxReducer.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Navigation/UserNavigation.tsx",[],["205","206"],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/ReduxState.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Actions/ReducerActionTypes.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Navigation/TabPanel.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Settings/Settings.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Home/Home.js",["207"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core';\n\nimport ImportFilesComponent from '../ImportFileHandling/ImportFilesComponent';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    alignItemsAndJustifyContent: {\n        width: '100%',\n        height: '100%',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: 'pink',\n    },\n}));\n\nexport default function Home() {\n    return (\n        <main id={'home-page'}>\n            <ImportFilesComponent />\n        </main>\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Export/Export.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/PlottingPage.tsx",["208"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport PlottingNav from './PlottingNav';\nimport { Box } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        '& > *': {\n            margin: theme.spacing(1),\n            width: theme.spacing(16),\n            height: theme.spacing(16),\n        },\n    },\n}));\n\nexport default function PlottingPage() {\n    return (\n        <Box>\n            <PlottingNav />\n        </Box>\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/PlottingNav.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Import/ImportedFileStats.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Notifications/AlertNotification.tsx",["209","210"],"import React from 'react';\nimport Alert from '@material-ui/lab/Alert';\n\nimport { INotification } from '../../../interfaces/INotification';\nimport { Collapse, IconButton, Snackbar } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nexport default function AlertNotification(notifications: INotification) {\n    const [open, setOpen] = React.useState(true);\n    console.log('beep');\n    return (\n        <Snackbar\n            open={open}\n            id=\"notification-alert\"\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n            }}\n            // severity={notifications.alert}\n            action={\n                <IconButton\n                    aria-label=\"close\"\n                    color=\"inherit\"\n                    size=\"small\"\n                    onClick={() => {\n                        setOpen(false);\n                    }}\n                >\n                    <CloseIcon fontSize=\"inherit\" />\n                </IconButton>\n            }\n            message={notifications.notification}\n        />\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/ImportFilesHandler.tsx",["211","212"],"import { NotificationsHandler } from './NotificationsHandler';\nimport { ImportFileData } from '../domain/ImportedFile/ImportFileData';\nimport { IImportedFile } from '../interfaces/import/IImportedFile';\nimport { AnalyseIntervalData } from '../domain/ImportedFile/DataAnalysis/AnalyseIntervalData';\nimport ResetImportedData from '../domain/ReduxStoreHandling/ImportedData/ResetImportedData';\nimport ResetAnalysedData from '../domain/ReduxStoreHandling/AnalysedData/ResetAnalysedData';\n\nexport class ImportFilesHandler {\n    private importedFile: IImportedFile;\n\n    constructor(importedFile: IImportedFile) {\n        this.importedFile = importedFile;\n    }\n\n    public validate(): NotificationsHandler {\n        if (this.importedFile.file.length === 0) {\n            const notifications = new NotificationsHandler();\n            notifications.addNotification('File is empty');\n            return notifications;\n        }\n        return this.getImportedDataErrors();\n    }\n    private getImportedDataErrors(): NotificationsHandler {\n        const importData = new ImportFileData(this.importedFile);\n        return importData.validate();\n    }\n    public resetImportedData() {\n        const resetImportedData = new ResetImportedData();\n        resetImportedData.resetImportedDataState();\n    }\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/NotificationsHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/interfaces/INotification.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LinePlottingPage.tsx",["213","214","215","216","217","218","219"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Grid } from '@material-ui/core';\nimport { LineSeries, XYPlot, VerticalGridLines, HorizontalGridLines, XAxis, YAxis } from 'react-vis';\nimport LineSeriesVis from './LineSeriesVis';\nimport LinePlottingOptions from './LinePlottingOptions';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n}));\n\nexport default function LinePlottingPage() {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"row\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'line-plotting-page'}\n        >\n            <Box mx={10}>\n                <LineSeriesVis />\n            </Box>\n            <Box mx={10}>\n                <LinePlottingOptions />\n            </Box>\n        </Box>\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ImportedFile/ImportFileData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/ResetImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/ResetAnalysedData.tsx",[],["220","221"],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LinePlottingOptions.tsx",["222","223"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ColorPicker } from 'material-ui-color';\nimport {\n    Box,\n    Button,\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    Paper,\n    Select,\n    TextField,\n    Typography,\n} from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { CurveType, ILinePlotOptions, LineStyle } from '../../../../interfaces/plotting/ILinePlotOptions';\n\nimport { AlertType } from '../../../../interfaces/INotification';\nimport { NotificationsHandler } from '../../../../UIHandling/NotificationsHandler';\nimport AlertNotification from '../../Notifications/AlertNotification';\nimport { LinePlotOptionsHandler } from '../../../../UIHandling/LinePlotOptionsHandler';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    root: {\n        // width: '100%',\n    },\n    textColor: {\n        color: theme.palette.text.primary,\n    },\n    helperTextColor: {\n        color: theme.palette.text.disabled,\n    },\n}));\nfunction LinePlottingOptions(props: any) {\n    const classes = useStyles();\n    const [options, setOptions] = React.useState<{\n        xValue: string;\n        yValue: string;\n        height: number;\n        width: number;\n        colour: string;\n        opacity: number;\n        curveType: CurveType | null;\n        lineStyle: LineStyle | undefined;\n        lineWidth: number;\n    }>({\n        xValue: '',\n        yValue: '',\n        height: 800,\n        width: 800,\n        colour: '#000000',\n        opacity: 1,\n        curveType: null,\n        lineStyle: undefined,\n        lineWidth: 2,\n    });\n    const [notifications, setNotifications] = React.useState<{\n        outcome: AlertType | undefined;\n        outcomeMessage: string;\n        errors: NotificationsHandler;\n    }>({\n        outcome: undefined,\n        outcomeMessage: '',\n        errors: new NotificationsHandler(),\n    });\n    function submitIsEnabled(): boolean {\n        return !(options.xValue.length !== 0 && options.yValue.length !== 0 && xValAndYValIsEqual());\n    }\n    function xValAndYValIsEqual(): boolean {\n        return options.xValue !== options.yValue;\n    }\n    function validateDataOptions() {\n        const optionsToValidate: ILinePlotOptions = {\n            xValue: options.xValue,\n            yValue: options.yValue,\n            height: options.height,\n            width: options.width,\n            colour: options.colour,\n            opacity: options.opacity,\n            curveType: options.curveType,\n            lineStyle: options.lineStyle,\n            lineWidth: options.lineWidth,\n        };\n        const validateOptions = new LinePlotOptionsHandler(optionsToValidate);\n        const errors: NotificationsHandler = validateOptions.validateOptions();\n        if (errors.isEmpty()) {\n            try {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Options Validated',\n                });\n            } catch (e) {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            setNotifications({\n                ...notifications,\n                errors: errors,\n            });\n        }\n    }\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'line-plotting-options'}\n            mx={15}\n        >\n            <Box style={{ height: '50%', width: '50%' }} id={'alert-area'}>\n                {notifications.outcome && (\n                    <AlertNotification alert={notifications.outcome} notification={notifications.outcomeMessage} />\n                )}\n                {!notifications.errors.isEmpty() && (\n                    <AlertNotification\n                        alert={AlertType.FAILED}\n                        notification={`Error(s): ${notifications.errors.notification()}`}\n                    />\n                )}\n            </Box>\n            <div className={classes.paper}>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    className={classes.root}\n                    id={'line-plotting-options'}\n                    px={20}\n                    py={20}\n                >\n                    <Typography id={'line-plotting-title'}>Line Series Plotting Options</Typography>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\n                        <FormControl required style={{ minWidth: 200 }} id={'x-values-select'}>\n                            <InputLabel className={classes.textColor}>X Value</InputLabel>\n                            <Select\n                                id={'select-xValue'}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        xValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"X Values\"\n                                renderValue={(value) => {\n                                    if (!xValAndYValIsEqual()) {\n                                        return `⚠️  - ${value}`;\n                                    }\n                                    return `${value}`;\n                                }}\n                            >\n                                {props.intervalFields.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on X-Axis</FormHelperText>\n                        </FormControl>\n                        <Box mx={5} />\n                        <FormControl required style={{ minWidth: 200 }} id={'y-values-select'}>\n                            <InputLabel className={classes.textColor}>Y Value</InputLabel>\n                            <Select\n                                renderValue={(value) => {\n                                    if (!xValAndYValIsEqual()) {\n                                        return `⚠️  - ${value}`;\n                                    }\n                                    return `${value}`;\n                                }}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        yValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"Y Values\"\n                            >\n                                {props.intervalFields.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on Y-Axis</FormHelperText>\n                        </FormControl>\n                    </Box>\n                    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'size-textfields'}>\n                        <TextField\n                            type={'number'}\n                            id=\"height-textfield\"\n                            label=\"Height\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    height: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"width-textfield\"\n                            label=\"Width\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    width: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'colour-textfields'}>\n                        <FormControl style={{ minWidth: 200 }} id={'colour-select'}>\n                            <InputLabel className={classes.textColor}>Colour</InputLabel>\n                            <Select\n                                value={options.lineStyle}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        colour: event.target.value as string,\n                                    });\n                                }}\n                                name=\"colour\"\n                            >\n                                <option value={'red'}>red</option>\n                                <option value={'green'}>green</option>\n                                <option value={'blue'}>blue</option>\n                                <option value={'purple'}>purple</option>\n                                <option value={'orange'}>orange</option>\n                                <option value={'black'}>black</option>\n                                <option value={'yellow'}>yellow</option>\n                                <option value={'brown'}>brown</option>\n                                <option value={'pink'}>pink</option>\n                                <option value={'turquoise'}>turquoise</option>\n                            </Select>\n                        </FormControl>\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"opacity-textfield\"\n                            label=\"Opacity\"\n                            variant=\"outlined\"\n                            helperText=\"Value must be between 0 and 1\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    opacity: parseFloat(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box>\n                        <FormControl style={{ minWidth: 400 }} id={'curve-select'}>\n                            <InputLabel className={classes.textColor}>Curve</InputLabel>\n                            <Select\n                                // value={options.curveType}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        curveType: event.target.value as CurveType,\n                                    });\n                                    console.log(options.curveType);\n                                }}\n                                name=\"Y Values\"\n                            >\n                                <option value={CurveType.curveLinear}>Linear</option>\n                                <option value={CurveType.curveLinearClosed}>Linear Closed</option>\n                                <option value={CurveType.curveMonotoneX}>Monotone X</option>\n                                <option value={CurveType.curveMonotoneY}>Monotone Y</option>\n                                <option value={CurveType.curveNatural}>Natural</option>\n                                <option value={CurveType.curveStep}>Step</option>\n                                <option value={CurveType.curveStepAfter}>Step After</option>\n                                <option value={CurveType.curveStepBefore}>Step Before</option>\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>\n                                Function used to create curve\n                            </FormHelperText>\n                        </FormControl>\n                    </Box>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'line-options'}>\n                        <FormControl style={{ minWidth: 200 }} id={'line-style-select'}>\n                            <InputLabel className={classes.textColor}>Line Style</InputLabel>\n                            <Select\n                                value={options.lineStyle}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        lineStyle: event.target.value as LineStyle,\n                                    });\n                                }}\n                                name=\"Y Values\"\n                            >\n                                <option value={LineStyle.SOLID}>Solid</option>\n                                <option value={LineStyle.DASHED}>Dashed</option>\n                            </Select>\n                        </FormControl>\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"line-width-textfield\"\n                            label=\"Line Width\"\n                            variant=\"outlined\"\n                            helperText=\"Default: 2px\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    lineWidth: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box id={'submit-button'}>\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            disabled={submitIsEnabled()}\n                            id={'options-submit-button'}\n                            onClick={validateDataOptions}\n                        >\n                            Submit\n                        </Button>\n                    </Box>\n                </Box>\n            </div>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    intervalFields: state.analysedData.intervalFields,\n});\nexport default connect(mapStateToProps, {})(LinePlottingOptions);\n","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Actions/ReducerActions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/CreateAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/GetImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/LinePlotOptionsHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/CreateImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/interfaces/plotting/ILinePlotOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ImportedFile/FileProcessors/CSVProcessor.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/LinePlotOptions/ResetLinePlotOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/LinePlotOptions/CreateLinePlotOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/LinePlotOptions/GetLinePlotOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/LineSeriesVis/LineSeriesOptionsValidate.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/ImportFilesComponent.tsx",["224","225","226","227","228","229"],"import React from 'react';\nimport {\n    Box,\n    Button,\n    Container,\n    Divider,\n    Grid,\n    IconButton,\n    makeStyles,\n    Paper,\n    Tooltip,\n    Dialog,\n    DialogContent,\n    ClickAwayListener,\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { DropzoneArea } from 'material-ui-dropzone';\n\nimport { AlertType } from '../../../interfaces/INotification';\n\nimport { NotificationsHandler } from '../../../UIHandling/NotificationsHandler';\nimport { ImportFilesHandler } from '../../../UIHandling/ImportFilesHandler';\n\nimport AlertNotification from '../Notifications/AlertNotification';\nimport { IImportedFile } from '../../../interfaces/import/IImportedFile';\n\nimport ImportedFileStats from './Import/ImportedFileStats';\nimport { IImportedFileStats } from '../../../interfaces/import/IImportedFileStats';\nimport FileAnalysisComponent from './Analyse/FileAnalysisComponent';\nimport Slide from '@material-ui/core/Slide';\nimport FieldTypes from './Analyse/FieldTypes';\n\ninterface IState {\n    importedFiles: Array<File>;\n    submitButtonDisabled: boolean;\n    outcome: AlertType | undefined;\n    outcomeMessage: string;\n    errors: NotificationsHandler;\n    files: string;\n    fileType: string;\n    importedFileStats: IImportedFileStats;\n    fieldTypesDialogOpen: boolean;\n}\nexport default class ImportFilesComponent extends React.Component<{}, IState> {\n    private classes: any = makeStyles((theme) => ({\n        root: {\n            height: '100%',\n            width: '75%',\n        },\n        componentArea: {\n            height: '70%',\n            width: '75%',\n        },\n        container: {\n            width: '100%',\n        },\n        verticalLine: {\n            background: theme.palette.primary.light,\n            width: '2px',\n            margin: theme.spacing(7),\n        },\n        space: {\n            minWidth: '10%',\n        },\n        dialogPaper: {\n            width: '500px',\n            height: '700px',\n        },\n    }));\n    constructor(props: object) {\n        super(props);\n        this.state = {\n            importedFiles: [],\n            submitButtonDisabled: true,\n            outcome: undefined,\n            outcomeMessage: '',\n            errors: new NotificationsHandler(),\n            files: '',\n            fileType: '',\n            importedFileStats: {\n                fileType: '',\n                fileSize: '',\n                characterCount: undefined,\n            },\n            fieldTypesDialogOpen: false,\n        };\n    }\n    private static checkFileType(files: File[]): string {\n        const file = files[0];\n        return file.type;\n    }\n    private async addFiles(files: File[]) {\n        this.setState({ importedFiles: files });\n        if (files.length > 0) {\n            const allFiles = await files[0].text();\n            this.setState({\n                submitButtonDisabled: false,\n                files: allFiles,\n                fileType: ImportFilesComponent.checkFileType(files),\n                importedFileStats: {\n                    fileType: ImportFilesComponent.checkFileType(files),\n                    fileSize: (files[0].size / 1000).toString(),\n                    characterCount: allFiles.length,\n                },\n            });\n        } else {\n            this.setState({\n                submitButtonDisabled: true,\n            });\n        }\n    }\n    private async uploadFiles() {\n        const file: IImportedFile = {\n            file: this.state.files,\n            fileType: this.state.fileType,\n        };\n        const files = new ImportFilesHandler(file);\n        const errors: NotificationsHandler = files.validate();\n        if (errors.isEmpty()) {\n            try {\n                this.setState({\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Files successfully uploaded',\n                    fieldTypesDialogOpen: true,\n                });\n            } catch (e) {\n                this.setState({\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            this.setState({ errors });\n        }\n    }\n    private resetFiles() {\n        const file: IImportedFile = {\n            file: this.state.files,\n            fileType: this.state.fileType,\n        };\n        const files = new ImportFilesHandler(file);\n        files.resetImportedData();\n        this.setState({\n            importedFiles: [],\n            submitButtonDisabled: true,\n            outcome: undefined,\n            outcomeMessage: '',\n            errors: new NotificationsHandler(),\n            files: '',\n            fileType: '',\n            importedFileStats: {\n                fileType: '',\n                fileSize: '',\n                characterCount: undefined,\n            },\n        });\n    }\n    public render() {\n        return (\n            <main>\n                <Dialog\n                    open={this.state.fieldTypesDialogOpen}\n                    classes={{ paper: this.classes.dialogPaper }}\n                    onBackdropClick={() => {\n                        this.setState({ fieldTypesDialogOpen: false });\n                    }}\n                >\n                    <Box\n                        display=\"flex\"\n                        justifyContent=\"center\"\n                        flexDirection=\"column\"\n                        alignItems=\"center\"\n                        className={this.classes.root}\n                        id={'import-file-component'}\n                        my={15}\n                        mx={15}\n                    >\n                        <FieldTypes />{' '}\n                    </Box>\n                </Dialog>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    className={this.classes.root}\n                    id={'import-file-component'}\n                    my={15}\n                    mx={15}\n                >\n                    <Box style={{ height: '50%', width: '50%' }} my={15} id={'alert-area'}>\n                        {this.state.outcome && (\n                            <AlertNotification alert={this.state.outcome} notification={this.state.outcomeMessage} />\n                        )}\n                        {!this.state.errors.isEmpty() && (\n                            <AlertNotification\n                                alert={AlertType.FAILED}\n                                notification={`Error(s): ${this.state.errors.notification()}`}\n                            />\n                        )}\n                    </Box>\n                    <Box\n                        display=\"flex\"\n                        flexDirection=\"row\"\n                        justifyContent=\"center\"\n                        alignItems=\"flex-start\"\n                        className={this.classes.componentArea}\n                    >\n                        <Box id=\"drop-zone-area\" mx={15} my={15}>\n                            <Tooltip title=\"Delete Imported File from system\">\n                                <IconButton\n                                    color=\"primary\"\n                                    style={{ marginRight: 10, borderRadius: '5em' }}\n                                    id=\"delete-import-button\"\n                                    disabled={this.state.submitButtonDisabled}\n                                    onClick={() => {\n                                        this.resetFiles();\n                                    }}\n                                >\n                                    <DeleteIcon />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"View and edit the field types\">\n                                <Button\n                                    style={{ marginRight: 10, borderRadius: '5em' }}\n                                    id=\"field-types-button\"\n                                    color=\"primary\"\n                                    disabled={this.state.submitButtonDisabled}\n                                    onClick={() => {\n                                        this.setState({\n                                            fieldTypesDialogOpen: true,\n                                        });\n                                    }}\n                                >\n                                    Field Types\n                                </Button>\n                            </Tooltip>\n                            <DropzoneArea\n                                showPreviews={true}\n                                onChange={async (files) => {\n                                    await this.addFiles(files);\n                                    await this.uploadFiles();\n                                }}\n                                showPreviewsInDropzone={false}\n                                useChipsForPreview\n                                previewGridProps={{ container: { spacing: 1, direction: 'row' } }}\n                                previewChipProps={{ classes: { root: this.classes.previewChip } }}\n                                previewText=\"Selected files\"\n                                showAlerts={false}\n                                // clearOnUnmount={true}\n                                acceptedFiles={['text/csv']}\n                                filesLimit={1}\n                            />\n\n                            <ImportedFileStats {...this.state.importedFileStats} />\n                        </Box>\n                        <Box mx={15} my={15}>\n                            <Divider orientation=\"vertical\" flexItem className={this.classes.verticalLine} />\n                            <FileAnalysisComponent />\n                        </Box>\n                    </Box>\n                </Box>\n            </main>\n        );\n    }\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Analyse/FileAnalysisComponent.tsx",["230","231"],"import React from 'react';\nimport { Box, CssBaseline, Typography, CircularProgress, Chip, Grid } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ReactJson from 'react-json-view';\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        height: '100%',\n        margin: theme.spacing(2),\n        padding: theme.spacing(2),\n    },\n    chips: {\n        backgroundColor: theme.palette.secondary.main,\n        margin: theme.spacing(1),\n        textColor: theme.palette.secondary.contrastText,\n    },\n    statDescription: {\n        margin: theme.spacing(1),\n        textAlign: 'left',\n        color: theme.palette.text.primary,\n    },\n    donutChart: {\n        margin: theme.spacing(2),\n    },\n    exampleObject: {\n        textColor: theme.palette.text.primary,\n    },\n    boxSize: {\n        maxWidth: '300px',\n    },\n}));\nfunction calcIntColumnsPercentage(intColumns: number, allColumns: number): number {\n    if (intColumns === 0 || allColumns === 0) {\n        return 0;\n    }\n    return Math.round((intColumns / allColumns) * 100);\n}\nfunction getExampleObject(intervalDataObjects: Array<object>): Object {\n    if (intervalDataObjects.length === 0) {\n        return {};\n    }\n    const [firstObject] = intervalDataObjects;\n    const objectToReturn: Object = {};\n    for (const [key, value] of Object.entries(firstObject)) {\n        // @ts-ignore\n        objectToReturn[key] = value;\n    }\n    return objectToReturn;\n}\nfunction calcNumberOfIgnoredObjects(intervalDataObjects: Array<object>, dataAsObjects: Array<object>): number {\n    const analysedDataLength = intervalDataObjects.length;\n    const importedDataLength = dataAsObjects.length;\n    return importedDataLength - analysedDataLength;\n}\nfunction FileAnalysisComponent(props: any) {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"flex-start\"\n            alignItems=\"flex-start\"\n            id=\"file-analysis\"\n        >\n            <Box id=\"title\">\n                <Typography variant=\"h4\" style={{ paddingBottom: '20px' }} id=\"file-analysis-title\">\n                    File Analysis:\n                </Typography>\n            </Box>\n            <Box my={15} id=\"percent-integer-columns\">\n                <Typography className={classes.statDescription}>Percentage of Integer Columns in file:</Typography>\n                <Box position=\"relative\" display=\"inline-flex\" className={classes.donutChart}>\n                    <CircularProgress\n                        id={'circular-progress'}\n                        variant=\"determinate\"\n                        {...props}\n                        color=\"primary\"\n                        thickness={7}\n                        size={200}\n                        value={calcIntColumnsPercentage(props.intervalFields.length, props.dataFields.length)}\n                    />\n                    <Box\n                        id={'circular-progress-text'}\n                        top={0}\n                        left={0}\n                        bottom={0}\n                        right={0}\n                        position=\"absolute\"\n                        display=\"flex\"\n                        alignItems=\"center\"\n                        justifyContent=\"center\"\n                    >\n                        <Typography variant=\"h3\" component=\"div\" color=\"textPrimary\">{`${calcIntColumnsPercentage(\n                            props.intervalFields.length,\n                            props.dataFields.length\n                        )}%`}</Typography>\n                    </Box>\n                </Box>\n            </Box>\n            <Box id=\"integer-columns\" className={classes.boxSize}>\n                <Typography className={classes.statDescription}>Integer Columns:</Typography>\n                {props.intervalFields.map((integerField: string) => (\n                    <Chip className={classes.chips} label={integerField} id={integerField + '-chip'} />\n                ))}\n            </Box>\n            <Box my={15} id=\"ignored-objects\">\n                <Typography className={classes.statDescription}>Number of Ignored Data Objects:</Typography>\n                <Typography className={classes.statDescription}>\n                    {`${calcNumberOfIgnoredObjects(props.intervalDataObjects, props.dataAsObjects)}`}\n                </Typography>\n            </Box>\n            <Box id=\"example-object\" className={classes.boxSize}>\n                <Typography className={classes.statDescription}>Example Data Object:</Typography>\n                <Box id={'json-object'}>\n                    <ReactJson\n                        src={getExampleObject(props.intervalDataObjects)}\n                        theme=\"summerfruit:inverted\"\n                        displayDataTypes={false}\n                        displayObjectSize={false}\n                    />\n                </Box>\n            </Box>\n        </Box>\n    );\n}\n\nconst mapStateToProps = (state: any) => ({\n    intervalFields: state.analysedData.intervalFields,\n    intervalDataObjects: state.analysedData.intervalDataObjects,\n    dataFields: state.importedData.dataFields,\n    dataAsObjects: state.importedData.dataAsObjects,\n});\nexport default connect(mapStateToProps, {})(FileAnalysisComponent);\n","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/LineSeriesVisHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/LineSeriesVis/LineSeriesCreateVis.tsx",["232"],"import GetLinePlotOptions from '../ReduxStoreHandling/LinePlotOptions/GetLinePlotOptions';\nimport GetAnalysedData from '../ReduxStoreHandling/AnalysedData/GetAnalysedData';\nimport { ILinePlotCreateVis } from '../../interfaces/plotting/ILinePlotCreateVis';\nimport { IAnalysedFileData } from '../../interfaces/import/IAnalysedFileData';\nimport { CurveType } from '../../interfaces/plotting/ILinePlotOptions';\n\nexport class LineSeriesCreateVis {\n    public createVis(): ILinePlotCreateVis {\n        const linePlotOptions = new GetLinePlotOptions().getLinePlotOptions();\n        if (Object.keys(linePlotOptions).length === 0) {\n            return this.createDefaultOptions();\n        }\n\n        return {\n            data: this.createDataArray(linePlotOptions.xValue, linePlotOptions.yValue),\n            height: linePlotOptions.height,\n            width: linePlotOptions.width,\n            colour: linePlotOptions.colour,\n            opacity: linePlotOptions.opacity,\n            curveType: linePlotOptions.curveType,\n            lineStyle: linePlotOptions.lineStyle,\n            lineWidth: linePlotOptions.lineWidth,\n        };\n    }\n    private createDefaultOptions(): ILinePlotCreateVis {\n        const { intervalFields } = this.getAnalysedData();\n        return {\n            data: this.createDataArray(intervalFields[0], intervalFields[1]),\n            height: 800,\n            width: 800,\n            colour: '#000000',\n            opacity: 1,\n            curveType: null,\n            lineStyle: undefined,\n            lineWidth: 2,\n        };\n    }\n\n    private getAnalysedData(): IAnalysedFileData {\n        const getAnalysedData = new GetAnalysedData();\n        return getAnalysedData.getAnalysedData();\n    }\n    private createDataObject(xValue: string, yValue: string, currentObject: Object): Object {\n        let x: number = 0;\n        let y: number = 0;\n        for (const [key, value] of Object.entries(currentObject)) {\n            if (key === xValue) {\n                x = value;\n            } else if (key === yValue) {\n                y = value;\n                return { x, y };\n            }\n        }\n        return {};\n    }\n\n    private createDataArray(xValue: string, yValue: string): Array<Object> {\n        const { intervalDataAsObjects: dataObjectsArray } = this.getAnalysedData();\n        const data: Array<Object> = [];\n        for (let objIndex = 0; objIndex < dataObjectsArray.length; objIndex += 1) {\n            const dataObject = this.createDataObject(xValue, yValue, dataObjectsArray[objIndex]);\n            data.push(dataObject);\n        }\n        return data;\n    }\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/GetAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/CurrentVisualisation/ResetCurrentVisualisation.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/CurrentVisualisation/CreateCurrentVisualisation.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LineSeriesVis.tsx",["233"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box } from '@material-ui/core';\nimport { HorizontalGridLines, LineSeries, VerticalGridLines, XAxis, XYPlot, YAxis } from 'react-vis';\nimport { connect } from 'react-redux';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    statDescription: {\n        margin: theme.spacing(1),\n        textAlign: 'left',\n        color: theme.palette.text.primary,\n    },\n}));\nconst data = [\n    { x: 0, y: 8 },\n    { x: 1, y: 5 },\n    { x: 2, y: 4 },\n    { x: 3, y: 9 },\n    { x: 4, y: 1 },\n    { x: 5, y: 7 },\n    { x: 6, y: 6 },\n    { x: 7, y: 3 },\n    { x: 8, y: 2 },\n    { x: 9, y: 0 },\n];\nfunction LineSeriesVis(props: any) {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            flexWrap=\"nowrap\"\n            overflow=\"auto\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'line-series'}\n            mx={15}\n        >\n            <Box>\n                <XYPlot\n                    id={'line-series-vis'}\n                    height={props.currentVisualisation.height}\n                    width={props.currentVisualisation.width}\n                    margin={{ left: 75 }}\n                >\n                    <HorizontalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <VerticalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <XAxis\n                        //@ts-ignore\n                        style={{ text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600, margin: 5, padding: 5 } }}\n                    />\n                    <YAxis\n                        // left={50}\n                        style={{ text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600, margin: 5, padding: 5 } }}\n                    />\n\n                    <LineSeries\n                        style={{\n                            strokeLinejoin: 'round',\n                            strokeWidth: props.currentVisualisation.lineWidth,\n                        }}\n                        strokeStyle={props.currentVisualisation.lineStyle}\n                        opacity={props.currentVisualisation.opacity}\n                        curve={props.currentVisualisation.curve}\n                        data={props.currentVisualisation.data}\n                        color={props.currentVisualisation.colour}\n                    />\n                </XYPlot>\n            </Box>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    currentVisualisation: state.currentVisualisation,\n    linePlotOptions: state.linePlotOptions,\n});\nexport default connect(mapStateToProps, {})(LineSeriesVis);\n","/Users/aatikaseedat/Documents/data-visualiser/src/interfaces/plotting/ILinePlotCreateVis.tsx",["234"],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ImportedFile/DataAnalysis/AnalyseIntervalData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Analyse/FieldTypes.tsx",["235","236","237","238","239","240","241","242"],"/Users/aatikaseedat/Documents/data-visualiser/src/interfaces/import/IAnalysedFileData.tsx",[],{"ruleId":"243","replacedBy":"244"},{"ruleId":"245","replacedBy":"246"},{"ruleId":"243","replacedBy":"244"},{"ruleId":"245","replacedBy":"246"},{"ruleId":"247","severity":1,"message":"248","line":6,"column":7,"nodeType":"249","messageId":"250","endLine":6,"endColumn":16},{"ruleId":"251","severity":1,"message":"248","line":7,"column":7,"nodeType":"249","messageId":"250","endLine":7,"endColumn":16},{"ruleId":"251","severity":1,"message":"252","line":2,"column":8,"nodeType":"249","messageId":"250","endLine":2,"endColumn":13},{"ruleId":"251","severity":1,"message":"253","line":5,"column":10,"nodeType":"249","messageId":"250","endLine":5,"endColumn":18},{"ruleId":"251","severity":1,"message":"254","line":4,"column":10,"nodeType":"249","messageId":"250","endLine":4,"endColumn":29},{"ruleId":"251","severity":1,"message":"255","line":6,"column":8,"nodeType":"249","messageId":"250","endLine":6,"endColumn":25},{"ruleId":"251","severity":1,"message":"256","line":3,"column":15,"nodeType":"249","messageId":"250","endLine":3,"endColumn":19},{"ruleId":"251","severity":1,"message":"257","line":4,"column":10,"nodeType":"249","messageId":"250","endLine":4,"endColumn":20},{"ruleId":"251","severity":1,"message":"258","line":4,"column":22,"nodeType":"249","messageId":"250","endLine":4,"endColumn":28},{"ruleId":"251","severity":1,"message":"259","line":4,"column":30,"nodeType":"249","messageId":"250","endLine":4,"endColumn":47},{"ruleId":"251","severity":1,"message":"260","line":4,"column":49,"nodeType":"249","messageId":"250","endLine":4,"endColumn":68},{"ruleId":"251","severity":1,"message":"261","line":4,"column":70,"nodeType":"249","messageId":"250","endLine":4,"endColumn":75},{"ruleId":"251","severity":1,"message":"262","line":4,"column":77,"nodeType":"249","messageId":"250","endLine":4,"endColumn":82},{"ruleId":"243","replacedBy":"263"},{"ruleId":"245","replacedBy":"264"},{"ruleId":"251","severity":1,"message":"265","line":3,"column":10,"nodeType":"249","messageId":"250","endLine":3,"endColumn":21},{"ruleId":"251","severity":1,"message":"266","line":10,"column":5,"nodeType":"249","messageId":"250","endLine":10,"endColumn":10},{"ruleId":"251","severity":1,"message":"267","line":5,"column":5,"nodeType":"249","messageId":"250","endLine":5,"endColumn":14},{"ruleId":"251","severity":1,"message":"256","line":7,"column":5,"nodeType":"249","messageId":"250","endLine":7,"endColumn":9},{"ruleId":"251","severity":1,"message":"266","line":10,"column":5,"nodeType":"249","messageId":"250","endLine":10,"endColumn":10},{"ruleId":"251","severity":1,"message":"268","line":13,"column":5,"nodeType":"249","messageId":"250","endLine":13,"endColumn":18},{"ruleId":"251","severity":1,"message":"269","line":14,"column":5,"nodeType":"249","messageId":"250","endLine":14,"endColumn":22},{"ruleId":"251","severity":1,"message":"270","line":30,"column":8,"nodeType":"249","messageId":"250","endLine":30,"endColumn":13},{"ruleId":"251","severity":1,"message":"271","line":2,"column":15,"nodeType":"249","messageId":"250","endLine":2,"endColumn":26},{"ruleId":"251","severity":1,"message":"256","line":2,"column":64,"nodeType":"249","messageId":"250","endLine":2,"endColumn":68},{"ruleId":"251","severity":1,"message":"272","line":5,"column":10,"nodeType":"249","messageId":"250","endLine":5,"endColumn":19},{"ruleId":"251","severity":1,"message":"273","line":18,"column":7,"nodeType":"249","messageId":"250","endLine":18,"endColumn":11},{"ruleId":"251","severity":1,"message":"274","line":1,"column":21,"nodeType":"249","messageId":"250","endLine":1,"endColumn":37},{"ruleId":"251","severity":1,"message":"271","line":4,"column":5,"nodeType":"249","messageId":"250","endLine":4,"endColumn":16},{"ruleId":"251","severity":1,"message":"275","line":6,"column":5,"nodeType":"249","messageId":"250","endLine":6,"endColumn":21},{"ruleId":"251","severity":1,"message":"276","line":7,"column":5,"nodeType":"249","messageId":"250","endLine":7,"endColumn":9},{"ruleId":"251","severity":1,"message":"256","line":8,"column":5,"nodeType":"249","messageId":"250","endLine":8,"endColumn":9},{"ruleId":"251","severity":1,"message":"277","line":9,"column":5,"nodeType":"249","messageId":"250","endLine":9,"endColumn":13},{"ruleId":"251","severity":1,"message":"278","line":53,"column":10,"nodeType":"249","messageId":"250","endLine":53,"endColumn":33},{"ruleId":"251","severity":1,"message":"279","line":68,"column":12,"nodeType":"249","messageId":"250","endLine":68,"endColumn":27},{"ruleId":"251","severity":1,"message":"280","line":68,"column":29,"nodeType":"249","messageId":"250","endLine":68,"endColumn":47},"no-native-reassign",["281"],"no-negated-in-lhs",["282"],"no-unused-vars","'useStyles' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'Alert' is defined but never used.","'Collapse' is defined but never used.","'AnalyseIntervalData' is defined but never used.","'ResetAnalysedData' is defined but never used.","'Grid' is defined but never used.","'LineSeries' is defined but never used.","'XYPlot' is defined but never used.","'VerticalGridLines' is defined but never used.","'HorizontalGridLines' is defined but never used.","'XAxis' is defined but never used.","'YAxis' is defined but never used.",["281"],["282"],"'ColorPicker' is defined but never used.","'Paper' is defined but never used.","'Container' is defined but never used.","'DialogContent' is defined but never used.","'ClickAwayListener' is defined but never used.","'Slide' is defined but never used.","'CssBaseline' is defined but never used.","'CurveType' is defined but never used.","'data' is assigned a value but never used.","'ILinePlotOptions' is defined but never used.","'CircularProgress' is defined but never used.","'Chip' is defined but never used.","'ListItem' is defined but never used.","'LinearProgressWithLabel' is defined but never used.","'fieldsCompleted' is assigned a value but never used.","'setFieldsCompleted' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]