[{"/Users/aatikaseedat/Documents/data-visualiser/src/index.js":"1","/Users/aatikaseedat/Documents/data-visualiser/src/App.js":"2","/Users/aatikaseedat/Documents/data-visualiser/src/serviceWorker.js":"3","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/store.js":"4","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Reducers/ReduxReducer.js":"5","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Navigation/UserNavigation.tsx":"6","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/ReduxState.js":"7","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Actions/ReducerActionTypes.js":"8","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Navigation/TabPanel.js":"9","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Settings/Settings.js":"10","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Home/Home.js":"11","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Export/Export.js":"12","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/PlottingPage.tsx":"13","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/PlottingNav.tsx":"14","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Import/ImportedFileStats.tsx":"15","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Notifications/AlertNotification.tsx":"16","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/ImportFilesHandler.tsx":"17","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/NotificationsHandler.tsx":"18","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/ResetImportedData.tsx":"19","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/ResetAnalysedData.tsx":"20","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Actions/ReducerActions.tsx":"21","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/CreateAnalysedData.tsx":"22","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/GetImportedData.tsx":"23","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/CreateImportedData.tsx":"24","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/ImportFilesComponent.tsx":"25","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Analyse/FileAnalysisComponent.tsx":"26","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/GetAnalysedData.tsx":"27","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LineSeriesVis.tsx":"28","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Analyse/FieldTypes.tsx":"29","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/AnalyseFileHandler.tsx":"30","/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/Notification/INotification.tsx":"31","/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/Analyse/IAnalysedFileData.tsx":"32","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ImportFile/ImportFileData.tsx":"33","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/ImportedData/ResetImportedData.tsx":"34","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/ImportedData/GetImportedData.tsx":"35","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/ImportedData/CreateImportedData.tsx":"36","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ImportFile/FileProcessors/CSVProcessor.tsx":"37","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/AnalysedData/ResetAnalysedData.tsx":"38","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/AnalyseFileData.tsx":"39","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/AnalysedData/CreateAnalysedData.tsx":"40","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/DataAnalysis/AnalyseOrdinalData.tsx":"41","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/DataAnalysis/AnalyseIntervalData.tsx":"42","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/DataAnalysis/AnalyseNominalData.tsx":"43","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/AnalysedData/GetAnalysedData.tsx":"44","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LineSeriesPage.tsx":"45","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LineSeriesOptions.tsx":"46","/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/plotting/Line/ILineSeriesOptions.tsx":"47","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Line/LineSeriesOptions/GetLineSeriesOptions.tsx":"48","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Line/LineSeriesOptions/CreateLineSeriesOptions.tsx":"49","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Line/LineSeriesOptions/ResetLineSeriesOptions.tsx":"50","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Bar/BarSeriesPage.tsx":"51","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Bar/BarSeriesVis.tsx":"52","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Bar/BarSeriesOptions.tsx":"53","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/Visualisations/LineSeries/LineSeriesOptionsHandler.tsx":"54","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/Visualisations/LineSeries/LineSeriesVisHandler.tsx":"55","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/Visualisations/LineSeries/LineSeriesOptionsValidate.tsx":"56","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/Visualisations/LineSeries/LineSeriesCreateVis.tsx":"57","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Line/CurrentLineVisual/ResetCurrentLineVisual.tsx":"58","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Line/CurrentLineVisual/CreateCurrentLineVisual.tsx":"59","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/Visualisations/BarSeries/BarSeriesOptionsHandler.tsx":"60","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/Visualisations/BarSeries/BarSeriesVisHandler.tsx":"61","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/Visualisations/BarSeries/BarSeriesOptionsValidate.tsx":"62","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Bar/BarSeriesOptions/CreateBarSeriesOptions.tsx":"63","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Bar/BarSeriesOptions/GetBarSeriesOptions.tsx":"64","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Bar/BarSeriesOptions/ResetBarSeriesOptions.tsx":"65","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/Visualisations/BarSeries/BarSeriesCreateVis.tsx":"66","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Bar/CurrentBarVisualisation/ResetCurrentBarVisual.tsx":"67","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Bar/CurrentBarVisualisation/CreateCurrentBarVisual.tsx":"68","/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/plotting/Bar/IBarSeriesOptions.tsx":"69"},{"size":1620,"mtime":1612255136147,"results":"70","hashOfConfig":"71"},{"size":233,"mtime":1612255136138,"results":"72","hashOfConfig":"71"},{"size":5854,"mtime":1608309343000,"results":"73","hashOfConfig":"71"},{"size":215,"mtime":1612255136154,"results":"74","hashOfConfig":"71"},{"size":4901,"mtime":1612372109882,"results":"75","hashOfConfig":"71"},{"size":2904,"mtime":1612899292205,"results":"76","hashOfConfig":"71"},{"size":497,"mtime":1612372109868,"results":"77","hashOfConfig":"71"},{"size":1303,"mtime":1612273192820,"results":"78","hashOfConfig":"71"},{"size":601,"mtime":1612255136156,"results":"79","hashOfConfig":"71"},{"size":966,"mtime":1612255136163,"results":"80","hashOfConfig":"71"},{"size":614,"mtime":1612255136158,"results":"81","hashOfConfig":"71"},{"size":962,"mtime":1612255136157,"results":"82","hashOfConfig":"71"},{"size":550,"mtime":1612255136163,"results":"83","hashOfConfig":"71"},{"size":5127,"mtime":1612859683759,"results":"84","hashOfConfig":"71"},{"size":2272,"mtime":1612255136159,"results":"85","hashOfConfig":"71"},{"size":1086,"mtime":1612255136160,"results":"86","hashOfConfig":"71"},{"size":1103,"mtime":1612255136167,"results":"87","hashOfConfig":"71"},{"size":607,"mtime":1612255136167,"results":"88","hashOfConfig":"71"},{"size":264,"mtime":1608733523669,"results":"89","hashOfConfig":"71"},{"size":258,"mtime":1608733523665,"results":"90","hashOfConfig":"71"},{"size":3334,"mtime":1612372749822,"results":"91","hashOfConfig":"71"},{"size":1117,"mtime":1611748260584,"results":"92","hashOfConfig":"71"},{"size":799,"mtime":1609946360577,"results":"93","hashOfConfig":"71"},{"size":769,"mtime":1609946360428,"results":"94","hashOfConfig":"71"},{"size":9968,"mtime":1612255136156,"results":"95","hashOfConfig":"71"},{"size":5337,"mtime":1612255136157,"results":"96","hashOfConfig":"71"},{"size":1195,"mtime":1611747236593,"results":"97","hashOfConfig":"71"},{"size":2623,"mtime":1612371870954,"results":"98","hashOfConfig":"71"},{"size":9176,"mtime":1612255136157,"results":"99","hashOfConfig":"71"},{"size":1202,"mtime":1612255136166,"results":"100","hashOfConfig":"71"},{"size":168,"mtime":1612255136153,"results":"101","hashOfConfig":"71"},{"size":496,"mtime":1612255136148,"results":"102","hashOfConfig":"71"},{"size":2479,"mtime":1612255136141,"results":"103","hashOfConfig":"71"},{"size":264,"mtime":1612255136146,"results":"104","hashOfConfig":"71"},{"size":791,"mtime":1612255136145,"results":"105","hashOfConfig":"71"},{"size":765,"mtime":1612255136145,"results":"106","hashOfConfig":"71"},{"size":1801,"mtime":1612255136140,"results":"107","hashOfConfig":"71"},{"size":258,"mtime":1612255136147,"results":"108","hashOfConfig":"71"},{"size":4017,"mtime":1612255136138,"results":"109","hashOfConfig":"71"},{"size":1715,"mtime":1612945641293,"results":"110","hashOfConfig":"71"},{"size":2782,"mtime":1612255136140,"results":"111","hashOfConfig":"71"},{"size":2929,"mtime":1612255136139,"results":"112","hashOfConfig":"71"},{"size":3233,"mtime":1612255136141,"results":"113","hashOfConfig":"71"},{"size":1584,"mtime":1612255136143,"results":"114","hashOfConfig":"71"},{"size":839,"mtime":1612859469544,"results":"115","hashOfConfig":"71"},{"size":16791,"mtime":1612772869063,"results":"116","hashOfConfig":"71"},{"size":650,"mtime":1612371779851,"results":"117","hashOfConfig":"71"},{"size":314,"mtime":1612373053019,"results":"118","hashOfConfig":"71"},{"size":533,"mtime":1612372969803,"results":"119","hashOfConfig":"71"},{"size":279,"mtime":1612373079052,"results":"120","hashOfConfig":"71"},{"size":829,"mtime":1612859860514,"results":"121","hashOfConfig":"71"},{"size":2759,"mtime":1612951526391,"results":"122","hashOfConfig":"71"},{"size":14588,"mtime":1612951598030,"results":"123","hashOfConfig":"71"},{"size":1873,"mtime":1612774015931,"results":"124","hashOfConfig":"71"},{"size":748,"mtime":1612772869048,"results":"125","hashOfConfig":"71"},{"size":2080,"mtime":1612530771885,"results":"126","hashOfConfig":"71"},{"size":2598,"mtime":1612602390419,"results":"127","hashOfConfig":"71"},{"size":290,"mtime":1612436498513,"results":"128","hashOfConfig":"71"},{"size":562,"mtime":1612436498537,"results":"129","hashOfConfig":"71"},{"size":1832,"mtime":1612774383446,"results":"130","hashOfConfig":"71"},{"size":739,"mtime":1612774365741,"results":"131","hashOfConfig":"71"},{"size":1798,"mtime":1612530771894,"results":"132","hashOfConfig":"71"},{"size":519,"mtime":1612373027242,"results":"133","hashOfConfig":"71"},{"size":307,"mtime":1612373137000,"results":"134","hashOfConfig":"71"},{"size":275,"mtime":1612373178437,"results":"135","hashOfConfig":"71"},{"size":3606,"mtime":1612772574198,"results":"136","hashOfConfig":"71"},{"size":287,"mtime":1612428305963,"results":"137","hashOfConfig":"71"},{"size":553,"mtime":1612436075066,"results":"138","hashOfConfig":"71"},{"size":288,"mtime":1612898795789,"results":"139","hashOfConfig":"71"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},"1llt5h",{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"142"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"153"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"153"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"153"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"153"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"153"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"153"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"153"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"153"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"153"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"153"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"153"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},"/Users/aatikaseedat/Documents/data-visualiser/src/index.js",[],["293","294"],"/Users/aatikaseedat/Documents/data-visualiser/src/App.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/serviceWorker.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/store.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Reducers/ReduxReducer.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Navigation/UserNavigation.tsx",[],["295","296"],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/ReduxState.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Actions/ReducerActionTypes.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Navigation/TabPanel.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Settings/Settings.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Home/Home.js",["297"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core';\n\nimport ImportFilesComponent from '../ImportFileHandling/ImportFilesComponent';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    alignItemsAndJustifyContent: {\n        width: '100%',\n        height: '100%',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: 'pink',\n    },\n}));\n\nexport default function Home() {\n    return (\n        <main id={'home-page'}>\n            <ImportFilesComponent />\n        </main>\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Export/Export.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/PlottingPage.tsx",["298"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport PlottingNav from './PlottingNav';\nimport { Box } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        '& > *': {\n            margin: theme.spacing(1),\n            width: theme.spacing(16),\n            height: theme.spacing(16),\n        },\n    },\n}));\n\nexport default function PlottingPage() {\n    return (\n        <Box>\n            <PlottingNav />\n        </Box>\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/PlottingNav.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Import/ImportedFileStats.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Notifications/AlertNotification.tsx",["299","300"],"import React from 'react';\nimport Alert from '@material-ui/lab/Alert';\n\nimport { INotification } from '../../../Interfaces/Notification/INotification';\nimport { Collapse, IconButton, Snackbar } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nexport default function AlertNotification(notifications: INotification) {\n    const [open, setOpen] = React.useState(true);\n    return (\n        <Snackbar\n            open={open}\n            id=\"notification-alert\"\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n            }}\n            // severity={notifications.alert}\n            action={\n                <IconButton\n                    aria-label=\"close\"\n                    color=\"inherit\"\n                    size=\"small\"\n                    onClick={() => {\n                        setOpen(false);\n                    }}\n                >\n                    <CloseIcon fontSize=\"inherit\" />\n                </IconButton>\n            }\n            message={notifications.notification}\n        />\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/ImportFilesHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/NotificationsHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/ResetImportedData.tsx",[],["301","302"],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/ResetAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Actions/ReducerActions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/CreateAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/GetImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/CreateImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/ImportFilesComponent.tsx",["303","304","305","306","307","308"],"import React from 'react';\nimport {\n    Box,\n    Button,\n    Container,\n    Divider,\n    Grid,\n    IconButton,\n    makeStyles,\n    Paper,\n    Tooltip,\n    Dialog,\n    DialogContent,\n    ClickAwayListener,\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { DropzoneArea } from 'material-ui-dropzone';\n\nimport { AlertType } from '../../../Interfaces/Notification/INotification';\n\nimport { NotificationsHandler } from '../../../UIHandling/NotificationsHandler';\nimport { ImportFilesHandler } from '../../../UIHandling/ImportFilesHandler';\n\nimport AlertNotification from '../Notifications/AlertNotification';\nimport { IImportedFile } from '../../../Interfaces/import/IImportedFile';\n\nimport ImportedFileStats from './Import/ImportedFileStats';\nimport { IImportedFileStats } from '../../../Interfaces/import/IImportedFileStats';\nimport FileAnalysisComponent from './Analyse/FileAnalysisComponent';\nimport Slide from '@material-ui/core/Slide';\nimport FieldTypes from './Analyse/FieldTypes';\n\ninterface IState {\n    importedFiles: Array<File>;\n    submitButtonDisabled: boolean;\n    outcome: AlertType | undefined;\n    outcomeMessage: string;\n    errors: NotificationsHandler;\n    files: string;\n    fileType: string;\n    importedFileStats: IImportedFileStats;\n    fieldTypesDialogOpen: boolean;\n}\nexport default class ImportFilesComponent extends React.Component<{}, IState> {\n    private classes: any = makeStyles((theme) => ({\n        root: {\n            height: '100%',\n            width: '75%',\n        },\n        componentArea: {\n            height: '70%',\n            width: '75%',\n        },\n        container: {\n            width: '100%',\n        },\n        verticalLine: {\n            background: theme.palette.primary.light,\n            width: '2px',\n            margin: theme.spacing(7),\n        },\n        space: {\n            minWidth: '10%',\n        },\n        dialogPaper: {\n            width: '500px',\n            height: '700px',\n        },\n    }));\n    constructor(props: object) {\n        super(props);\n        this.state = {\n            importedFiles: [],\n            submitButtonDisabled: true,\n            outcome: undefined,\n            outcomeMessage: '',\n            errors: new NotificationsHandler(),\n            files: '',\n            fileType: '',\n            importedFileStats: {\n                fileType: '',\n                fileSize: '',\n                characterCount: undefined,\n            },\n            fieldTypesDialogOpen: false,\n        };\n    }\n    private static checkFileType(files: File[]): string {\n        const file = files[0];\n        return file.type;\n    }\n    private async addFiles(files: File[]) {\n        this.setState({ importedFiles: files });\n        if (files.length > 0) {\n            const allFiles = await files[0].text();\n            this.setState({\n                submitButtonDisabled: false,\n                files: allFiles,\n                fileType: ImportFilesComponent.checkFileType(files),\n                importedFileStats: {\n                    fileType: ImportFilesComponent.checkFileType(files),\n                    fileSize: (files[0].size / 1000).toString(),\n                    characterCount: allFiles.length,\n                },\n            });\n        } else {\n            this.setState({\n                submitButtonDisabled: true,\n            });\n        }\n    }\n    private async uploadFiles() {\n        const file: IImportedFile = {\n            file: this.state.files,\n            fileType: this.state.fileType,\n        };\n        const files = new ImportFilesHandler(file);\n        const errors: NotificationsHandler = files.validate();\n        if (errors.isEmpty()) {\n            try {\n                this.setState({\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Files successfully uploaded',\n                    fieldTypesDialogOpen: true,\n                });\n            } catch (e) {\n                this.setState({\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            this.setState({ errors });\n        }\n    }\n    private resetFiles() {\n        const file: IImportedFile = {\n            file: this.state.files,\n            fileType: this.state.fileType,\n        };\n        const files = new ImportFilesHandler(file);\n        files.resetImportedData();\n        this.setState({\n            importedFiles: [],\n            submitButtonDisabled: true,\n            outcome: undefined,\n            outcomeMessage: '',\n            errors: new NotificationsHandler(),\n            files: '',\n            fileType: '',\n            importedFileStats: {\n                fileType: '',\n                fileSize: '',\n                characterCount: undefined,\n            },\n        });\n    }\n    public render() {\n        return (\n            <main>\n                <Dialog\n                    open={this.state.fieldTypesDialogOpen}\n                    classes={{ paper: this.classes.dialogPaper }}\n                    onBackdropClick={() => {\n                        this.setState({ fieldTypesDialogOpen: false });\n                    }}\n                >\n                    <Box\n                        display=\"flex\"\n                        justifyContent=\"center\"\n                        flexDirection=\"column\"\n                        alignItems=\"center\"\n                        className={this.classes.root}\n                        id={'import-file-component'}\n                        my={15}\n                        mx={15}\n                    >\n                        <FieldTypes />\n                    </Box>\n                </Dialog>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    className={this.classes.root}\n                    id={'import-file-component'}\n                    my={15}\n                    mx={15}\n                >\n                    <Box style={{ height: '50%', width: '50%' }} my={15} id={'alert-area'}>\n                        {this.state.outcome && (\n                            <AlertNotification alert={this.state.outcome} notification={this.state.outcomeMessage} />\n                        )}\n                        {!this.state.errors.isEmpty() && (\n                            <AlertNotification\n                                alert={AlertType.FAILED}\n                                notification={`Error(s): ${this.state.errors.notification()}`}\n                            />\n                        )}\n                    </Box>\n                    <Box\n                        display=\"flex\"\n                        flexDirection=\"row\"\n                        justifyContent=\"center\"\n                        alignItems=\"flex-start\"\n                        className={this.classes.componentArea}\n                    >\n                        <Box id=\"drop-zone-area\" mx={15} my={15}>\n                            <Tooltip title=\"Delete Imported File from system\">\n                                <IconButton\n                                    color=\"primary\"\n                                    style={{ marginRight: 10, borderRadius: '5em' }}\n                                    id=\"delete-import-button\"\n                                    disabled={this.state.submitButtonDisabled}\n                                    onClick={() => {\n                                        this.resetFiles();\n                                    }}\n                                >\n                                    <DeleteIcon />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"View and edit the field types\">\n                                <Button\n                                    style={{ marginRight: 10, borderRadius: '5em' }}\n                                    id=\"field-types-button\"\n                                    color=\"primary\"\n                                    disabled={this.state.submitButtonDisabled}\n                                    onClick={() => {\n                                        this.setState({\n                                            fieldTypesDialogOpen: true,\n                                        });\n                                    }}\n                                >\n                                    Field Types\n                                </Button>\n                            </Tooltip>\n                            <DropzoneArea\n                                showPreviews={true}\n                                onChange={async (files) => {\n                                    await this.addFiles(files);\n                                    await this.uploadFiles();\n                                }}\n                                showPreviewsInDropzone={false}\n                                useChipsForPreview\n                                previewGridProps={{ container: { spacing: 1, direction: 'row' } }}\n                                previewChipProps={{ classes: { root: this.classes.previewChip } }}\n                                previewText=\"Selected files\"\n                                showAlerts={false}\n                                // clearOnUnmount={true}\n                                acceptedFiles={['text/csv']}\n                                filesLimit={1}\n                            />\n\n                            <ImportedFileStats {...this.state.importedFileStats} />\n                        </Box>\n                        <Box mx={15} my={15}>\n                            <Divider orientation=\"vertical\" flexItem className={this.classes.verticalLine} />\n                            <FileAnalysisComponent />\n                        </Box>\n                    </Box>\n                </Box>\n            </main>\n        );\n    }\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Analyse/FileAnalysisComponent.tsx",["309","310","311","312","313","314","315"],"import React from 'react';\nimport clsx from 'clsx';\nimport { Box, CssBaseline, Typography, CircularProgress, Chip, Grid, Paper } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ReactJson from 'react-json-view';\nimport { Title } from '@material-ui/icons';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        height: '100%',\n        margin: theme.spacing(2),\n        padding: theme.spacing(2),\n    },\n    chips: {\n        backgroundColor: theme.palette.secondary.main,\n        margin: theme.spacing(1),\n        textColor: theme.palette.secondary.contrastText,\n    },\n    statDescription: {\n        margin: theme.spacing(1),\n        textAlign: 'left',\n        color: theme.palette.text.primary,\n    },\n    donutChart: {\n        margin: theme.spacing(2),\n    },\n    exampleObject: {\n        textColor: theme.palette.text.primary,\n    },\n    boxSize: {\n        maxWidth: '300px',\n    },\n    depositContext: {\n        flex: 1,\n    },\n    paper2: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n    },\n    fixedHeight: {\n        height: 140,\n    },\n}));\nfunction getExampleObject(intervalDataObjects: Array<object>): Object {\n    if (intervalDataObjects.length === 0) {\n        return {};\n    }\n    const [firstObject] = intervalDataObjects;\n    const objectToReturn: Object = {};\n    for (const [key, value] of Object.entries(firstObject)) {\n        // @ts-ignore\n        objectToReturn[key] = value;\n    }\n    return objectToReturn;\n}\nfunction FileAnalysisComponent(props: any) {\n    const classes = useStyles();\n    const data = [\n        { fieldType: 'Interval', count: props.intervalFields.length },\n        { fieldType: 'Nominal', count: props.nominalFields.length },\n        { fieldType: 'Ordinal', count: props.ordinalFields.length },\n        { fieldType: 'Binary', count: 0 },\n        { fieldType: 'Unary', count: 0 },\n        { fieldType: 'Ignored', count: 0 },\n    ];\n    const fixedHeightPaper = clsx(classes.paper2, classes.fixedHeight);\n\n    return (\n        <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"flex-start\"\n            alignItems=\"flex-start\"\n            id=\"file-analysis\"\n        >\n            <Box id=\"title\">\n                <Typography component=\"h2\" variant=\"h4\" gutterBottom>\n                    File Analysis\n                </Typography>\n            </Box>\n\n            <Box my={15} id=\"field-types-metrics\" display=\"flex\" flexDirection=\"row\" className={classes.boxSize}>\n                <Box display=\"flex\" flexDirection=\"column\" id=\"total-fields\">\n                    <Typography>Total Fields</Typography>\n                    <Typography component=\"p\" variant=\"h4\">\n                        {props.dataFields.length}\n                    </Typography>\n                </Box>\n                <Box display=\"flex\" flexDirection=\"column\" id=\"interval-fields\">\n                    <Typography>Interval Fields</Typography>\n                    <Typography component=\"p\" variant=\"h4\">\n                        {props.intervalFields.length}\n                    </Typography>\n                </Box>\n                <Box display=\"flex\" flexDirection=\"column\" id=\"nominal-fields\">\n                    <Typography>Nominal Fields</Typography>\n                    <Typography component=\"p\" variant=\"h4\">\n                        {props.nominalFields.length}\n                    </Typography>\n                </Box>\n                <Box display=\"flex\" flexDirection=\"column\" id=\"ordinal-fields\">\n                    <Typography>Ordinal Fields</Typography>\n                    <Typography component=\"p\" variant=\"h4\">\n                        {props.ordinalFields.length}\n                    </Typography>\n                </Box>\n            </Box>\n            <Box id=\"all-fields\" className={classes.boxSize} my={15}>\n                <Typography className={classes.statDescription}>All Data fields:</Typography>\n                {props.dataFields.map((fields: string) => (\n                    <Chip className={classes.chips} label={fields} id={fields + '-chip'} />\n                ))}\n            </Box>\n            <Box id=\"example-object\" className={classes.boxSize} my={15}>\n                <Typography className={classes.statDescription}>Example Data Object:</Typography>\n                <Box id={'json-object'}>\n                    <ReactJson\n                        src={getExampleObject(props.dataObjects)}\n                        theme=\"summerfruit:inverted\"\n                        displayDataTypes={false}\n                        displayObjectSize={false}\n                    />\n                </Box>\n            </Box>\n        </Box>\n    );\n}\n\nconst mapStateToProps = (state: any) => ({\n    intervalFields: state.analysedData.intervalFields,\n    intervalDataObjects: state.analysedData.intervalDataObjects,\n    nominalFields: state.analysedData.nominalFields,\n    nominalDataObjects: state.analysedData.nominalDataObjects,\n    ordinalFields: state.analysedData.ordinalFields,\n    ordinalDataObjects: state.analysedData.ordinalDataObjects,\n    dataFields: state.importedData.dataFields,\n    dataObjects: state.importedData.dataObjects,\n});\nexport default connect(mapStateToProps, {})(FileAnalysisComponent);\n","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/GetAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LineSeriesVis.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Analyse/FieldTypes.tsx",["316","317","318","319","320","321","322","323"],"import React from 'react';\nimport {\n    Box,\n    CssBaseline,\n    Typography,\n    CircularProgress,\n    Chip,\n    Grid,\n    ListItem,\n    Select,\n    FormControl,\n    Table,\n    Paper,\n    TableHead,\n    TableCell,\n    TableRow,\n    LinearProgress,\n    Button,\n    TableBody,\n    InputLabel,\n} from '@material-ui/core';\nimport { LinearProgressProps } from '@material-ui/core/LinearProgress';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FieldTypes } from '../../../../Interfaces/Analyse/IAnalysedFileData';\nimport { TableContainer } from '@material-ui/core';\nimport { AnalyseFileHandler } from '../../../../UIHandling/AnalyseFileHandler';\nimport { AlertType } from '../../../../Interfaces/Notification/INotification';\nimport { NotificationsHandler } from '../../../../UIHandling/NotificationsHandler';\nimport AlertNotification from '../../Notifications/AlertNotification';\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        height: '100%',\n        margin: theme.spacing(2),\n        padding: theme.spacing(2),\n    },\n    chips: {\n        backgroundColor: theme.palette.secondary.main,\n        margin: theme.spacing(1),\n        textColor: theme.palette.secondary.contrastText,\n    },\n    statDescription: {\n        margin: theme.spacing(1),\n        textAlign: 'left',\n        color: theme.palette.text.primary,\n    },\n    donutChart: {\n        margin: theme.spacing(2),\n    },\n    exampleObject: {\n        textColor: theme.palette.text.primary,\n    },\n    boxSize: {\n        maxWidth: '500px',\n    },\n    table: {\n        minWidth: 350,\n    },\n    dialogPaper: {\n        width: '500px',\n        height: '700px',\n    },\n    textColor: {\n        color: theme.palette.text.primary,\n    },\n}));\nfunction LinearProgressWithLabel(progProps: LinearProgressProps & { value: number }) {\n    return (\n        <Box display=\"flex\" alignItems=\"center\">\n            <Box width=\"100%\" mr={1}>\n                <LinearProgress variant=\"determinate\" {...progProps} />\n            </Box>\n            <Box minWidth={35}>\n                <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(progProps.value)}%`}</Typography>\n            </Box>\n        </Box>\n    );\n}\nconst fields: Array<object> = [];\nfunction FileTypes(props: any) {\n    const classes = useStyles();\n    const [submitIsDisabled, setSubmitIsDisabled] = React.useState(true);\n    const [notifications, setNotifications] = React.useState<{\n        outcome: AlertType | undefined;\n        outcomeMessage: string;\n        errors: NotificationsHandler;\n    }>({\n        outcome: undefined,\n        outcomeMessage: '',\n        errors: new NotificationsHandler(),\n    });\n    function addField(fieldToAdd: { field: string; fieldType: FieldTypes }) {\n        if (!fields.includes(fieldToAdd)) {\n            for (var objIndex = 0; objIndex < fields.length; objIndex += 1) {\n                const values = Object.values(fields[objIndex]);\n                if (values[0] === fieldToAdd.field) {\n                    fields[objIndex] = fieldToAdd;\n                    return;\n                }\n            }\n            fields.push(fieldToAdd);\n            enableSubmit();\n        }\n    }\n    function enableSubmit() {\n        if (fields.length === props.dataFields.length) {\n            setSubmitIsDisabled(false);\n            return;\n        }\n    }\n    function analyseFile() {\n        const analyseFileHandler = new AnalyseFileHandler(fields);\n        const errors = analyseFileHandler.validateAnalysedData();\n        if (errors.isEmpty()) {\n            try {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Field Types Validated',\n                });\n            } catch (e) {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            setNotifications({\n                ...notifications,\n                errors: errors,\n            });\n        }\n    }\n    return (\n        <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"flex-start\" alignItems=\"flex-start\" id=\"field-types\">\n            <Box style={{ height: '50%', width: '50%' }} id={'alert-area'}>\n                {notifications.outcome && (\n                    <AlertNotification alert={notifications.outcome} notification={notifications.outcomeMessage} />\n                )}\n                {!notifications.errors.isEmpty() && (\n                    <AlertNotification\n                        alert={AlertType.FAILED}\n                        notification={`Error(s): ${notifications.errors.notification()}`}\n                    />\n                )}\n            </Box>\n            <Box\n                id=\"all-fields\"\n                display=\"flex\"\n                flexDirection=\"column\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                mx={10}\n                my={10}\n            >\n                <Typography id={'field-types-title'} className={classes.statDescription}>\n                    Select Field Types:\n                </Typography>\n                <TableContainer component={Paper} id={'fields-table'}>\n                    <Table className={classes.table}>\n                        <TableHead>\n                            <TableRow id={'table-headings'}>\n                                <TableCell id={'field-name-cell'}>Field Name</TableCell>\n                                <TableCell align={'center'} id={'field-type-cell'}>\n                                    Field Type\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {props.dataFields.map((value: string) => (\n                                <TableRow key={value + '-row'} id={value + '-table-row'}>\n                                    <TableCell component=\"th\" scope=\"row\" id={value + '-field-cell'}>\n                                        {value}\n                                    </TableCell>\n                                    <TableCell id={value + '-select-cell'}>\n                                        <Select\n                                            id={value + '-select'}\n                                            style={{ minWidth: 150 }}\n                                            name={value + '-select'}\n                                            onChange={(event) => {\n                                                const fieldToAdd: any = {\n                                                    field: value,\n                                                    fieldType: event.target.value as FieldTypes,\n                                                };\n                                                addField(fieldToAdd);\n                                            }}\n                                        >\n                                            <option id={'test'} value={FieldTypes.INTERVAL}>\n                                                Interval\n                                            </option>\n                                            <option value={FieldTypes.NOMINAL}>Nominal</option>\n                                            <option value={FieldTypes.ORDINAL}>Ordinal</option>\n                                            <option value={FieldTypes.BINARY}>Binary</option>\n                                            <option value={FieldTypes.UNARY}>Unary</option>\n                                            <option value={FieldTypes.TIME}>Time</option>\n                                            <option value={FieldTypes.DATE}>Date</option>\n                                            <option value={FieldTypes.IGNORE}>Ignore</option>\n                                        </Select>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <Box\n                    id=\"all-fields\"\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                    mx={10}\n                    my={10}\n                >\n                    <Button\n                        disabled={submitIsDisabled}\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        id={'analyse-file-button'}\n                        style={{ marginRight: 10, borderRadius: '5em' }}\n                        onClick={analyseFile}\n                    >\n                        Analyse File\n                    </Button>\n                </Box>\n            </Box>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    dataFields: state.importedData.dataFields,\n    dataObjects: state.importedData.dataObjects,\n});\nexport default connect(mapStateToProps, {})(FileTypes);\n","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/AnalyseFileHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/Notification/INotification.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/Analyse/IAnalysedFileData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ImportFile/ImportFileData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/ImportedData/ResetImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/ImportedData/GetImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/ImportedData/CreateImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ImportFile/FileProcessors/CSVProcessor.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/AnalysedData/ResetAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/AnalyseFileData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/AnalysedData/CreateAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/DataAnalysis/AnalyseOrdinalData.tsx",["324"],"import { store } from '../../../ReduxStore/store';\n\nexport class AnalyseOrdinalData {\n    private readonly dataObjects = store.getState().importedData.dataObjects;\n    private ordinalFields: any;\n    private ordinalDataObjects: Array<object> = [];\n    constructor(ordinalFields: Array<string>) {\n        this.ordinalFields = ordinalFields;\n    }\n    public validateOrdinalData(): Array<object> {\n        if (this.ordinalFields.length > 0) {\n            for (const field of this.ordinalFields) {\n                this.ordinalDataObjects.push(this.getFieldObject(field));\n            }\n        }\n        return this.ordinalDataObjects;\n    }\n    private getFieldObject(field: string): object {\n        const fieldArray: Array<object> = [];\n        const objectToReturn: object = {};\n        const allOrdinalValuesForField = this.getOrdinalValuesForField(field);\n        for (const value of allOrdinalValuesForField) {\n            fieldArray.push(this.createOrdinalValueObject(value, allOrdinalValuesForField));\n        }\n        // @ts-ignore\n        objectToReturn[field] = fieldArray;\n        return objectToReturn;\n    }\n    private getOrdinalValuesForField(field: string): Array<string> {\n        const ordinalValuesForField: Array<string> = [];\n        for (var objectIndex = 0; objectIndex < this.dataObjects.length; objectIndex += 1) {\n            const object: object = this.dataObjects[objectIndex];\n            for (const [key, value] of Object.entries(object)) {\n                if (key === field && !ordinalValuesForField.includes(value)) {\n                    ordinalValuesForField.push(value);\n                }\n            }\n        }\n        return ordinalValuesForField;\n    }\n    private getOrdinalValueCount(ordinalValue: string): number {\n        let count = 0;\n        for (var objectIndex = 0; objectIndex < this.dataObjects.length; objectIndex += 1) {\n            const object = this.dataObjects[objectIndex];\n            for (const [key, value] of Object.entries(object)) {\n                if (value === ordinalValue) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n    private getOrdinalValuePercent(ordinalValue: string, allValues: Array<string>): number {\n        let total = 0;\n        for (const value of allValues) {\n            total += this.getOrdinalValueCount(value);\n        }\n        const count = this.getOrdinalValueCount(ordinalValue);\n        return Math.round((count / total) * 100);\n    }\n    private createOrdinalValueObject(ordinalValue: string, allValues: Array<string>): object {\n        return {\n            name: ordinalValue,\n            count: this.getOrdinalValueCount(ordinalValue),\n            percent: this.getOrdinalValuePercent(ordinalValue, allValues),\n        };\n    }\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/DataAnalysis/AnalyseIntervalData.tsx",["325","326"],"import { NotificationsHandler } from '../../../UIHandling/NotificationsHandler';\nimport CreateAnalysedData from '../../ReduxStoreHandling/AnalysedData/CreateAnalysedData';\nimport { store } from '../../../ReduxStore/store';\n\nexport class AnalyseIntervalData {\n    private readonly dataObjects = store.getState().importedData.dataObjects;\n    private intervalFields: any;\n    private intervalDataObjects: Array<object> = [];\n    constructor(intervalFields: Array<string>) {\n        this.intervalFields = intervalFields;\n    }\n    public validateIntervalData(): Array<object> {\n        if (this.intervalFields.length > 0) {\n            this.analyseIntervalData();\n            this.validateObjectsLength();\n            return this.getAnalysedIntervalData().intervalDataObjects;\n        }\n        return [];\n    }\n    private validateObjectsLength() {\n        for (var objIndex = 0; objIndex < this.intervalDataObjects.length; objIndex += 1) {\n            const currentObject = this.intervalDataObjects[objIndex];\n            const currentObjectLength = Object.keys(currentObject).length;\n            if (currentObjectLength !== this.intervalFields.length) {\n                this.removeInvalidObject(objIndex);\n            }\n        }\n    }\n    private removeInvalidObject(index: number) {\n        this.intervalDataObjects.splice(index, 1);\n    }\n\n    private analyseIntervalData() {\n        for (var objIndex = 0; objIndex < this.dataObjects.length; objIndex += 1) {\n            const objectToAdd: Object = {};\n            // eslint-disable-next-line prefer-destructuring\n            const currentObject: Object = this.dataObjects[objIndex];\n            for (const [key, value] of Object.entries(currentObject)) {\n                if (this.intervalFields.includes(key)) {\n                    if (AnalyseIntervalData.dataIsFloat(value) && AnalyseIntervalData.dataIsNotIPAddress(value)) {\n                        // @ts-ignore\n                        objectToAdd[key] = AnalyseIntervalData.convertDataToFloat(value);\n                    }\n                }\n            }\n            this.intervalDataObjects.push(objectToAdd);\n        }\n    }\n    private static dataIsNotIPAddress(data: string): boolean {\n        let decimalPointCount = 0;\n        for (var i = 0; i < data.length; i += 1) {\n            if (data[i] === '.') {\n                decimalPointCount += 1;\n            }\n        }\n        return decimalPointCount <= 1;\n    }\n    private static dataIsFloat(data: string): boolean {\n        const dataAsFloat = parseFloat(data);\n        return !isNaN(dataAsFloat);\n    }\n    private static convertDataToFloat(data: string): number {\n        return parseFloat(data);\n    }\n    private getAnalysedIntervalData(): { intervalFields: Array<string>; intervalDataObjects: Array<object> } {\n        return {\n            intervalFields: this.intervalFields,\n            intervalDataObjects: this.intervalDataObjects,\n        };\n    }\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/DataAnalysis/AnalyseNominalData.tsx",["327"],"import { store } from '../../../ReduxStore/store';\n\nexport class AnalyseNominalData {\n    private readonly dataObjects = store.getState().importedData.dataObjects;\n    private nominalFields: any;\n    private nominalDataObjects: Array<object> = [];\n    constructor(nominalFields: Array<string>) {\n        this.nominalFields = nominalFields;\n    }\n    public validateNominalData(): Array<object> {\n        if (this.nominalFields.length > 0) {\n            for (const field of this.nominalFields) {\n                this.nominalDataObjects.push(this.getFieldObject(field));\n            }\n        }\n        return this.nominalDataObjects;\n    }\n    private getFieldObject(field: string): object {\n        const fieldArray: Array<object> = [];\n        const objectToReturn: object = {};\n        const nominalValues = this.getAllNominalValues(field);\n        for (const value of nominalValues) {\n            fieldArray.push(this.createNominalObject(value, nominalValues));\n        }\n        // @ts-ignore\n        objectToReturn[field] = fieldArray;\n        return objectToReturn;\n    }\n    private getAllNominalValues(field: string): Array<string> {\n        const nominalValues: Array<string> = [];\n        for (var objectIndex = 0; objectIndex < this.dataObjects.length; objectIndex += 1) {\n            const object = this.dataObjects[objectIndex];\n            for (var fieldIndex = 0; fieldIndex < this.nominalFields.length; fieldIndex += 1) {\n                if (field === this.nominalFields[fieldIndex]) {\n                    const nominalValueToAdd = this.getNominalValue(object, field);\n                    if (nominalValueToAdd !== '') {\n                        if (!nominalValues.includes(nominalValueToAdd)) {\n                            nominalValues.push(nominalValueToAdd);\n                        }\n                    }\n                }\n            }\n        }\n\n        return nominalValues;\n    }\n    private getNominalValue(object: object, field: string): string {\n        for (const [key, value] of Object.entries(object)) {\n            if (key === field) {\n                return value;\n            }\n        }\n        return '';\n    }\n    private getNominalValueCount(nominalValue: string): number {\n        let count = 0;\n        for (var objectIndex = 0; objectIndex < this.dataObjects.length; objectIndex += 1) {\n            const object = this.dataObjects[objectIndex];\n            for (const [key, value] of Object.entries(object)) {\n                if (value === nominalValue) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n    private getNominalValuePercent(nominalValue: string, allValues: Array<string>): number {\n        let total = 0;\n        for (const value of allValues) {\n            total += this.getNominalValueCount(value);\n        }\n        const count = this.getNominalValueCount(nominalValue);\n        return Math.round((count / total) * 100);\n    }\n    private createNominalObject(nominalValue: string, allValues: Array<string>): object {\n        return {\n            name: nominalValue,\n            count: this.getNominalValueCount(nominalValue),\n            percent: this.getNominalValuePercent(nominalValue, allValues),\n        };\n    }\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/AnalysedData/GetAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LineSeriesPage.tsx",["328"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Grid } from '@material-ui/core';\nimport LineSeriesVis from './LineSeriesVis';\nimport LineSeriesOptions from './LineSeriesOptions';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n}));\n\nexport default function LineSeriesPage() {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"row\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'line-plotting-page'}\n        >\n            <Box mx={10}>\n                <LineSeriesVis />\n            </Box>\n            <Box mx={10}>\n                <LineSeriesOptions />\n            </Box>\n        </Box>\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LineSeriesOptions.tsx",["329","330"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ColorPicker } from 'material-ui-color';\nimport {\n    Box,\n    Button,\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    Paper,\n    Select,\n    TextField,\n    Typography,\n} from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { CurveType, ILineSeriesOptions, LineStyle } from '../../../../Interfaces/plotting/Line/ILineSeriesOptions';\n\nimport { AlertType } from '../../../../Interfaces/Notification/INotification';\nimport { NotificationsHandler } from '../../../../UIHandling/NotificationsHandler';\nimport AlertNotification from '../../Notifications/AlertNotification';\nimport { LineSeriesOptionsHandler } from '../../../../UIHandling/Visualisations/LineSeries/LineSeriesOptionsHandler';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    root: {\n        // width: '100%',\n    },\n    textColor: {\n        color: theme.palette.text.primary,\n    },\n    helperTextColor: {\n        color: theme.palette.text.disabled,\n    },\n}));\nfunction LineSeriesOptions(props: any) {\n    const classes = useStyles();\n    const [options, setOptions] = React.useState<{\n        xValue: string;\n        yValue: string;\n        height: number;\n        width: number;\n        stroke: string;\n        opacity: number;\n        curveType: CurveType | null;\n        lineStyle: LineStyle | undefined;\n        lineWidth: number;\n    }>({\n        xValue: '',\n        yValue: '',\n        height: 800,\n        width: 800,\n        stroke: '#000000',\n        opacity: 1,\n        curveType: null,\n        lineStyle: undefined,\n        lineWidth: 2,\n    });\n    const [notifications, setNotifications] = React.useState<{\n        outcome: AlertType | undefined;\n        outcomeMessage: string;\n        errors: NotificationsHandler;\n    }>({\n        outcome: undefined,\n        outcomeMessage: '',\n        errors: new NotificationsHandler(),\n    });\n    function submitIsEnabled(): boolean {\n        return !(options.xValue.length !== 0 && options.yValue.length !== 0 && xValAndYValIsEqual());\n    }\n    function xValAndYValIsEqual(): boolean {\n        return options.xValue !== options.yValue;\n    }\n    function validateDataOptions() {\n        const optionsToValidate: ILineSeriesOptions = {\n            xValue: options.xValue,\n            yValue: options.yValue,\n            height: options.height,\n            width: options.width,\n            stroke: options.stroke,\n            opacity: options.opacity,\n            curveType: options.curveType,\n            lineStyle: options.lineStyle,\n            lineWidth: options.lineWidth,\n        };\n        const validateOptions = new LineSeriesOptionsHandler(optionsToValidate);\n        const errors: NotificationsHandler = validateOptions.validateOptions();\n        if (errors.isEmpty()) {\n            try {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Options Validated',\n                });\n            } catch (e) {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            setNotifications({\n                ...notifications,\n                errors: errors,\n            });\n        }\n    }\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'line-plotting-options'}\n            mx={15}\n        >\n            <Box style={{ height: '50%', width: '50%' }} id={'alert-area'}>\n                {notifications.outcome && (\n                    <AlertNotification alert={notifications.outcome} notification={notifications.outcomeMessage} />\n                )}\n                {!notifications.errors.isEmpty() && (\n                    <AlertNotification\n                        alert={AlertType.FAILED}\n                        notification={`Error(s): ${notifications.errors.notification()}`}\n                    />\n                )}\n            </Box>\n            <div className={classes.paper}>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    className={classes.root}\n                    id={'line-plotting-options'}\n                    px={20}\n                    py={20}\n                >\n                    <Typography id={'line-plotting-title'}>Line Series Plotting Options</Typography>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\n                        <FormControl required style={{ minWidth: 200 }} id={'x-values-select'}>\n                            <InputLabel className={classes.textColor}>X Value</InputLabel>\n                            <Select\n                                id={'select-xValue'}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        xValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"X Values\"\n                                renderValue={(value) => {\n                                    if (!xValAndYValIsEqual()) {\n                                        return `⚠️  - ${value}`;\n                                    }\n                                    return `${value}`;\n                                }}\n                            >\n                                {props.intervalFields.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on X-Axis</FormHelperText>\n                        </FormControl>\n                        <Box mx={5} />\n                        <FormControl required style={{ minWidth: 200 }} id={'y-values-select'}>\n                            <InputLabel className={classes.textColor}>Y Value</InputLabel>\n                            <Select\n                                renderValue={(value) => {\n                                    if (!xValAndYValIsEqual()) {\n                                        return `⚠️  - ${value}`;\n                                    }\n                                    return `${value}`;\n                                }}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        yValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"Y Values\"\n                            >\n                                {props.intervalFields.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on Y-Axis</FormHelperText>\n                        </FormControl>\n                    </Box>\n                    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'size-textfields'}>\n                        <TextField\n                            type={'number'}\n                            id=\"height-textfield\"\n                            label=\"Height\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    height: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"width-textfield\"\n                            label=\"Width\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    width: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'stroke-textfields'}>\n                        <FormControl style={{ minWidth: 200 }} id={'stroke-select'}>\n                            <InputLabel className={classes.textColor}>Colour</InputLabel>\n                            <Select\n                                value={options.lineStyle}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        stroke: event.target.value as string,\n                                    });\n                                }}\n                                name=\"stroke\"\n                            >\n                                <option value={'red'}>red</option>\n                                <option value={'green'}>green</option>\n                                <option value={'blue'}>blue</option>\n                                <option value={'purple'}>purple</option>\n                                <option value={'orange'}>orange</option>\n                                <option value={'black'}>black</option>\n                                <option value={'yellow'}>yellow</option>\n                                <option value={'brown'}>brown</option>\n                                <option value={'pink'}>pink</option>\n                                <option value={'turquoise'}>turquoise</option>\n                            </Select>\n                        </FormControl>\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"opacity-textfield\"\n                            label=\"Opacity\"\n                            variant=\"outlined\"\n                            helperText=\"Value must be between 0 and 1\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    opacity: parseFloat(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box>\n                        <FormControl style={{ minWidth: 400 }} id={'curve-select'}>\n                            <InputLabel className={classes.textColor}>Curve</InputLabel>\n                            <Select\n                                // value={options.curveType}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        curveType: event.target.value as CurveType,\n                                    });\n                                }}\n                                name=\"Curve Type\"\n                            >\n                                <option value={CurveType.curveLinear}>Linear</option>\n                                <option value={CurveType.curveLinearClosed}>Linear Closed</option>\n                                <option value={CurveType.curveMonotoneX}>Monotone X</option>\n                                <option value={CurveType.curveMonotoneY}>Monotone Y</option>\n                                <option value={CurveType.curveNatural}>Natural</option>\n                                <option value={CurveType.curveStep}>Step</option>\n                                <option value={CurveType.curveStepAfter}>Step After</option>\n                                <option value={CurveType.curveStepBefore}>Step Before</option>\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>\n                                Function used to create curve\n                            </FormHelperText>\n                        </FormControl>\n                    </Box>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'line-options'}>\n                        <FormControl style={{ minWidth: 200 }} id={'line-style-select'}>\n                            <InputLabel className={classes.textColor}>Line Style</InputLabel>\n                            <Select\n                                value={options.lineStyle}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        lineStyle: event.target.value as LineStyle,\n                                    });\n                                }}\n                                name=\"Y Values\"\n                            >\n                                <option value={LineStyle.SOLID}>Solid</option>\n                                <option value={LineStyle.DASHED}>Dashed</option>\n                            </Select>\n                        </FormControl>\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"line-width-textfield\"\n                            label=\"Line Width\"\n                            variant=\"outlined\"\n                            helperText=\"Default: 2px\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    lineWidth: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box id={'submit-button'}>\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            disabled={submitIsEnabled()}\n                            id={'options-submit-button'}\n                            onClick={validateDataOptions}\n                        >\n                            Submit\n                        </Button>\n                    </Box>\n                </Box>\n            </div>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    intervalFields: state.analysedData.intervalFields,\n});\nexport default connect(mapStateToProps, {})(LineSeriesOptions);\n","/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/plotting/Line/ILineSeriesOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Line/LineSeriesOptions/GetLineSeriesOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Line/LineSeriesOptions/CreateLineSeriesOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Line/LineSeriesOptions/ResetLineSeriesOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Bar/BarSeriesPage.tsx",["331"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Grid } from '@material-ui/core';\nimport BarSeriesOptions from './BarSeriesOptions';\nimport BarSeriesVis from './BarSeriesVis';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n}));\nexport default function BarSeriesPage() {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"row\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'bar-series-page'}\n        >\n            <Box mx={10}>\n                <BarSeriesVis />\n            </Box>\n            <Box mx={10}>\n                <BarSeriesOptions />\n            </Box>\n        </Box>\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Bar/BarSeriesVis.tsx",["332","333"],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Bar/BarSeriesOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/Visualisations/LineSeries/LineSeriesOptionsHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/Visualisations/LineSeries/LineSeriesVisHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/Visualisations/LineSeries/LineSeriesOptionsValidate.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/Visualisations/LineSeries/LineSeriesCreateVis.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Line/CurrentLineVisual/ResetCurrentLineVisual.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Line/CurrentLineVisual/CreateCurrentLineVisual.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/Visualisations/BarSeries/BarSeriesOptionsHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/Visualisations/BarSeries/BarSeriesVisHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/Visualisations/BarSeries/BarSeriesOptionsValidate.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Bar/BarSeriesOptions/CreateBarSeriesOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Bar/BarSeriesOptions/GetBarSeriesOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Bar/BarSeriesOptions/ResetBarSeriesOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/Visualisations/BarSeries/BarSeriesCreateVis.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Bar/CurrentBarVisualisation/ResetCurrentBarVisual.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Bar/CurrentBarVisualisation/CreateCurrentBarVisual.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/plotting/Bar/IBarSeriesOptions.tsx",[],{"ruleId":"334","replacedBy":"335"},{"ruleId":"336","replacedBy":"337"},{"ruleId":"334","replacedBy":"335"},{"ruleId":"336","replacedBy":"337"},{"ruleId":"338","severity":1,"message":"339","line":6,"column":7,"nodeType":"340","messageId":"341","endLine":6,"endColumn":16},{"ruleId":"342","severity":1,"message":"339","line":7,"column":7,"nodeType":"340","messageId":"341","endLine":7,"endColumn":16},{"ruleId":"342","severity":1,"message":"343","line":2,"column":8,"nodeType":"340","messageId":"341","endLine":2,"endColumn":13},{"ruleId":"342","severity":1,"message":"344","line":5,"column":10,"nodeType":"340","messageId":"341","endLine":5,"endColumn":18},{"ruleId":"334","replacedBy":"345"},{"ruleId":"336","replacedBy":"346"},{"ruleId":"342","severity":1,"message":"347","line":5,"column":5,"nodeType":"340","messageId":"341","endLine":5,"endColumn":14},{"ruleId":"342","severity":1,"message":"348","line":7,"column":5,"nodeType":"340","messageId":"341","endLine":7,"endColumn":9},{"ruleId":"342","severity":1,"message":"349","line":10,"column":5,"nodeType":"340","messageId":"341","endLine":10,"endColumn":10},{"ruleId":"342","severity":1,"message":"350","line":13,"column":5,"nodeType":"340","messageId":"341","endLine":13,"endColumn":18},{"ruleId":"342","severity":1,"message":"351","line":14,"column":5,"nodeType":"340","messageId":"341","endLine":14,"endColumn":22},{"ruleId":"342","severity":1,"message":"352","line":30,"column":8,"nodeType":"340","messageId":"341","endLine":30,"endColumn":13},{"ruleId":"342","severity":1,"message":"353","line":3,"column":15,"nodeType":"340","messageId":"341","endLine":3,"endColumn":26},{"ruleId":"342","severity":1,"message":"354","line":3,"column":40,"nodeType":"340","messageId":"341","endLine":3,"endColumn":56},{"ruleId":"342","severity":1,"message":"348","line":3,"column":64,"nodeType":"340","messageId":"341","endLine":3,"endColumn":68},{"ruleId":"342","severity":1,"message":"349","line":3,"column":70,"nodeType":"340","messageId":"341","endLine":3,"endColumn":75},{"ruleId":"342","severity":1,"message":"355","line":7,"column":10,"nodeType":"340","messageId":"341","endLine":7,"endColumn":15},{"ruleId":"342","severity":1,"message":"356","line":61,"column":11,"nodeType":"340","messageId":"341","endLine":61,"endColumn":15},{"ruleId":"342","severity":1,"message":"357","line":69,"column":11,"nodeType":"340","messageId":"341","endLine":69,"endColumn":27},{"ruleId":"342","severity":1,"message":"353","line":4,"column":5,"nodeType":"340","messageId":"341","endLine":4,"endColumn":16},{"ruleId":"342","severity":1,"message":"354","line":6,"column":5,"nodeType":"340","messageId":"341","endLine":6,"endColumn":21},{"ruleId":"342","severity":1,"message":"358","line":7,"column":5,"nodeType":"340","messageId":"341","endLine":7,"endColumn":9},{"ruleId":"342","severity":1,"message":"348","line":8,"column":5,"nodeType":"340","messageId":"341","endLine":8,"endColumn":9},{"ruleId":"342","severity":1,"message":"359","line":9,"column":5,"nodeType":"340","messageId":"341","endLine":9,"endColumn":13},{"ruleId":"342","severity":1,"message":"360","line":11,"column":5,"nodeType":"340","messageId":"341","endLine":11,"endColumn":16},{"ruleId":"342","severity":1,"message":"361","line":20,"column":5,"nodeType":"340","messageId":"341","endLine":20,"endColumn":15},{"ruleId":"342","severity":1,"message":"362","line":67,"column":10,"nodeType":"340","messageId":"341","endLine":67,"endColumn":33},{"ruleId":"342","severity":1,"message":"363","line":45,"column":25,"nodeType":"340","messageId":"341","endLine":45,"endColumn":28},{"ruleId":"342","severity":1,"message":"364","line":1,"column":10,"nodeType":"340","messageId":"341","endLine":1,"endColumn":30},{"ruleId":"342","severity":1,"message":"365","line":2,"column":8,"nodeType":"340","messageId":"341","endLine":2,"endColumn":26},{"ruleId":"342","severity":1,"message":"363","line":59,"column":25,"nodeType":"340","messageId":"341","endLine":59,"endColumn":28},{"ruleId":"342","severity":1,"message":"348","line":3,"column":15,"nodeType":"340","messageId":"341","endLine":3,"endColumn":19},{"ruleId":"342","severity":1,"message":"366","line":3,"column":10,"nodeType":"340","messageId":"341","endLine":3,"endColumn":21},{"ruleId":"342","severity":1,"message":"349","line":10,"column":5,"nodeType":"340","messageId":"341","endLine":10,"endColumn":10},{"ruleId":"342","severity":1,"message":"348","line":3,"column":15,"nodeType":"340","messageId":"341","endLine":3,"endColumn":19},{"ruleId":"342","severity":1,"message":"367","line":13,"column":5,"nodeType":"340","messageId":"341","endLine":13,"endColumn":16},{"ruleId":"342","severity":1,"message":"368","line":28,"column":23,"nodeType":"340","messageId":"341","endLine":28,"endColumn":35},"no-native-reassign",["369"],"no-negated-in-lhs",["370"],"no-unused-vars","'useStyles' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'Alert' is defined but never used.","'Collapse' is defined but never used.",["369"],["370"],"'Container' is defined but never used.","'Grid' is defined but never used.","'Paper' is defined but never used.","'DialogContent' is defined but never used.","'ClickAwayListener' is defined but never used.","'Slide' is defined but never used.","'CssBaseline' is defined but never used.","'CircularProgress' is defined but never used.","'Title' is defined but never used.","'data' is assigned a value but never used.","'fixedHeightPaper' is assigned a value but never used.","'Chip' is defined but never used.","'ListItem' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'LinearProgressWithLabel' is defined but never used.","'key' is assigned a value but never used.","'NotificationsHandler' is defined but never used.","'CreateAnalysedData' is defined but never used.","'ColorPicker' is defined but never used.","'LabelSeries' is defined but never used.","'setUseCanvas' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]