[{"/Users/aatikaseedat/Documents/data-visualiser/src/index.js":"1","/Users/aatikaseedat/Documents/data-visualiser/src/App.js":"2","/Users/aatikaseedat/Documents/data-visualiser/src/serviceWorker.js":"3","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/store.js":"4","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Reducers/ReduxReducer.js":"5","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Navigation/UserNavigation.tsx":"6","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/ReduxState.js":"7","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Actions/ReducerActionTypes.js":"8","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Navigation/TabPanel.js":"9","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Settings/Settings.js":"10","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Home/Home.js":"11","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Export/Export.js":"12","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/PlottingPage.tsx":"13","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/PlottingNav.tsx":"14","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Import/ImportedFileStats.tsx":"15","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Notifications/AlertNotification.tsx":"16","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/ImportFilesHandler.tsx":"17","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/NotificationsHandler.tsx":"18","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LinePlottingPage.tsx":"19","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/ResetImportedData.tsx":"20","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/ResetAnalysedData.tsx":"21","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LinePlottingOptions.tsx":"22","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Actions/ReducerActions.tsx":"23","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/CreateAnalysedData.tsx":"24","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/GetImportedData.tsx":"25","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/LinePlotOptionsHandler.tsx":"26","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/CreateImportedData.tsx":"27","/Users/aatikaseedat/Documents/data-visualiser/src/interfaces/plotting/ILinePlotOptions.tsx":"28","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/LinePlotOptions/ResetLinePlotOptions.tsx":"29","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/LinePlotOptions/CreateLinePlotOptions.tsx":"30","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/LinePlotOptions/GetLinePlotOptions.tsx":"31","/Users/aatikaseedat/Documents/data-visualiser/src/domain/LineSeriesVis/LineSeriesOptionsValidate.tsx":"32","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/ImportFilesComponent.tsx":"33","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Analyse/FileAnalysisComponent.tsx":"34","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/LineSeriesVisHandler.tsx":"35","/Users/aatikaseedat/Documents/data-visualiser/src/domain/LineSeriesVis/LineSeriesCreateVis.tsx":"36","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/GetAnalysedData.tsx":"37","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LineSeriesVis.tsx":"38","/Users/aatikaseedat/Documents/data-visualiser/src/interfaces/plotting/ILinePlotCreateVis.tsx":"39","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Analyse/FieldTypes.tsx":"40","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/AnalyseFileHandler.tsx":"41","/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/Notification/INotification.tsx":"42","/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/Analyse/IAnalysedFileData.tsx":"43","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ImportFile/ImportFileData.tsx":"44","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/ImportedData/ResetImportedData.tsx":"45","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/ImportedData/GetImportedData.tsx":"46","/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/plotting/ILinePlotOptions.tsx":"47","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/ImportedData/CreateImportedData.tsx":"48","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ImportFile/FileProcessors/CSVProcessor.tsx":"49","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/AnalysedData/ResetAnalysedData.tsx":"50","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/AnalyseFileData.tsx":"51","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/LinePlotOptions/CreateLinePlotOptions.tsx":"52","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/LinePlotOptions/ResetLinePlotOptions.tsx":"53","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/LinePlotOptions/GetLinePlotOptions.tsx":"54","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/LineSeriesVis/LineSeriesOptionsValidate.tsx":"55","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/AnalysedData/CreateAnalysedData.tsx":"56","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/LineSeriesVis/LineSeriesCreateVis.tsx":"57","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/DataAnalysis/AnalyseOrdinalData.tsx":"58","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/DataAnalysis/AnalyseIntervalData.tsx":"59","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/DataAnalysis/AnalyseNominalData.tsx":"60","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/AnalysedData/GetAnalysedData.tsx":"61","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/CurrentLineVisualisation/CreateCurrentLineVisualisation.tsx":"62","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/CurrentLineVisualisation/ResetCurrentLineVisualisation.tsx":"63"},{"size":1620,"mtime":1609579694144,"results":"64","hashOfConfig":"65"},{"size":233,"mtime":1609946572554,"results":"66","hashOfConfig":"65"},{"size":5854,"mtime":1608309343000,"results":"67","hashOfConfig":"65"},{"size":215,"mtime":1608735235191,"results":"68","hashOfConfig":"65"},{"size":4234,"mtime":1612254350658,"results":"69","hashOfConfig":"65"},{"size":2809,"mtime":1611132266338,"results":"70","hashOfConfig":"65"},{"size":436,"mtime":1612253807174,"results":"71","hashOfConfig":"65"},{"size":1069,"mtime":1612254350645,"results":"72","hashOfConfig":"65"},{"size":601,"mtime":1608732474371,"results":"73","hashOfConfig":"65"},{"size":966,"mtime":1608732749916,"results":"74","hashOfConfig":"65"},{"size":614,"mtime":1610558733032,"results":"75","hashOfConfig":"65"},{"size":962,"mtime":1608732474397,"results":"76","hashOfConfig":"65"},{"size":550,"mtime":1609327048703,"results":"77","hashOfConfig":"65"},{"size":5075,"mtime":1609748221737,"results":"78","hashOfConfig":"65"},{"size":2272,"mtime":1611919746841,"results":"79","hashOfConfig":"65"},{"size":1086,"mtime":1611919747048,"results":"80","hashOfConfig":"65"},{"size":1103,"mtime":1611919746936,"results":"81","hashOfConfig":"65"},{"size":607,"mtime":1610266600513,"results":"82","hashOfConfig":"65"},{"size":847,"mtime":1612254167403,"results":"83","hashOfConfig":"65"},{"size":264,"mtime":1608733523669,"results":"84","hashOfConfig":"65"},{"size":258,"mtime":1608733523665,"results":"85","hashOfConfig":"65"},{"size":16752,"mtime":1611919746828,"results":"86","hashOfConfig":"65"},{"size":2596,"mtime":1612254350621,"results":"87","hashOfConfig":"65"},{"size":1117,"mtime":1611748260584,"results":"88","hashOfConfig":"65"},{"size":799,"mtime":1609946360577,"results":"89","hashOfConfig":"65"},{"size":1722,"mtime":1612254567850,"results":"90","hashOfConfig":"65"},{"size":769,"mtime":1609946360428,"results":"91","hashOfConfig":"65"},{"size":648,"mtime":1610997885803,"results":"92","hashOfConfig":"65"},{"size":263,"mtime":1610027177763,"results":"93","hashOfConfig":"65"},{"size":498,"mtime":1610027217593,"results":"94","hashOfConfig":"65"},{"size":285,"mtime":1610027556180,"results":"95","hashOfConfig":"65"},{"size":2057,"mtime":1610872073188,"results":"96","hashOfConfig":"65"},{"size":9968,"mtime":1611919746870,"results":"97","hashOfConfig":"65"},{"size":5337,"mtime":1612189869764,"results":"98","hashOfConfig":"65"},{"size":746,"mtime":1612254567842,"results":"99","hashOfConfig":"65"},{"size":2598,"mtime":1611747776555,"results":"100","hashOfConfig":"65"},{"size":1195,"mtime":1611747236593,"results":"101","hashOfConfig":"65"},{"size":2618,"mtime":1612254167425,"results":"102","hashOfConfig":"65"},{"size":317,"mtime":1610874793490,"results":"103","hashOfConfig":"65"},{"size":9176,"mtime":1611919746786,"results":"104","hashOfConfig":"65"},{"size":1202,"mtime":1611919746837,"results":"105","hashOfConfig":"65"},{"size":168,"mtime":1610968410686,"results":"106","hashOfConfig":"65"},{"size":496,"mtime":1611922438981,"results":"107","hashOfConfig":"65"},{"size":2479,"mtime":1611919746762,"results":"108","hashOfConfig":"65"},{"size":264,"mtime":1608733523669,"results":"109","hashOfConfig":"65"},{"size":791,"mtime":1611919746855,"results":"110","hashOfConfig":"65"},{"size":648,"mtime":1610997885803,"results":"111","hashOfConfig":"65"},{"size":765,"mtime":1611919746880,"results":"112","hashOfConfig":"65"},{"size":1801,"mtime":1611919747002,"results":"113","hashOfConfig":"65"},{"size":258,"mtime":1608733523665,"results":"114","hashOfConfig":"65"},{"size":4017,"mtime":1611997730362,"results":"115","hashOfConfig":"65"},{"size":498,"mtime":1611919747034,"results":"116","hashOfConfig":"65"},{"size":263,"mtime":1610027177763,"results":"117","hashOfConfig":"65"},{"size":285,"mtime":1611919747007,"results":"118","hashOfConfig":"65"},{"size":2057,"mtime":1611919746818,"results":"119","hashOfConfig":"65"},{"size":1422,"mtime":1611927269710,"results":"120","hashOfConfig":"65"},{"size":2599,"mtime":1611919746791,"results":"121","hashOfConfig":"65"},{"size":2782,"mtime":1611995538381,"results":"122","hashOfConfig":"65"},{"size":2929,"mtime":1611833944379,"results":"123","hashOfConfig":"65"},{"size":3233,"mtime":1611995538385,"results":"124","hashOfConfig":"65"},{"size":1584,"mtime":1611927485358,"results":"125","hashOfConfig":"65"},{"size":538,"mtime":1612254476880,"results":"126","hashOfConfig":"65"},{"size":285,"mtime":1612254476865,"results":"127","hashOfConfig":"65"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},"1llt5h",{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"130"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"141"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"141"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"141"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"141"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"141"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"141"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"141"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"141"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"141"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"141"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"141"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},"/Users/aatikaseedat/Documents/data-visualiser/src/index.js",[],["269","270"],"/Users/aatikaseedat/Documents/data-visualiser/src/App.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/serviceWorker.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/store.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Reducers/ReduxReducer.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Navigation/UserNavigation.tsx",[],["271","272"],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/ReduxState.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Actions/ReducerActionTypes.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Navigation/TabPanel.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Settings/Settings.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Home/Home.js",["273"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core';\n\nimport ImportFilesComponent from '../ImportFileHandling/ImportFilesComponent';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    alignItemsAndJustifyContent: {\n        width: '100%',\n        height: '100%',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: 'pink',\n    },\n}));\n\nexport default function Home() {\n    return (\n        <main id={'home-page'}>\n            <ImportFilesComponent />\n        </main>\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Export/Export.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/PlottingPage.tsx",["274"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport PlottingNav from './PlottingNav';\nimport { Box } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        '& > *': {\n            margin: theme.spacing(1),\n            width: theme.spacing(16),\n            height: theme.spacing(16),\n        },\n    },\n}));\n\nexport default function PlottingPage() {\n    return (\n        <Box>\n            <PlottingNav />\n        </Box>\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/PlottingNav.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Import/ImportedFileStats.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Notifications/AlertNotification.tsx",["275","276"],"import React from 'react';\nimport Alert from '@material-ui/lab/Alert';\n\nimport { INotification } from '../../../Interfaces/Notification/INotification';\nimport { Collapse, IconButton, Snackbar } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nexport default function AlertNotification(notifications: INotification) {\n    const [open, setOpen] = React.useState(true);\n    return (\n        <Snackbar\n            open={open}\n            id=\"notification-alert\"\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n            }}\n            // severity={notifications.alert}\n            action={\n                <IconButton\n                    aria-label=\"close\"\n                    color=\"inherit\"\n                    size=\"small\"\n                    onClick={() => {\n                        setOpen(false);\n                    }}\n                >\n                    <CloseIcon fontSize=\"inherit\" />\n                </IconButton>\n            }\n            message={notifications.notification}\n        />\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/ImportFilesHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/NotificationsHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LinePlottingPage.tsx",["277"],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/ResetImportedData.tsx",[],["278","279"],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/ResetAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LinePlottingOptions.tsx",["280","281"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ColorPicker } from 'material-ui-color';\nimport {\n    Box,\n    Button,\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    Paper,\n    Select,\n    TextField,\n    Typography,\n} from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { CurveType, ILinePlotOptions, LineStyle } from '../../../../Interfaces/plotting/ILinePlotOptions';\n\nimport { AlertType } from '../../../../Interfaces/Notification/INotification';\nimport { NotificationsHandler } from '../../../../UIHandling/NotificationsHandler';\nimport AlertNotification from '../../Notifications/AlertNotification';\nimport { LinePlotOptionsHandler } from '../../../../UIHandling/LinePlotOptionsHandler';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    root: {\n        // width: '100%',\n    },\n    textColor: {\n        color: theme.palette.text.primary,\n    },\n    helperTextColor: {\n        color: theme.palette.text.disabled,\n    },\n}));\nfunction LinePlottingOptions(props: any) {\n    const classes = useStyles();\n    const [options, setOptions] = React.useState<{\n        xValue: string;\n        yValue: string;\n        height: number;\n        width: number;\n        stroke: string;\n        opacity: number;\n        curveType: CurveType | null;\n        lineStyle: LineStyle | undefined;\n        lineWidth: number;\n    }>({\n        xValue: '',\n        yValue: '',\n        height: 800,\n        width: 800,\n        stroke: '#000000',\n        opacity: 1,\n        curveType: null,\n        lineStyle: undefined,\n        lineWidth: 2,\n    });\n    const [notifications, setNotifications] = React.useState<{\n        outcome: AlertType | undefined;\n        outcomeMessage: string;\n        errors: NotificationsHandler;\n    }>({\n        outcome: undefined,\n        outcomeMessage: '',\n        errors: new NotificationsHandler(),\n    });\n    function submitIsEnabled(): boolean {\n        return !(options.xValue.length !== 0 && options.yValue.length !== 0 && xValAndYValIsEqual());\n    }\n    function xValAndYValIsEqual(): boolean {\n        return options.xValue !== options.yValue;\n    }\n    function validateDataOptions() {\n        const optionsToValidate: ILinePlotOptions = {\n            xValue: options.xValue,\n            yValue: options.yValue,\n            height: options.height,\n            width: options.width,\n            stroke: options.stroke,\n            opacity: options.opacity,\n            curveType: options.curveType,\n            lineStyle: options.lineStyle,\n            lineWidth: options.lineWidth,\n        };\n        const validateOptions = new LinePlotOptionsHandler(optionsToValidate);\n        const errors: NotificationsHandler = validateOptions.validateOptions();\n        if (errors.isEmpty()) {\n            try {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Options Validated',\n                });\n            } catch (e) {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            setNotifications({\n                ...notifications,\n                errors: errors,\n            });\n        }\n    }\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'line-plotting-options'}\n            mx={15}\n        >\n            <Box style={{ height: '50%', width: '50%' }} id={'alert-area'}>\n                {notifications.outcome && (\n                    <AlertNotification alert={notifications.outcome} notification={notifications.outcomeMessage} />\n                )}\n                {!notifications.errors.isEmpty() && (\n                    <AlertNotification\n                        alert={AlertType.FAILED}\n                        notification={`Error(s): ${notifications.errors.notification()}`}\n                    />\n                )}\n            </Box>\n            <div className={classes.paper}>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    className={classes.root}\n                    id={'line-plotting-options'}\n                    px={20}\n                    py={20}\n                >\n                    <Typography id={'line-plotting-title'}>Line Series Plotting Options</Typography>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\n                        <FormControl required style={{ minWidth: 200 }} id={'x-values-select'}>\n                            <InputLabel className={classes.textColor}>X Value</InputLabel>\n                            <Select\n                                id={'select-xValue'}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        xValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"X Values\"\n                                renderValue={(value) => {\n                                    if (!xValAndYValIsEqual()) {\n                                        return `⚠️  - ${value}`;\n                                    }\n                                    return `${value}`;\n                                }}\n                            >\n                                {props.intervalFields.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on X-Axis</FormHelperText>\n                        </FormControl>\n                        <Box mx={5} />\n                        <FormControl required style={{ minWidth: 200 }} id={'y-values-select'}>\n                            <InputLabel className={classes.textColor}>Y Value</InputLabel>\n                            <Select\n                                renderValue={(value) => {\n                                    if (!xValAndYValIsEqual()) {\n                                        return `⚠️  - ${value}`;\n                                    }\n                                    return `${value}`;\n                                }}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        yValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"Y Values\"\n                            >\n                                {props.intervalFields.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on Y-Axis</FormHelperText>\n                        </FormControl>\n                    </Box>\n                    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'size-textfields'}>\n                        <TextField\n                            type={'number'}\n                            id=\"height-textfield\"\n                            label=\"Height\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    height: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"width-textfield\"\n                            label=\"Width\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    width: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'stroke-textfields'}>\n                        <FormControl style={{ minWidth: 200 }} id={'stroke-select'}>\n                            <InputLabel className={classes.textColor}>Colour</InputLabel>\n                            <Select\n                                value={options.lineStyle}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        stroke: event.target.value as string,\n                                    });\n                                }}\n                                name=\"stroke\"\n                            >\n                                <option value={'red'}>red</option>\n                                <option value={'green'}>green</option>\n                                <option value={'blue'}>blue</option>\n                                <option value={'purple'}>purple</option>\n                                <option value={'orange'}>orange</option>\n                                <option value={'black'}>black</option>\n                                <option value={'yellow'}>yellow</option>\n                                <option value={'brown'}>brown</option>\n                                <option value={'pink'}>pink</option>\n                                <option value={'turquoise'}>turquoise</option>\n                            </Select>\n                        </FormControl>\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"opacity-textfield\"\n                            label=\"Opacity\"\n                            variant=\"outlined\"\n                            helperText=\"Value must be between 0 and 1\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    opacity: parseFloat(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box>\n                        <FormControl style={{ minWidth: 400 }} id={'curve-select'}>\n                            <InputLabel className={classes.textColor}>Curve</InputLabel>\n                            <Select\n                                // value={options.curveType}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        curveType: event.target.value as CurveType,\n                                    });\n                                }}\n                                name=\"Curve Type\"\n                            >\n                                <option value={CurveType.curveLinear}>Linear</option>\n                                <option value={CurveType.curveLinearClosed}>Linear Closed</option>\n                                <option value={CurveType.curveMonotoneX}>Monotone X</option>\n                                <option value={CurveType.curveMonotoneY}>Monotone Y</option>\n                                <option value={CurveType.curveNatural}>Natural</option>\n                                <option value={CurveType.curveStep}>Step</option>\n                                <option value={CurveType.curveStepAfter}>Step After</option>\n                                <option value={CurveType.curveStepBefore}>Step Before</option>\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>\n                                Function used to create curve\n                            </FormHelperText>\n                        </FormControl>\n                    </Box>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'line-options'}>\n                        <FormControl style={{ minWidth: 200 }} id={'line-style-select'}>\n                            <InputLabel className={classes.textColor}>Line Style</InputLabel>\n                            <Select\n                                value={options.lineStyle}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        lineStyle: event.target.value as LineStyle,\n                                    });\n                                }}\n                                name=\"Y Values\"\n                            >\n                                <option value={LineStyle.SOLID}>Solid</option>\n                                <option value={LineStyle.DASHED}>Dashed</option>\n                            </Select>\n                        </FormControl>\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"line-width-textfield\"\n                            label=\"Line Width\"\n                            variant=\"outlined\"\n                            helperText=\"Default: 2px\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    lineWidth: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box id={'submit-button'}>\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            disabled={submitIsEnabled()}\n                            id={'options-submit-button'}\n                            onClick={validateDataOptions}\n                        >\n                            Submit\n                        </Button>\n                    </Box>\n                </Box>\n            </div>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    intervalFields: state.analysedData.intervalFields,\n});\nexport default connect(mapStateToProps, {})(LinePlottingOptions);\n","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Actions/ReducerActions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/CreateAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/GetImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/LinePlotOptionsHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/CreateImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/interfaces/plotting/ILinePlotOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/LinePlotOptions/ResetLinePlotOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/LinePlotOptions/CreateLinePlotOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/LinePlotOptions/GetLinePlotOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/LineSeriesVis/LineSeriesOptionsValidate.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/ImportFilesComponent.tsx",["282","283","284","285","286","287"],"import React from 'react';\nimport {\n    Box,\n    Button,\n    Container,\n    Divider,\n    Grid,\n    IconButton,\n    makeStyles,\n    Paper,\n    Tooltip,\n    Dialog,\n    DialogContent,\n    ClickAwayListener,\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { DropzoneArea } from 'material-ui-dropzone';\n\nimport { AlertType } from '../../../Interfaces/Notification/INotification';\n\nimport { NotificationsHandler } from '../../../UIHandling/NotificationsHandler';\nimport { ImportFilesHandler } from '../../../UIHandling/ImportFilesHandler';\n\nimport AlertNotification from '../Notifications/AlertNotification';\nimport { IImportedFile } from '../../../Interfaces/import/IImportedFile';\n\nimport ImportedFileStats from './Import/ImportedFileStats';\nimport { IImportedFileStats } from '../../../Interfaces/import/IImportedFileStats';\nimport FileAnalysisComponent from './Analyse/FileAnalysisComponent';\nimport Slide from '@material-ui/core/Slide';\nimport FieldTypes from './Analyse/FieldTypes';\n\ninterface IState {\n    importedFiles: Array<File>;\n    submitButtonDisabled: boolean;\n    outcome: AlertType | undefined;\n    outcomeMessage: string;\n    errors: NotificationsHandler;\n    files: string;\n    fileType: string;\n    importedFileStats: IImportedFileStats;\n    fieldTypesDialogOpen: boolean;\n}\nexport default class ImportFilesComponent extends React.Component<{}, IState> {\n    private classes: any = makeStyles((theme) => ({\n        root: {\n            height: '100%',\n            width: '75%',\n        },\n        componentArea: {\n            height: '70%',\n            width: '75%',\n        },\n        container: {\n            width: '100%',\n        },\n        verticalLine: {\n            background: theme.palette.primary.light,\n            width: '2px',\n            margin: theme.spacing(7),\n        },\n        space: {\n            minWidth: '10%',\n        },\n        dialogPaper: {\n            width: '500px',\n            height: '700px',\n        },\n    }));\n    constructor(props: object) {\n        super(props);\n        this.state = {\n            importedFiles: [],\n            submitButtonDisabled: true,\n            outcome: undefined,\n            outcomeMessage: '',\n            errors: new NotificationsHandler(),\n            files: '',\n            fileType: '',\n            importedFileStats: {\n                fileType: '',\n                fileSize: '',\n                characterCount: undefined,\n            },\n            fieldTypesDialogOpen: false,\n        };\n    }\n    private static checkFileType(files: File[]): string {\n        const file = files[0];\n        return file.type;\n    }\n    private async addFiles(files: File[]) {\n        this.setState({ importedFiles: files });\n        if (files.length > 0) {\n            const allFiles = await files[0].text();\n            this.setState({\n                submitButtonDisabled: false,\n                files: allFiles,\n                fileType: ImportFilesComponent.checkFileType(files),\n                importedFileStats: {\n                    fileType: ImportFilesComponent.checkFileType(files),\n                    fileSize: (files[0].size / 1000).toString(),\n                    characterCount: allFiles.length,\n                },\n            });\n        } else {\n            this.setState({\n                submitButtonDisabled: true,\n            });\n        }\n    }\n    private async uploadFiles() {\n        const file: IImportedFile = {\n            file: this.state.files,\n            fileType: this.state.fileType,\n        };\n        const files = new ImportFilesHandler(file);\n        const errors: NotificationsHandler = files.validate();\n        if (errors.isEmpty()) {\n            try {\n                this.setState({\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Files successfully uploaded',\n                    fieldTypesDialogOpen: true,\n                });\n            } catch (e) {\n                this.setState({\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            this.setState({ errors });\n        }\n    }\n    private resetFiles() {\n        const file: IImportedFile = {\n            file: this.state.files,\n            fileType: this.state.fileType,\n        };\n        const files = new ImportFilesHandler(file);\n        files.resetImportedData();\n        this.setState({\n            importedFiles: [],\n            submitButtonDisabled: true,\n            outcome: undefined,\n            outcomeMessage: '',\n            errors: new NotificationsHandler(),\n            files: '',\n            fileType: '',\n            importedFileStats: {\n                fileType: '',\n                fileSize: '',\n                characterCount: undefined,\n            },\n        });\n    }\n    public render() {\n        return (\n            <main>\n                <Dialog\n                    open={this.state.fieldTypesDialogOpen}\n                    classes={{ paper: this.classes.dialogPaper }}\n                    onBackdropClick={() => {\n                        this.setState({ fieldTypesDialogOpen: false });\n                    }}\n                >\n                    <Box\n                        display=\"flex\"\n                        justifyContent=\"center\"\n                        flexDirection=\"column\"\n                        alignItems=\"center\"\n                        className={this.classes.root}\n                        id={'import-file-component'}\n                        my={15}\n                        mx={15}\n                    >\n                        <FieldTypes />\n                    </Box>\n                </Dialog>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    className={this.classes.root}\n                    id={'import-file-component'}\n                    my={15}\n                    mx={15}\n                >\n                    <Box style={{ height: '50%', width: '50%' }} my={15} id={'alert-area'}>\n                        {this.state.outcome && (\n                            <AlertNotification alert={this.state.outcome} notification={this.state.outcomeMessage} />\n                        )}\n                        {!this.state.errors.isEmpty() && (\n                            <AlertNotification\n                                alert={AlertType.FAILED}\n                                notification={`Error(s): ${this.state.errors.notification()}`}\n                            />\n                        )}\n                    </Box>\n                    <Box\n                        display=\"flex\"\n                        flexDirection=\"row\"\n                        justifyContent=\"center\"\n                        alignItems=\"flex-start\"\n                        className={this.classes.componentArea}\n                    >\n                        <Box id=\"drop-zone-area\" mx={15} my={15}>\n                            <Tooltip title=\"Delete Imported File from system\">\n                                <IconButton\n                                    color=\"primary\"\n                                    style={{ marginRight: 10, borderRadius: '5em' }}\n                                    id=\"delete-import-button\"\n                                    disabled={this.state.submitButtonDisabled}\n                                    onClick={() => {\n                                        this.resetFiles();\n                                    }}\n                                >\n                                    <DeleteIcon />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"View and edit the field types\">\n                                <Button\n                                    style={{ marginRight: 10, borderRadius: '5em' }}\n                                    id=\"field-types-button\"\n                                    color=\"primary\"\n                                    disabled={this.state.submitButtonDisabled}\n                                    onClick={() => {\n                                        this.setState({\n                                            fieldTypesDialogOpen: true,\n                                        });\n                                    }}\n                                >\n                                    Field Types\n                                </Button>\n                            </Tooltip>\n                            <DropzoneArea\n                                showPreviews={true}\n                                onChange={async (files) => {\n                                    await this.addFiles(files);\n                                    await this.uploadFiles();\n                                }}\n                                showPreviewsInDropzone={false}\n                                useChipsForPreview\n                                previewGridProps={{ container: { spacing: 1, direction: 'row' } }}\n                                previewChipProps={{ classes: { root: this.classes.previewChip } }}\n                                previewText=\"Selected files\"\n                                showAlerts={false}\n                                // clearOnUnmount={true}\n                                acceptedFiles={['text/csv']}\n                                filesLimit={1}\n                            />\n\n                            <ImportedFileStats {...this.state.importedFileStats} />\n                        </Box>\n                        <Box mx={15} my={15}>\n                            <Divider orientation=\"vertical\" flexItem className={this.classes.verticalLine} />\n                            <FileAnalysisComponent />\n                        </Box>\n                    </Box>\n                </Box>\n            </main>\n        );\n    }\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Analyse/FileAnalysisComponent.tsx",["288","289","290","291","292","293","294"],"import React from 'react';\nimport clsx from 'clsx';\nimport { Box, CssBaseline, Typography, CircularProgress, Chip, Grid, Paper } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ReactJson from 'react-json-view';\nimport { Title } from '@material-ui/icons';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        height: '100%',\n        margin: theme.spacing(2),\n        padding: theme.spacing(2),\n    },\n    chips: {\n        backgroundColor: theme.palette.secondary.main,\n        margin: theme.spacing(1),\n        textColor: theme.palette.secondary.contrastText,\n    },\n    statDescription: {\n        margin: theme.spacing(1),\n        textAlign: 'left',\n        color: theme.palette.text.primary,\n    },\n    donutChart: {\n        margin: theme.spacing(2),\n    },\n    exampleObject: {\n        textColor: theme.palette.text.primary,\n    },\n    boxSize: {\n        maxWidth: '300px',\n    },\n    depositContext: {\n        flex: 1,\n    },\n    paper2: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n    },\n    fixedHeight: {\n        height: 140,\n    },\n}));\nfunction getExampleObject(intervalDataObjects: Array<object>): Object {\n    if (intervalDataObjects.length === 0) {\n        return {};\n    }\n    const [firstObject] = intervalDataObjects;\n    const objectToReturn: Object = {};\n    for (const [key, value] of Object.entries(firstObject)) {\n        // @ts-ignore\n        objectToReturn[key] = value;\n    }\n    return objectToReturn;\n}\nfunction FileAnalysisComponent(props: any) {\n    const classes = useStyles();\n    const data = [\n        { fieldType: 'Interval', count: props.intervalFields.length },\n        { fieldType: 'Nominal', count: props.nominalFields.length },\n        { fieldType: 'Ordinal', count: props.ordinalFields.length },\n        { fieldType: 'Binary', count: 0 },\n        { fieldType: 'Unary', count: 0 },\n        { fieldType: 'Ignored', count: 0 },\n    ];\n    const fixedHeightPaper = clsx(classes.paper2, classes.fixedHeight);\n\n    return (\n        <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"flex-start\"\n            alignItems=\"flex-start\"\n            id=\"file-analysis\"\n        >\n            <Box id=\"title\">\n                <Typography component=\"h2\" variant=\"h4\" gutterBottom>\n                    File Analysis\n                </Typography>\n            </Box>\n\n            <Box my={15} id=\"field-types-metrics\" display=\"flex\" flexDirection=\"row\" className={classes.boxSize}>\n                <Box display=\"flex\" flexDirection=\"column\" id=\"total-fields\">\n                    <Typography>Total Fields</Typography>\n                    <Typography component=\"p\" variant=\"h4\">\n                        {props.dataFields.length}\n                    </Typography>\n                </Box>\n                <Box display=\"flex\" flexDirection=\"column\" id=\"interval-fields\">\n                    <Typography>Interval Fields</Typography>\n                    <Typography component=\"p\" variant=\"h4\">\n                        {props.intervalFields.length}\n                    </Typography>\n                </Box>\n                <Box display=\"flex\" flexDirection=\"column\" id=\"nominal-fields\">\n                    <Typography>Nominal Fields</Typography>\n                    <Typography component=\"p\" variant=\"h4\">\n                        {props.nominalFields.length}\n                    </Typography>\n                </Box>\n                <Box display=\"flex\" flexDirection=\"column\" id=\"ordinal-fields\">\n                    <Typography>Ordinal Fields</Typography>\n                    <Typography component=\"p\" variant=\"h4\">\n                        {props.ordinalFields.length}\n                    </Typography>\n                </Box>\n            </Box>\n            <Box id=\"all-fields\" className={classes.boxSize} my={15}>\n                <Typography className={classes.statDescription}>All Data fields:</Typography>\n                {props.dataFields.map((fields: string) => (\n                    <Chip className={classes.chips} label={fields} id={fields + '-chip'} />\n                ))}\n            </Box>\n            <Box id=\"example-object\" className={classes.boxSize} my={15}>\n                <Typography className={classes.statDescription}>Example Data Object:</Typography>\n                <Box id={'json-object'}>\n                    <ReactJson\n                        src={getExampleObject(props.dataObjects)}\n                        theme=\"summerfruit:inverted\"\n                        displayDataTypes={false}\n                        displayObjectSize={false}\n                    />\n                </Box>\n            </Box>\n        </Box>\n    );\n}\n\nconst mapStateToProps = (state: any) => ({\n    intervalFields: state.analysedData.intervalFields,\n    intervalDataObjects: state.analysedData.intervalDataObjects,\n    nominalFields: state.analysedData.nominalFields,\n    nominalDataObjects: state.analysedData.nominalDataObjects,\n    ordinalFields: state.analysedData.ordinalFields,\n    ordinalDataObjects: state.analysedData.ordinalDataObjects,\n    dataFields: state.importedData.dataFields,\n    dataObjects: state.importedData.dataObjects,\n});\nexport default connect(mapStateToProps, {})(FileAnalysisComponent);\n","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/LineSeriesVisHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/LineSeriesVis/LineSeriesCreateVis.tsx",["295"],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/GetAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Plotting/Line/LineSeriesVis.tsx",["296"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box } from '@material-ui/core';\nimport { HorizontalGridLines, LineSeries, VerticalGridLines, XAxis, XYPlot, YAxis } from 'react-vis';\nimport { connect } from 'react-redux';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    statDescription: {\n        margin: theme.spacing(1),\n        textAlign: 'left',\n        color: theme.palette.text.primary,\n    },\n}));\nconst data = [\n    { x: 0, y: 8 },\n    { x: 1, y: 5 },\n    { x: 2, y: 4 },\n    { x: 3, y: 9 },\n    { x: 4, y: 1 },\n    { x: 5, y: 7 },\n    { x: 6, y: 6 },\n    { x: 7, y: 3 },\n    { x: 8, y: 2 },\n    { x: 9, y: 0 },\n];\nfunction LineSeriesVis(props: any) {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            flexWrap=\"nowrap\"\n            overflow=\"auto\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'line-series'}\n            mx={15}\n        >\n            <Box>\n                <XYPlot\n                    id={'line-series-vis'}\n                    height={props.currentVisualisation.height}\n                    width={props.currentVisualisation.width}\n                    margin={{ left: 75 }}\n                >\n                    <HorizontalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <VerticalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <XAxis\n                        //@ts-ignore\n                        style={{ text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600, margin: 5, padding: 5 } }}\n                    />\n                    <YAxis\n                        // left={50}\n                        style={{ text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600, margin: 5, padding: 5 } }}\n                    />\n\n                    <LineSeries\n                        style={{\n                            strokeLinejoin: 'round',\n                            strokeWidth: props.currentVisualisation.lineWidth,\n                        }}\n                        strokeStyle={props.currentVisualisation.lineStyle}\n                        opacity={props.currentVisualisation.opacity}\n                        curve={props.currentVisualisation.curve}\n                        data={props.currentVisualisation.data}\n                        color={props.currentVisualisation.stroke}\n                    />\n                </XYPlot>\n            </Box>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    currentVisualisation: state.currentVisualisation,\n    linePlotOptions: state.linePlotOptions,\n});\nexport default connect(mapStateToProps, {})(LineSeriesVis);\n","/Users/aatikaseedat/Documents/data-visualiser/src/interfaces/plotting/ILinePlotCreateVis.tsx",["297"],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Analyse/FieldTypes.tsx",["298","299","300","301","302","303","304","305"],"import React from 'react';\nimport {\n    Box,\n    CssBaseline,\n    Typography,\n    CircularProgress,\n    Chip,\n    Grid,\n    ListItem,\n    Select,\n    FormControl,\n    Table,\n    Paper,\n    TableHead,\n    TableCell,\n    TableRow,\n    LinearProgress,\n    Button,\n    TableBody,\n    InputLabel,\n} from '@material-ui/core';\nimport { LinearProgressProps } from '@material-ui/core/LinearProgress';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FieldTypes } from '../../../../Interfaces/Analyse/IAnalysedFileData';\nimport { TableContainer } from '@material-ui/core';\nimport { AnalyseFileHandler } from '../../../../UIHandling/AnalyseFileHandler';\nimport { AlertType } from '../../../../Interfaces/Notification/INotification';\nimport { NotificationsHandler } from '../../../../UIHandling/NotificationsHandler';\nimport AlertNotification from '../../Notifications/AlertNotification';\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        height: '100%',\n        margin: theme.spacing(2),\n        padding: theme.spacing(2),\n    },\n    chips: {\n        backgroundColor: theme.palette.secondary.main,\n        margin: theme.spacing(1),\n        textColor: theme.palette.secondary.contrastText,\n    },\n    statDescription: {\n        margin: theme.spacing(1),\n        textAlign: 'left',\n        color: theme.palette.text.primary,\n    },\n    donutChart: {\n        margin: theme.spacing(2),\n    },\n    exampleObject: {\n        textColor: theme.palette.text.primary,\n    },\n    boxSize: {\n        maxWidth: '500px',\n    },\n    table: {\n        minWidth: 350,\n    },\n    dialogPaper: {\n        width: '500px',\n        height: '700px',\n    },\n    textColor: {\n        color: theme.palette.text.primary,\n    },\n}));\nfunction LinearProgressWithLabel(progProps: LinearProgressProps & { value: number }) {\n    return (\n        <Box display=\"flex\" alignItems=\"center\">\n            <Box width=\"100%\" mr={1}>\n                <LinearProgress variant=\"determinate\" {...progProps} />\n            </Box>\n            <Box minWidth={35}>\n                <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(progProps.value)}%`}</Typography>\n            </Box>\n        </Box>\n    );\n}\nconst fields: Array<object> = [];\nfunction FileTypes(props: any) {\n    const classes = useStyles();\n    const [submitIsDisabled, setSubmitIsDisabled] = React.useState(true);\n    const [notifications, setNotifications] = React.useState<{\n        outcome: AlertType | undefined;\n        outcomeMessage: string;\n        errors: NotificationsHandler;\n    }>({\n        outcome: undefined,\n        outcomeMessage: '',\n        errors: new NotificationsHandler(),\n    });\n    function addField(fieldToAdd: { field: string; fieldType: FieldTypes }) {\n        if (!fields.includes(fieldToAdd)) {\n            for (var objIndex = 0; objIndex < fields.length; objIndex += 1) {\n                const values = Object.values(fields[objIndex]);\n                if (values[0] === fieldToAdd.field) {\n                    fields[objIndex] = fieldToAdd;\n                    return;\n                }\n            }\n            fields.push(fieldToAdd);\n            enableSubmit();\n        }\n    }\n    function enableSubmit() {\n        if (fields.length === props.dataFields.length) {\n            setSubmitIsDisabled(false);\n            return;\n        }\n    }\n    function analyseFile() {\n        const analyseFileHandler = new AnalyseFileHandler(fields);\n        const errors = analyseFileHandler.validateAnalysedData();\n        if (errors.isEmpty()) {\n            try {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Field Types Validated',\n                });\n            } catch (e) {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            setNotifications({\n                ...notifications,\n                errors: errors,\n            });\n        }\n    }\n    return (\n        <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"flex-start\" alignItems=\"flex-start\" id=\"field-types\">\n            <Box style={{ height: '50%', width: '50%' }} id={'alert-area'}>\n                {notifications.outcome && (\n                    <AlertNotification alert={notifications.outcome} notification={notifications.outcomeMessage} />\n                )}\n                {!notifications.errors.isEmpty() && (\n                    <AlertNotification\n                        alert={AlertType.FAILED}\n                        notification={`Error(s): ${notifications.errors.notification()}`}\n                    />\n                )}\n            </Box>\n            <Box\n                id=\"all-fields\"\n                display=\"flex\"\n                flexDirection=\"column\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                mx={10}\n                my={10}\n            >\n                <Typography id={'field-types-title'} className={classes.statDescription}>\n                    Select Field Types:\n                </Typography>\n                <TableContainer component={Paper} id={'fields-table'}>\n                    <Table className={classes.table}>\n                        <TableHead>\n                            <TableRow id={'table-headings'}>\n                                <TableCell id={'field-name-cell'}>Field Name</TableCell>\n                                <TableCell align={'center'} id={'field-type-cell'}>\n                                    Field Type\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {props.dataFields.map((value: string) => (\n                                <TableRow key={value + '-row'} id={value + '-table-row'}>\n                                    <TableCell component=\"th\" scope=\"row\" id={value + '-field-cell'}>\n                                        {value}\n                                    </TableCell>\n                                    <TableCell id={value + '-select-cell'}>\n                                        <Select\n                                            id={value + '-select'}\n                                            style={{ minWidth: 150 }}\n                                            name={value + '-select'}\n                                            onChange={(event) => {\n                                                const fieldToAdd: any = {\n                                                    field: value,\n                                                    fieldType: event.target.value as FieldTypes,\n                                                };\n                                                addField(fieldToAdd);\n                                            }}\n                                        >\n                                            <option id={'test'} value={FieldTypes.INTERVAL}>\n                                                Interval\n                                            </option>\n                                            <option value={FieldTypes.NOMINAL}>Nominal</option>\n                                            <option value={FieldTypes.ORDINAL}>Ordinal</option>\n                                            <option value={FieldTypes.BINARY}>Binary</option>\n                                            <option value={FieldTypes.UNARY}>Unary</option>\n                                            <option value={FieldTypes.TIME}>Time</option>\n                                            <option value={FieldTypes.DATE}>Date</option>\n                                            <option value={FieldTypes.IGNORE}>Ignore</option>\n                                        </Select>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <Box\n                    id=\"all-fields\"\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                    mx={10}\n                    my={10}\n                >\n                    <Button\n                        disabled={submitIsDisabled}\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        id={'analyse-file-button'}\n                        style={{ marginRight: 10, borderRadius: '5em' }}\n                        onClick={analyseFile}\n                    >\n                        Analyse File\n                    </Button>\n                </Box>\n            </Box>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    dataFields: state.importedData.dataFields,\n    dataObjects: state.importedData.dataObjects,\n});\nexport default connect(mapStateToProps, {})(FileTypes);\n","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/AnalyseFileHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/Notification/INotification.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/Analyse/IAnalysedFileData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ImportFile/ImportFileData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/ImportedData/ResetImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/ImportedData/GetImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/plotting/ILinePlotOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/ImportedData/CreateImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ImportFile/FileProcessors/CSVProcessor.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/AnalysedData/ResetAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/AnalyseFileData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/LinePlotOptions/CreateLinePlotOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/LinePlotOptions/ResetLinePlotOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/LinePlotOptions/GetLinePlotOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/LineSeriesVis/LineSeriesOptionsValidate.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/AnalysedData/CreateAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/LineSeriesVis/LineSeriesCreateVis.tsx",["306"],"import GetLinePlotOptions from '../ReduxStoreHandling/LinePlotOptions/GetLinePlotOptions';\nimport GetAnalysedData from '../ReduxStoreHandling/AnalysedData/GetAnalysedData';\nimport { ILinePlotCreateVis } from '../../Interfaces/plotting/ILinePlotCreateVis';\nimport { IAnalysedFileData } from '../../Interfaces/Analyse/IAnalysedFileData';\nimport { CurveType } from '../../Interfaces/plotting/ILinePlotOptions';\n\nexport class LineSeriesCreateVis {\n    public createVis(): ILinePlotCreateVis {\n        const linePlotOptions = new GetLinePlotOptions().getLinePlotOptions();\n        if (Object.keys(linePlotOptions).length === 0) {\n            return this.createDefaultOptions();\n        }\n\n        return {\n            data: this.createDataArray(linePlotOptions.xValue, linePlotOptions.yValue),\n            height: linePlotOptions.height,\n            width: linePlotOptions.width,\n            stroke: linePlotOptions.stroke,\n            opacity: linePlotOptions.opacity,\n            curveType: linePlotOptions.curveType,\n            lineStyle: linePlotOptions.lineStyle,\n            lineWidth: linePlotOptions.lineWidth,\n        };\n    }\n    private createDefaultOptions(): ILinePlotCreateVis {\n        const { intervalFields } = this.getAnalysedData();\n        return {\n            data: this.createDataArray(intervalFields[0], intervalFields[1]),\n            height: 800,\n            width: 800,\n            stroke: '#000000',\n            opacity: 1,\n            curveType: null,\n            lineStyle: undefined,\n            lineWidth: 2,\n        };\n    }\n\n    private getAnalysedData(): IAnalysedFileData {\n        const getAnalysedData = new GetAnalysedData();\n        return getAnalysedData.getAnalysedData();\n    }\n    private createDataObject(xValue: string, yValue: string, currentObject: Object): Object {\n        let x: number = 0;\n        let y: number = 0;\n        for (const [key, value] of Object.entries(currentObject)) {\n            if (key === xValue) {\n                x = value;\n            } else if (key === yValue) {\n                y = value;\n                return { x, y };\n            }\n        }\n        return {};\n    }\n\n    private createDataArray(xValue: string, yValue: string): Array<Object> {\n        const { intervalDataObjects: dataObjectsArray } = this.getAnalysedData();\n        const data: Array<Object> = [];\n        for (let objIndex = 0; objIndex < dataObjectsArray.length; objIndex += 1) {\n            const dataObject = this.createDataObject(xValue, yValue, dataObjectsArray[objIndex]);\n            data.push(dataObject);\n        }\n        return data;\n    }\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/DataAnalysis/AnalyseOrdinalData.tsx",["307"],"import { store } from '../../../ReduxStore/store';\n\nexport class AnalyseOrdinalData {\n    private readonly dataObjects = store.getState().importedData.dataObjects;\n    private ordinalFields: any;\n    private ordinalDataObjects: Array<object> = [];\n    constructor(ordinalFields: Array<string>) {\n        this.ordinalFields = ordinalFields;\n    }\n    public validateOrdinalData(): Array<object> {\n        if (this.ordinalFields.length > 0) {\n            for (const field of this.ordinalFields) {\n                this.ordinalDataObjects.push(this.getFieldObject(field));\n            }\n        }\n        return this.ordinalDataObjects;\n    }\n    private getFieldObject(field: string): object {\n        const fieldArray: Array<object> = [];\n        const objectToReturn: object = {};\n        const allOrdinalValuesForField = this.getOrdinalValuesForField(field);\n        for (const value of allOrdinalValuesForField) {\n            fieldArray.push(this.createOrdinalValueObject(value, allOrdinalValuesForField));\n        }\n        // @ts-ignore\n        objectToReturn[field] = fieldArray;\n        return objectToReturn;\n    }\n    private getOrdinalValuesForField(field: string): Array<string> {\n        const ordinalValuesForField: Array<string> = [];\n        for (var objectIndex = 0; objectIndex < this.dataObjects.length; objectIndex += 1) {\n            const object: object = this.dataObjects[objectIndex];\n            for (const [key, value] of Object.entries(object)) {\n                if (key === field && !ordinalValuesForField.includes(value)) {\n                    ordinalValuesForField.push(value);\n                }\n            }\n        }\n        return ordinalValuesForField;\n    }\n    private getOrdinalValueCount(ordinalValue: string): number {\n        let count = 0;\n        for (var objectIndex = 0; objectIndex < this.dataObjects.length; objectIndex += 1) {\n            const object = this.dataObjects[objectIndex];\n            for (const [key, value] of Object.entries(object)) {\n                if (value === ordinalValue) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n    private getOrdinalValuePercent(ordinalValue: string, allValues: Array<string>): number {\n        let total = 0;\n        for (const value of allValues) {\n            total += this.getOrdinalValueCount(value);\n        }\n        const count = this.getOrdinalValueCount(ordinalValue);\n        return Math.round((count / total) * 100);\n    }\n    private createOrdinalValueObject(ordinalValue: string, allValues: Array<string>): object {\n        return {\n            name: ordinalValue,\n            count: this.getOrdinalValueCount(ordinalValue),\n            percent: this.getOrdinalValuePercent(ordinalValue, allValues),\n        };\n    }\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/DataAnalysis/AnalyseIntervalData.tsx",["308","309"],"import { NotificationsHandler } from '../../../UIHandling/NotificationsHandler';\nimport CreateAnalysedData from '../../ReduxStoreHandling/AnalysedData/CreateAnalysedData';\nimport { store } from '../../../ReduxStore/store';\n\nexport class AnalyseIntervalData {\n    private readonly dataObjects = store.getState().importedData.dataObjects;\n    private intervalFields: any;\n    private intervalDataObjects: Array<object> = [];\n    constructor(intervalFields: Array<string>) {\n        this.intervalFields = intervalFields;\n    }\n    public validateIntervalData(): Array<object> {\n        if (this.intervalFields.length > 0) {\n            this.analyseIntervalData();\n            this.validateObjectsLength();\n            return this.getAnalysedIntervalData().intervalDataObjects;\n        }\n        return [];\n    }\n    private validateObjectsLength() {\n        for (var objIndex = 0; objIndex < this.intervalDataObjects.length; objIndex += 1) {\n            const currentObject = this.intervalDataObjects[objIndex];\n            const currentObjectLength = Object.keys(currentObject).length;\n            if (currentObjectLength !== this.intervalFields.length) {\n                this.removeInvalidObject(objIndex);\n            }\n        }\n    }\n    private removeInvalidObject(index: number) {\n        this.intervalDataObjects.splice(index, 1);\n    }\n\n    private analyseIntervalData() {\n        for (var objIndex = 0; objIndex < this.dataObjects.length; objIndex += 1) {\n            const objectToAdd: Object = {};\n            // eslint-disable-next-line prefer-destructuring\n            const currentObject: Object = this.dataObjects[objIndex];\n            for (const [key, value] of Object.entries(currentObject)) {\n                if (this.intervalFields.includes(key)) {\n                    if (AnalyseIntervalData.dataIsFloat(value) && AnalyseIntervalData.dataIsNotIPAddress(value)) {\n                        // @ts-ignore\n                        objectToAdd[key] = AnalyseIntervalData.convertDataToFloat(value);\n                    }\n                }\n            }\n            this.intervalDataObjects.push(objectToAdd);\n        }\n    }\n    private static dataIsNotIPAddress(data: string): boolean {\n        let decimalPointCount = 0;\n        for (var i = 0; i < data.length; i += 1) {\n            if (data[i] === '.') {\n                decimalPointCount += 1;\n            }\n        }\n        return decimalPointCount <= 1;\n    }\n    private static dataIsFloat(data: string): boolean {\n        const dataAsFloat = parseFloat(data);\n        return !isNaN(dataAsFloat);\n    }\n    private static convertDataToFloat(data: string): number {\n        return parseFloat(data);\n    }\n    private getAnalysedIntervalData(): { intervalFields: Array<string>; intervalDataObjects: Array<object> } {\n        return {\n            intervalFields: this.intervalFields,\n            intervalDataObjects: this.intervalDataObjects,\n        };\n    }\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/DataAnalysis/AnalyseNominalData.tsx",["310"],"import { store } from '../../../ReduxStore/store';\n\nexport class AnalyseNominalData {\n    private readonly dataObjects = store.getState().importedData.dataObjects;\n    private nominalFields: any;\n    private nominalDataObjects: Array<object> = [];\n    constructor(nominalFields: Array<string>) {\n        this.nominalFields = nominalFields;\n    }\n    public validateNominalData(): Array<object> {\n        if (this.nominalFields.length > 0) {\n            for (const field of this.nominalFields) {\n                this.nominalDataObjects.push(this.getFieldObject(field));\n            }\n        }\n        return this.nominalDataObjects;\n    }\n    private getFieldObject(field: string): object {\n        const fieldArray: Array<object> = [];\n        const objectToReturn: object = {};\n        const nominalValues = this.getAllNominalValues(field);\n        for (const value of nominalValues) {\n            fieldArray.push(this.createNominalObject(value, nominalValues));\n        }\n        // @ts-ignore\n        objectToReturn[field] = fieldArray;\n        return objectToReturn;\n    }\n    private getAllNominalValues(field: string): Array<string> {\n        const nominalValues: Array<string> = [];\n        for (var objectIndex = 0; objectIndex < this.dataObjects.length; objectIndex += 1) {\n            const object = this.dataObjects[objectIndex];\n            for (var fieldIndex = 0; fieldIndex < this.nominalFields.length; fieldIndex += 1) {\n                if (field === this.nominalFields[fieldIndex]) {\n                    const nominalValueToAdd = this.getNominalValue(object, field);\n                    if (nominalValueToAdd !== '') {\n                        if (!nominalValues.includes(nominalValueToAdd)) {\n                            nominalValues.push(nominalValueToAdd);\n                        }\n                    }\n                }\n            }\n        }\n\n        return nominalValues;\n    }\n    private getNominalValue(object: object, field: string): string {\n        for (const [key, value] of Object.entries(object)) {\n            if (key === field) {\n                return value;\n            }\n        }\n        return '';\n    }\n    private getNominalValueCount(nominalValue: string): number {\n        let count = 0;\n        for (var objectIndex = 0; objectIndex < this.dataObjects.length; objectIndex += 1) {\n            const object = this.dataObjects[objectIndex];\n            for (const [key, value] of Object.entries(object)) {\n                if (value === nominalValue) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n    private getNominalValuePercent(nominalValue: string, allValues: Array<string>): number {\n        let total = 0;\n        for (const value of allValues) {\n            total += this.getNominalValueCount(value);\n        }\n        const count = this.getNominalValueCount(nominalValue);\n        return Math.round((count / total) * 100);\n    }\n    private createNominalObject(nominalValue: string, allValues: Array<string>): object {\n        return {\n            name: nominalValue,\n            count: this.getNominalValueCount(nominalValue),\n            percent: this.getNominalValuePercent(nominalValue, allValues),\n        };\n    }\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/AnalysedData/GetAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/CurrentLineVisualisation/CreateCurrentLineVisualisation.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/CurrentLineVisualisation/ResetCurrentLineVisualisation.tsx",[],{"ruleId":"311","replacedBy":"312"},{"ruleId":"313","replacedBy":"314"},{"ruleId":"311","replacedBy":"312"},{"ruleId":"313","replacedBy":"314"},{"ruleId":"315","severity":1,"message":"316","line":6,"column":7,"nodeType":"317","messageId":"318","endLine":6,"endColumn":16},{"ruleId":"319","severity":1,"message":"316","line":7,"column":7,"nodeType":"317","messageId":"318","endLine":7,"endColumn":16},{"ruleId":"319","severity":1,"message":"320","line":2,"column":8,"nodeType":"317","messageId":"318","endLine":2,"endColumn":13},{"ruleId":"319","severity":1,"message":"321","line":5,"column":10,"nodeType":"317","messageId":"318","endLine":5,"endColumn":18},{"ruleId":"319","severity":1,"message":"322","line":3,"column":15,"nodeType":"317","messageId":"318","endLine":3,"endColumn":19},{"ruleId":"311","replacedBy":"323"},{"ruleId":"313","replacedBy":"324"},{"ruleId":"319","severity":1,"message":"325","line":3,"column":10,"nodeType":"317","messageId":"318","endLine":3,"endColumn":21},{"ruleId":"319","severity":1,"message":"326","line":10,"column":5,"nodeType":"317","messageId":"318","endLine":10,"endColumn":10},{"ruleId":"319","severity":1,"message":"327","line":5,"column":5,"nodeType":"317","messageId":"318","endLine":5,"endColumn":14},{"ruleId":"319","severity":1,"message":"322","line":7,"column":5,"nodeType":"317","messageId":"318","endLine":7,"endColumn":9},{"ruleId":"319","severity":1,"message":"326","line":10,"column":5,"nodeType":"317","messageId":"318","endLine":10,"endColumn":10},{"ruleId":"319","severity":1,"message":"328","line":13,"column":5,"nodeType":"317","messageId":"318","endLine":13,"endColumn":18},{"ruleId":"319","severity":1,"message":"329","line":14,"column":5,"nodeType":"317","messageId":"318","endLine":14,"endColumn":22},{"ruleId":"319","severity":1,"message":"330","line":30,"column":8,"nodeType":"317","messageId":"318","endLine":30,"endColumn":13},{"ruleId":"319","severity":1,"message":"331","line":3,"column":15,"nodeType":"317","messageId":"318","endLine":3,"endColumn":26},{"ruleId":"319","severity":1,"message":"332","line":3,"column":40,"nodeType":"317","messageId":"318","endLine":3,"endColumn":56},{"ruleId":"319","severity":1,"message":"322","line":3,"column":64,"nodeType":"317","messageId":"318","endLine":3,"endColumn":68},{"ruleId":"319","severity":1,"message":"326","line":3,"column":70,"nodeType":"317","messageId":"318","endLine":3,"endColumn":75},{"ruleId":"319","severity":1,"message":"333","line":7,"column":10,"nodeType":"317","messageId":"318","endLine":7,"endColumn":15},{"ruleId":"319","severity":1,"message":"334","line":61,"column":11,"nodeType":"317","messageId":"318","endLine":61,"endColumn":15},{"ruleId":"319","severity":1,"message":"335","line":69,"column":11,"nodeType":"317","messageId":"318","endLine":69,"endColumn":27},{"ruleId":"319","severity":1,"message":"336","line":5,"column":10,"nodeType":"317","messageId":"318","endLine":5,"endColumn":19},{"ruleId":"319","severity":1,"message":"334","line":18,"column":7,"nodeType":"317","messageId":"318","endLine":18,"endColumn":11},{"ruleId":"319","severity":1,"message":"337","line":1,"column":21,"nodeType":"317","messageId":"318","endLine":1,"endColumn":37},{"ruleId":"319","severity":1,"message":"331","line":4,"column":5,"nodeType":"317","messageId":"318","endLine":4,"endColumn":16},{"ruleId":"319","severity":1,"message":"332","line":6,"column":5,"nodeType":"317","messageId":"318","endLine":6,"endColumn":21},{"ruleId":"319","severity":1,"message":"338","line":7,"column":5,"nodeType":"317","messageId":"318","endLine":7,"endColumn":9},{"ruleId":"319","severity":1,"message":"322","line":8,"column":5,"nodeType":"317","messageId":"318","endLine":8,"endColumn":9},{"ruleId":"319","severity":1,"message":"339","line":9,"column":5,"nodeType":"317","messageId":"318","endLine":9,"endColumn":13},{"ruleId":"319","severity":1,"message":"340","line":11,"column":5,"nodeType":"317","messageId":"318","endLine":11,"endColumn":16},{"ruleId":"319","severity":1,"message":"341","line":20,"column":5,"nodeType":"317","messageId":"318","endLine":20,"endColumn":15},{"ruleId":"319","severity":1,"message":"342","line":67,"column":10,"nodeType":"317","messageId":"318","endLine":67,"endColumn":33},{"ruleId":"319","severity":1,"message":"336","line":5,"column":10,"nodeType":"317","messageId":"318","endLine":5,"endColumn":19},{"ruleId":"319","severity":1,"message":"343","line":45,"column":25,"nodeType":"317","messageId":"318","endLine":45,"endColumn":28},{"ruleId":"319","severity":1,"message":"344","line":1,"column":10,"nodeType":"317","messageId":"318","endLine":1,"endColumn":30},{"ruleId":"319","severity":1,"message":"345","line":2,"column":8,"nodeType":"317","messageId":"318","endLine":2,"endColumn":26},{"ruleId":"319","severity":1,"message":"343","line":59,"column":25,"nodeType":"317","messageId":"318","endLine":59,"endColumn":28},"no-native-reassign",["346"],"no-negated-in-lhs",["347"],"no-unused-vars","'useStyles' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'Alert' is defined but never used.","'Collapse' is defined but never used.","'Grid' is defined but never used.",["346"],["347"],"'ColorPicker' is defined but never used.","'Paper' is defined but never used.","'Container' is defined but never used.","'DialogContent' is defined but never used.","'ClickAwayListener' is defined but never used.","'Slide' is defined but never used.","'CssBaseline' is defined but never used.","'CircularProgress' is defined but never used.","'Title' is defined but never used.","'data' is assigned a value but never used.","'fixedHeightPaper' is assigned a value but never used.","'CurveType' is defined but never used.","'ILinePlotOptions' is defined but never used.","'Chip' is defined but never used.","'ListItem' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'LinearProgressWithLabel' is defined but never used.","'key' is assigned a value but never used.","'NotificationsHandler' is defined but never used.","'CreateAnalysedData' is defined but never used.","no-global-assign","no-unsafe-negation"]