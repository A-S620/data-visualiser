[{"/Users/aatikaseedat/Documents/data-visualiser/src/index.js":"1","/Users/aatikaseedat/Documents/data-visualiser/src/App.js":"2","/Users/aatikaseedat/Documents/data-visualiser/src/serviceWorker.js":"3","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/store.js":"4","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Reducers/ReduxReducer.js":"5","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Navigation/UserNavigation.tsx":"6","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/ReduxState.js":"7","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Actions/ReducerActionTypes.js":"8","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Navigation/TabPanel.js":"9","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Home/Home.js":"10","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Export/Export.js":"11","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Import/ImportedFileStats.tsx":"12","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Notifications/AlertNotification.tsx":"13","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/ImportFilesHandler.tsx":"14","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/NotificationsHandler.tsx":"15","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/ResetImportedData.tsx":"16","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/ResetAnalysedData.tsx":"17","/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Actions/ReducerActions.tsx":"18","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/CreateAnalysedData.tsx":"19","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/GetImportedData.tsx":"20","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/CreateImportedData.tsx":"21","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/ImportFilesComponent.tsx":"22","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Analyse/FileAnalysisComponent.tsx":"23","/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/GetAnalysedData.tsx":"24","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Analyse/FieldTypes.tsx":"25","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/AnalyseFileHandler.tsx":"26","/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/Notification/INotification.tsx":"27","/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/Analyse/IAnalysedFileData.tsx":"28","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ImportFile/ImportFileData.tsx":"29","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/ImportedData/ResetImportedData.tsx":"30","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/ImportedData/GetImportedData.tsx":"31","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/ImportedData/CreateImportedData.tsx":"32","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ImportFile/FileProcessors/CSVProcessor.tsx":"33","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/AnalysedData/ResetAnalysedData.tsx":"34","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/AnalyseFileData.tsx":"35","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/AnalysedData/CreateAnalysedData.tsx":"36","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/DataAnalysis/AnalyseOrdinalData.tsx":"37","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/DataAnalysis/AnalyseIntervalData.tsx":"38","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/DataAnalysis/AnalyseNominalData.tsx":"39","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/AnalysedData/GetAnalysedData.tsx":"40","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Line/LineSeriesOptions/GetLineSeriesOptions.tsx":"41","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Line/LineSeriesOptions/CreateLineSeriesOptions.tsx":"42","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Line/LineSeriesOptions/ResetLineSeriesOptions.tsx":"43","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/Visualisations/LineSeries/LineSeriesOptionsHandler.tsx":"44","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/Visualisations/LineSeries/LineSeriesVisHandler.tsx":"45","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/Visualisations/LineSeries/LineSeriesOptionsValidate.tsx":"46","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/Visualisations/LineSeries/LineSeriesCreateVis.tsx":"47","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Line/CurrentLineVisual/ResetCurrentLineVisual.tsx":"48","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Line/CurrentLineVisual/CreateCurrentLineVisual.tsx":"49","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/Visualisations/BarSeries/BarSeriesOptionsHandler.tsx":"50","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/Visualisations/BarSeries/BarSeriesVisHandler.tsx":"51","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/Visualisations/BarSeries/BarSeriesOptionsValidate.tsx":"52","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Bar/BarSeriesOptions/CreateBarSeriesOptions.tsx":"53","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Bar/BarSeriesOptions/GetBarSeriesOptions.tsx":"54","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Bar/BarSeriesOptions/ResetBarSeriesOptions.tsx":"55","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/Visualisations/BarSeries/BarSeriesCreateVis.tsx":"56","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Bar/CurrentBarVisualisation/ResetCurrentBarVisual.tsx":"57","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Bar/CurrentBarVisualisation/CreateCurrentBarVisual.tsx":"58","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/Mark/MarkSeriesPage.tsx":"59","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/Bar/BarSeriesPage.tsx":"60","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/Line/LineSeriesPage.tsx":"61","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/Line/LineSeriesOptions.tsx":"62","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/Bar/BarSeriesVis.tsx":"63","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/Line/LineSeriesVis.tsx":"64","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/Bar/BarSeriesOptions.tsx":"65","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/Mark/MarkSeriesOptions.tsx":"66","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/Mark/MarkSeriesVis.tsx":"67","/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/Visualisations/Bar/IBarSeriesOptions.tsx":"68","/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/Visualisations/Line/ILineSeriesOptions.tsx":"69","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/Visualisations/MarkSeries/MarkSeriesOptionsHandler.tsx":"70","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/Visualisations/MarkSeries/MarkSeriesVisHandler.tsx":"71","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/Visualisations/MarkSeries/MarkSeriesOptionsValidate.tsx":"72","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Mark/MarkSeriesOptions/ResetMarkSeriesOptions.tsx":"73","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Mark/MarkSeriesOptions/GetMarkSeriesOptions.tsx":"74","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Mark/MarkSeriesOptions/CreateMarkSeriesOptions.tsx":"75","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/Visualisations/MarkSeries/MarkSeriesCreateVis.tsx":"76","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Mark/CurrentMarkVisualisation/CreateCurrentMarkVisual.tsx":"77","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Mark/CurrentMarkVisualisation/ResetCurrentMarkVisual.tsx":"78","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ViewAnalysedData/ViewAnalysedData.tsx":"79","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ViewImportedData/ViewImportedData.tsx":"80","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ViewImportedData/ImportedDataTable.tsx":"81","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ViewAnalysedData/IntervalDataTable.tsx":"82","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ViewAnalysedData/NominalDataTable.tsx":"83","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ViewAnalysedData/OrdinalDataTable.tsx":"84","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/Visualisations.tsx":"85","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/VisualiseNav.tsx":"86"},{"size":1620,"mtime":1612255136147,"results":"87","hashOfConfig":"88"},{"size":233,"mtime":1612255136138,"results":"89","hashOfConfig":"88"},{"size":5854,"mtime":1608309343000,"results":"90","hashOfConfig":"88"},{"size":215,"mtime":1612255136154,"results":"91","hashOfConfig":"88"},{"size":5573,"mtime":1612954653239,"results":"92","hashOfConfig":"88"},{"size":3038,"mtime":1613469091643,"results":"93","hashOfConfig":"88"},{"size":558,"mtime":1612953022517,"results":"94","hashOfConfig":"88"},{"size":1545,"mtime":1612953123161,"results":"95","hashOfConfig":"88"},{"size":601,"mtime":1612255136156,"results":"96","hashOfConfig":"88"},{"size":614,"mtime":1612255136158,"results":"97","hashOfConfig":"88"},{"size":962,"mtime":1612255136157,"results":"98","hashOfConfig":"88"},{"size":2272,"mtime":1612255136159,"results":"99","hashOfConfig":"88"},{"size":1086,"mtime":1612255136160,"results":"100","hashOfConfig":"88"},{"size":1103,"mtime":1612255136167,"results":"101","hashOfConfig":"88"},{"size":607,"mtime":1612255136167,"results":"102","hashOfConfig":"88"},{"size":264,"mtime":1608733523669,"results":"103","hashOfConfig":"88"},{"size":258,"mtime":1608733523665,"results":"104","hashOfConfig":"88"},{"size":4059,"mtime":1613032972570,"results":"105","hashOfConfig":"88"},{"size":1117,"mtime":1611748260584,"results":"106","hashOfConfig":"88"},{"size":799,"mtime":1609946360577,"results":"107","hashOfConfig":"88"},{"size":769,"mtime":1609946360428,"results":"108","hashOfConfig":"88"},{"size":9968,"mtime":1612255136156,"results":"109","hashOfConfig":"88"},{"size":5385,"mtime":1613467885210,"results":"110","hashOfConfig":"88"},{"size":1195,"mtime":1611747236593,"results":"111","hashOfConfig":"88"},{"size":9176,"mtime":1612255136157,"results":"112","hashOfConfig":"88"},{"size":1202,"mtime":1612255136166,"results":"113","hashOfConfig":"88"},{"size":168,"mtime":1612255136153,"results":"114","hashOfConfig":"88"},{"size":496,"mtime":1612255136148,"results":"115","hashOfConfig":"88"},{"size":2479,"mtime":1612255136141,"results":"116","hashOfConfig":"88"},{"size":264,"mtime":1612255136146,"results":"117","hashOfConfig":"88"},{"size":791,"mtime":1612255136145,"results":"118","hashOfConfig":"88"},{"size":765,"mtime":1612255136145,"results":"119","hashOfConfig":"88"},{"size":1801,"mtime":1612255136140,"results":"120","hashOfConfig":"88"},{"size":258,"mtime":1612255136147,"results":"121","hashOfConfig":"88"},{"size":4017,"mtime":1612255136138,"results":"122","hashOfConfig":"88"},{"size":1715,"mtime":1612945641293,"results":"123","hashOfConfig":"88"},{"size":2782,"mtime":1612255136140,"results":"124","hashOfConfig":"88"},{"size":2929,"mtime":1612255136139,"results":"125","hashOfConfig":"88"},{"size":3233,"mtime":1612255136141,"results":"126","hashOfConfig":"88"},{"size":1584,"mtime":1612255136143,"results":"127","hashOfConfig":"88"},{"size":320,"mtime":1613032972655,"results":"128","hashOfConfig":"88"},{"size":539,"mtime":1613032972713,"results":"129","hashOfConfig":"88"},{"size":279,"mtime":1612373079052,"results":"130","hashOfConfig":"88"},{"size":1879,"mtime":1613032972922,"results":"131","hashOfConfig":"88"},{"size":748,"mtime":1612772869048,"results":"132","hashOfConfig":"88"},{"size":2086,"mtime":1613032972808,"results":"133","hashOfConfig":"88"},{"size":2604,"mtime":1613032972610,"results":"134","hashOfConfig":"88"},{"size":290,"mtime":1612436498513,"results":"135","hashOfConfig":"88"},{"size":568,"mtime":1613032972927,"results":"136","hashOfConfig":"88"},{"size":1838,"mtime":1613032972880,"results":"137","hashOfConfig":"88"},{"size":739,"mtime":1612774365741,"results":"138","hashOfConfig":"88"},{"size":1804,"mtime":1613032972775,"results":"139","hashOfConfig":"88"},{"size":525,"mtime":1613032972736,"results":"140","hashOfConfig":"88"},{"size":313,"mtime":1613032972861,"results":"141","hashOfConfig":"88"},{"size":275,"mtime":1612373178437,"results":"142","hashOfConfig":"88"},{"size":3612,"mtime":1613032972731,"results":"143","hashOfConfig":"88"},{"size":287,"mtime":1612428305963,"results":"144","hashOfConfig":"88"},{"size":559,"mtime":1613032972910,"results":"145","hashOfConfig":"88"},{"size":839,"mtime":1613032751533,"results":"146","hashOfConfig":"88"},{"size":829,"mtime":1612859860514,"results":"147","hashOfConfig":"88"},{"size":839,"mtime":1612859469544,"results":"148","hashOfConfig":"88"},{"size":16807,"mtime":1613072082566,"results":"149","hashOfConfig":"88"},{"size":2759,"mtime":1612951526391,"results":"150","hashOfConfig":"88"},{"size":2623,"mtime":1612371870954,"results":"151","hashOfConfig":"88"},{"size":14594,"mtime":1613032972650,"results":"152","hashOfConfig":"88"},{"size":14522,"mtime":1613202714674,"results":"153","hashOfConfig":"88"},{"size":2430,"mtime":1613073045711,"results":"154","hashOfConfig":"88"},{"size":288,"mtime":1612898795789,"results":"155","hashOfConfig":"88"},{"size":650,"mtime":1612371779851,"results":"156","hashOfConfig":"88"},{"size":1843,"mtime":1613469008759,"results":"157","hashOfConfig":"88"},{"size":730,"mtime":1613032225063,"results":"158","hashOfConfig":"88"},{"size":1511,"mtime":1613032972701,"results":"159","hashOfConfig":"88"},{"size":279,"mtime":1612956018600,"results":"160","hashOfConfig":"88"},{"size":320,"mtime":1613032972788,"results":"161","hashOfConfig":"88"},{"size":539,"mtime":1613032972851,"results":"162","hashOfConfig":"88"},{"size":2401,"mtime":1613032972684,"results":"163","hashOfConfig":"88"},{"size":568,"mtime":1613032972818,"results":"164","hashOfConfig":"88"},{"size":291,"mtime":1612956719380,"results":"165","hashOfConfig":"88"},{"size":1305,"mtime":1613467761456,"results":"166","hashOfConfig":"88"},{"size":784,"mtime":1613381523854,"results":"167","hashOfConfig":"88"},{"size":6705,"mtime":1613386010334,"results":"168","hashOfConfig":"88"},{"size":6539,"mtime":1613468233180,"results":"169","hashOfConfig":"88"},{"size":6528,"mtime":1613468253257,"results":"170","hashOfConfig":"88"},{"size":6528,"mtime":1613468345335,"results":"171","hashOfConfig":"88"},{"size":236,"mtime":1613469122903,"results":"172","hashOfConfig":"88"},{"size":5188,"mtime":1613469122886,"results":"173","hashOfConfig":"88"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},"1llt5h",{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"176"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"201"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"201"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"201"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"201"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"201"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"201"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"201"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"201"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"201"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"201"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"201"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"201"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"349","messages":"350","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"201"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/aatikaseedat/Documents/data-visualiser/src/index.js",[],["364","365"],"/Users/aatikaseedat/Documents/data-visualiser/src/App.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/serviceWorker.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/store.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Reducers/ReduxReducer.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Navigation/UserNavigation.tsx",["366"],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/ReduxState.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Actions/ReducerActionTypes.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Navigation/TabPanel.js",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Home/Home.js",["367"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core';\n\nimport ImportFilesComponent from '../ImportFileHandling/ImportFilesComponent';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    alignItemsAndJustifyContent: {\n        width: '100%',\n        height: '100%',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: 'pink',\n    },\n}));\n\nexport default function Home() {\n    return (\n        <main id={'home-page'}>\n            <ImportFilesComponent />\n        </main>\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Export/Export.js",[],["368","369"],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Import/ImportedFileStats.tsx",[],["370","371"],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Notifications/AlertNotification.tsx",["372","373"],"import React from 'react';\nimport Alert from '@material-ui/lab/Alert';\n\nimport { INotification } from '../../../Interfaces/Notification/INotification';\nimport { Collapse, IconButton, Snackbar } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nexport default function AlertNotification(notifications: INotification) {\n    const [open, setOpen] = React.useState(true);\n    return (\n        <Snackbar\n            open={open}\n            id=\"notification-alert\"\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n            }}\n            // severity={notifications.alert}\n            action={\n                <IconButton\n                    aria-label=\"close\"\n                    color=\"inherit\"\n                    size=\"small\"\n                    onClick={() => {\n                        setOpen(false);\n                    }}\n                >\n                    <CloseIcon fontSize=\"inherit\" />\n                </IconButton>\n            }\n            message={notifications.notification}\n        />\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/ImportFilesHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/NotificationsHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/ResetImportedData.tsx",[],["374","375"],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/ResetAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/ReduxStore/Actions/ReducerActions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/CreateAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/GetImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/ImportedData/CreateImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/ImportFilesComponent.tsx",["376","377","378","379","380","381"],"import React from 'react';\nimport {\n    Box,\n    Button,\n    Container,\n    Divider,\n    Grid,\n    IconButton,\n    makeStyles,\n    Paper,\n    Tooltip,\n    Dialog,\n    DialogContent,\n    ClickAwayListener,\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { DropzoneArea } from 'material-ui-dropzone';\n\nimport { AlertType } from '../../../Interfaces/Notification/INotification';\n\nimport { NotificationsHandler } from '../../../UIHandling/NotificationsHandler';\nimport { ImportFilesHandler } from '../../../UIHandling/ImportFilesHandler';\n\nimport AlertNotification from '../Notifications/AlertNotification';\nimport { IImportedFile } from '../../../Interfaces/import/IImportedFile';\n\nimport ImportedFileStats from './Import/ImportedFileStats';\nimport { IImportedFileStats } from '../../../Interfaces/import/IImportedFileStats';\nimport FileAnalysisComponent from './Analyse/FileAnalysisComponent';\nimport Slide from '@material-ui/core/Slide';\nimport FieldTypes from './Analyse/FieldTypes';\n\ninterface IState {\n    importedFiles: Array<File>;\n    submitButtonDisabled: boolean;\n    outcome: AlertType | undefined;\n    outcomeMessage: string;\n    errors: NotificationsHandler;\n    files: string;\n    fileType: string;\n    importedFileStats: IImportedFileStats;\n    fieldTypesDialogOpen: boolean;\n}\nexport default class ImportFilesComponent extends React.Component<{}, IState> {\n    private classes: any = makeStyles((theme) => ({\n        root: {\n            height: '100%',\n            width: '75%',\n        },\n        componentArea: {\n            height: '70%',\n            width: '75%',\n        },\n        container: {\n            width: '100%',\n        },\n        verticalLine: {\n            background: theme.palette.primary.light,\n            width: '2px',\n            margin: theme.spacing(7),\n        },\n        space: {\n            minWidth: '10%',\n        },\n        dialogPaper: {\n            width: '500px',\n            height: '700px',\n        },\n    }));\n    constructor(props: object) {\n        super(props);\n        this.state = {\n            importedFiles: [],\n            submitButtonDisabled: true,\n            outcome: undefined,\n            outcomeMessage: '',\n            errors: new NotificationsHandler(),\n            files: '',\n            fileType: '',\n            importedFileStats: {\n                fileType: '',\n                fileSize: '',\n                characterCount: undefined,\n            },\n            fieldTypesDialogOpen: false,\n        };\n    }\n    private static checkFileType(files: File[]): string {\n        const file = files[0];\n        return file.type;\n    }\n    private async addFiles(files: File[]) {\n        this.setState({ importedFiles: files });\n        if (files.length > 0) {\n            const allFiles = await files[0].text();\n            this.setState({\n                submitButtonDisabled: false,\n                files: allFiles,\n                fileType: ImportFilesComponent.checkFileType(files),\n                importedFileStats: {\n                    fileType: ImportFilesComponent.checkFileType(files),\n                    fileSize: (files[0].size / 1000).toString(),\n                    characterCount: allFiles.length,\n                },\n            });\n        } else {\n            this.setState({\n                submitButtonDisabled: true,\n            });\n        }\n    }\n    private async uploadFiles() {\n        const file: IImportedFile = {\n            file: this.state.files,\n            fileType: this.state.fileType,\n        };\n        const files = new ImportFilesHandler(file);\n        const errors: NotificationsHandler = files.validate();\n        if (errors.isEmpty()) {\n            try {\n                this.setState({\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Files successfully uploaded',\n                    fieldTypesDialogOpen: true,\n                });\n            } catch (e) {\n                this.setState({\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            this.setState({ errors });\n        }\n    }\n    private resetFiles() {\n        const file: IImportedFile = {\n            file: this.state.files,\n            fileType: this.state.fileType,\n        };\n        const files = new ImportFilesHandler(file);\n        files.resetImportedData();\n        this.setState({\n            importedFiles: [],\n            submitButtonDisabled: true,\n            outcome: undefined,\n            outcomeMessage: '',\n            errors: new NotificationsHandler(),\n            files: '',\n            fileType: '',\n            importedFileStats: {\n                fileType: '',\n                fileSize: '',\n                characterCount: undefined,\n            },\n        });\n    }\n    public render() {\n        return (\n            <main>\n                <Dialog\n                    open={this.state.fieldTypesDialogOpen}\n                    classes={{ paper: this.classes.dialogPaper }}\n                    onBackdropClick={() => {\n                        this.setState({ fieldTypesDialogOpen: false });\n                    }}\n                >\n                    <Box\n                        display=\"flex\"\n                        justifyContent=\"center\"\n                        flexDirection=\"column\"\n                        alignItems=\"center\"\n                        className={this.classes.root}\n                        id={'import-file-component'}\n                        my={15}\n                        mx={15}\n                    >\n                        <FieldTypes />\n                    </Box>\n                </Dialog>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    className={this.classes.root}\n                    id={'import-file-component'}\n                    my={15}\n                    mx={15}\n                >\n                    <Box style={{ height: '50%', width: '50%' }} my={15} id={'alert-area'}>\n                        {this.state.outcome && (\n                            <AlertNotification alert={this.state.outcome} notification={this.state.outcomeMessage} />\n                        )}\n                        {!this.state.errors.isEmpty() && (\n                            <AlertNotification\n                                alert={AlertType.FAILED}\n                                notification={`Error(s): ${this.state.errors.notification()}`}\n                            />\n                        )}\n                    </Box>\n                    <Box\n                        display=\"flex\"\n                        flexDirection=\"row\"\n                        justifyContent=\"center\"\n                        alignItems=\"flex-start\"\n                        className={this.classes.componentArea}\n                    >\n                        <Box id=\"drop-zone-area\" mx={15} my={15}>\n                            <Tooltip title=\"Delete Imported File from system\">\n                                <IconButton\n                                    color=\"primary\"\n                                    style={{ marginRight: 10, borderRadius: '5em' }}\n                                    id=\"delete-import-button\"\n                                    disabled={this.state.submitButtonDisabled}\n                                    onClick={() => {\n                                        this.resetFiles();\n                                    }}\n                                >\n                                    <DeleteIcon />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"View and edit the field types\">\n                                <Button\n                                    style={{ marginRight: 10, borderRadius: '5em' }}\n                                    id=\"field-types-button\"\n                                    color=\"primary\"\n                                    disabled={this.state.submitButtonDisabled}\n                                    onClick={() => {\n                                        this.setState({\n                                            fieldTypesDialogOpen: true,\n                                        });\n                                    }}\n                                >\n                                    Field Types\n                                </Button>\n                            </Tooltip>\n                            <DropzoneArea\n                                showPreviews={true}\n                                onChange={async (files) => {\n                                    await this.addFiles(files);\n                                    await this.uploadFiles();\n                                }}\n                                showPreviewsInDropzone={false}\n                                useChipsForPreview\n                                previewGridProps={{ container: { spacing: 1, direction: 'row' } }}\n                                previewChipProps={{ classes: { root: this.classes.previewChip } }}\n                                previewText=\"Selected files\"\n                                showAlerts={false}\n                                // clearOnUnmount={true}\n                                acceptedFiles={['text/csv']}\n                                filesLimit={1}\n                            />\n\n                            <ImportedFileStats {...this.state.importedFileStats} />\n                        </Box>\n                        <Box mx={15} my={15}>\n                            <Divider orientation=\"vertical\" flexItem className={this.classes.verticalLine} />\n                            <FileAnalysisComponent />\n                        </Box>\n                    </Box>\n                </Box>\n            </main>\n        );\n    }\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Analyse/FileAnalysisComponent.tsx",["382","383","384","385","386","387","388"],"/Users/aatikaseedat/Documents/data-visualiser/src/domain/ReduxStoreHandling/AnalysedData/GetAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ImportFileHandling/Analyse/FieldTypes.tsx",["389","390","391","392","393","394","395","396"],"import React from 'react';\nimport {\n    Box,\n    CssBaseline,\n    Typography,\n    CircularProgress,\n    Chip,\n    Grid,\n    ListItem,\n    Select,\n    FormControl,\n    Table,\n    Paper,\n    TableHead,\n    TableCell,\n    TableRow,\n    LinearProgress,\n    Button,\n    TableBody,\n    InputLabel,\n} from '@material-ui/core';\nimport { LinearProgressProps } from '@material-ui/core/LinearProgress';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FieldTypes } from '../../../../Interfaces/Analyse/IAnalysedFileData';\nimport { TableContainer } from '@material-ui/core';\nimport { AnalyseFileHandler } from '../../../../UIHandling/AnalyseFileHandler';\nimport { AlertType } from '../../../../Interfaces/Notification/INotification';\nimport { NotificationsHandler } from '../../../../UIHandling/NotificationsHandler';\nimport AlertNotification from '../../Notifications/AlertNotification';\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        height: '100%',\n        margin: theme.spacing(2),\n        padding: theme.spacing(2),\n    },\n    chips: {\n        backgroundColor: theme.palette.secondary.main,\n        margin: theme.spacing(1),\n        textColor: theme.palette.secondary.contrastText,\n    },\n    statDescription: {\n        margin: theme.spacing(1),\n        textAlign: 'left',\n        color: theme.palette.text.primary,\n    },\n    donutChart: {\n        margin: theme.spacing(2),\n    },\n    exampleObject: {\n        textColor: theme.palette.text.primary,\n    },\n    boxSize: {\n        maxWidth: '500px',\n    },\n    table: {\n        minWidth: 350,\n    },\n    dialogPaper: {\n        width: '500px',\n        height: '700px',\n    },\n    textColor: {\n        color: theme.palette.text.primary,\n    },\n}));\nfunction LinearProgressWithLabel(progProps: LinearProgressProps & { value: number }) {\n    return (\n        <Box display=\"flex\" alignItems=\"center\">\n            <Box width=\"100%\" mr={1}>\n                <LinearProgress variant=\"determinate\" {...progProps} />\n            </Box>\n            <Box minWidth={35}>\n                <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(progProps.value)}%`}</Typography>\n            </Box>\n        </Box>\n    );\n}\nconst fields: Array<object> = [];\nfunction FileTypes(props: any) {\n    const classes = useStyles();\n    const [submitIsDisabled, setSubmitIsDisabled] = React.useState(true);\n    const [notifications, setNotifications] = React.useState<{\n        outcome: AlertType | undefined;\n        outcomeMessage: string;\n        errors: NotificationsHandler;\n    }>({\n        outcome: undefined,\n        outcomeMessage: '',\n        errors: new NotificationsHandler(),\n    });\n    function addField(fieldToAdd: { field: string; fieldType: FieldTypes }) {\n        if (!fields.includes(fieldToAdd)) {\n            for (var objIndex = 0; objIndex < fields.length; objIndex += 1) {\n                const values = Object.values(fields[objIndex]);\n                if (values[0] === fieldToAdd.field) {\n                    fields[objIndex] = fieldToAdd;\n                    return;\n                }\n            }\n            fields.push(fieldToAdd);\n            enableSubmit();\n        }\n    }\n    function enableSubmit() {\n        if (fields.length === props.dataFields.length) {\n            setSubmitIsDisabled(false);\n            return;\n        }\n    }\n    function analyseFile() {\n        const analyseFileHandler = new AnalyseFileHandler(fields);\n        const errors = analyseFileHandler.validateAnalysedData();\n        if (errors.isEmpty()) {\n            try {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Field Types Validated',\n                });\n            } catch (e) {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            setNotifications({\n                ...notifications,\n                errors: errors,\n            });\n        }\n    }\n    return (\n        <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"flex-start\" alignItems=\"flex-start\" id=\"field-types\">\n            <Box style={{ height: '50%', width: '50%' }} id={'alert-area'}>\n                {notifications.outcome && (\n                    <AlertNotification alert={notifications.outcome} notification={notifications.outcomeMessage} />\n                )}\n                {!notifications.errors.isEmpty() && (\n                    <AlertNotification\n                        alert={AlertType.FAILED}\n                        notification={`Error(s): ${notifications.errors.notification()}`}\n                    />\n                )}\n            </Box>\n            <Box\n                id=\"all-fields\"\n                display=\"flex\"\n                flexDirection=\"column\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                mx={10}\n                my={10}\n            >\n                <Typography id={'field-types-title'} className={classes.statDescription}>\n                    Select Field Types:\n                </Typography>\n                <TableContainer component={Paper} id={'fields-table'}>\n                    <Table className={classes.table}>\n                        <TableHead>\n                            <TableRow id={'table-headings'}>\n                                <TableCell id={'field-name-cell'}>Field Name</TableCell>\n                                <TableCell align={'center'} id={'field-type-cell'}>\n                                    Field Type\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {props.dataFields.map((value: string) => (\n                                <TableRow key={value + '-row'} id={value + '-table-row'}>\n                                    <TableCell component=\"th\" scope=\"row\" id={value + '-field-cell'}>\n                                        {value}\n                                    </TableCell>\n                                    <TableCell id={value + '-select-cell'}>\n                                        <Select\n                                            id={value + '-select'}\n                                            style={{ minWidth: 150 }}\n                                            name={value + '-select'}\n                                            onChange={(event) => {\n                                                const fieldToAdd: any = {\n                                                    field: value,\n                                                    fieldType: event.target.value as FieldTypes,\n                                                };\n                                                addField(fieldToAdd);\n                                            }}\n                                        >\n                                            <option id={'test'} value={FieldTypes.INTERVAL}>\n                                                Interval\n                                            </option>\n                                            <option value={FieldTypes.NOMINAL}>Nominal</option>\n                                            <option value={FieldTypes.ORDINAL}>Ordinal</option>\n                                            <option value={FieldTypes.BINARY}>Binary</option>\n                                            <option value={FieldTypes.UNARY}>Unary</option>\n                                            <option value={FieldTypes.TIME}>Time</option>\n                                            <option value={FieldTypes.DATE}>Date</option>\n                                            <option value={FieldTypes.IGNORE}>Ignore</option>\n                                        </Select>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <Box\n                    id=\"all-fields\"\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                    mx={10}\n                    my={10}\n                >\n                    <Button\n                        disabled={submitIsDisabled}\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        id={'analyse-file-button'}\n                        style={{ marginRight: 10, borderRadius: '5em' }}\n                        onClick={analyseFile}\n                    >\n                        Analyse File\n                    </Button>\n                </Box>\n            </Box>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    dataFields: state.importedData.dataFields,\n    dataObjects: state.importedData.dataObjects,\n});\nexport default connect(mapStateToProps, {})(FileTypes);\n","/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/AnalyseFileHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/Notification/INotification.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/Analyse/IAnalysedFileData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ImportFile/ImportFileData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/ImportedData/ResetImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/ImportedData/GetImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/ImportedData/CreateImportedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ImportFile/FileProcessors/CSVProcessor.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/AnalysedData/ResetAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/AnalyseFileData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/AnalysedData/CreateAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/DataAnalysis/AnalyseOrdinalData.tsx",["397"],"import { store } from '../../../ReduxStore/store';\n\nexport class AnalyseOrdinalData {\n    private readonly dataObjects = store.getState().importedData.dataObjects;\n    private ordinalFields: any;\n    private ordinalDataObjects: Array<object> = [];\n    constructor(ordinalFields: Array<string>) {\n        this.ordinalFields = ordinalFields;\n    }\n    public validateOrdinalData(): Array<object> {\n        if (this.ordinalFields.length > 0) {\n            for (const field of this.ordinalFields) {\n                this.ordinalDataObjects.push(this.getFieldObject(field));\n            }\n        }\n        return this.ordinalDataObjects;\n    }\n    private getFieldObject(field: string): object {\n        const fieldArray: Array<object> = [];\n        const objectToReturn: object = {};\n        const allOrdinalValuesForField = this.getOrdinalValuesForField(field);\n        for (const value of allOrdinalValuesForField) {\n            fieldArray.push(this.createOrdinalValueObject(value, allOrdinalValuesForField));\n        }\n        // @ts-ignore\n        objectToReturn[field] = fieldArray;\n        return objectToReturn;\n    }\n    private getOrdinalValuesForField(field: string): Array<string> {\n        const ordinalValuesForField: Array<string> = [];\n        for (var objectIndex = 0; objectIndex < this.dataObjects.length; objectIndex += 1) {\n            const object: object = this.dataObjects[objectIndex];\n            for (const [key, value] of Object.entries(object)) {\n                if (key === field && !ordinalValuesForField.includes(value)) {\n                    ordinalValuesForField.push(value);\n                }\n            }\n        }\n        return ordinalValuesForField;\n    }\n    private getOrdinalValueCount(ordinalValue: string): number {\n        let count = 0;\n        for (var objectIndex = 0; objectIndex < this.dataObjects.length; objectIndex += 1) {\n            const object = this.dataObjects[objectIndex];\n            for (const [key, value] of Object.entries(object)) {\n                if (value === ordinalValue) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n    private getOrdinalValuePercent(ordinalValue: string, allValues: Array<string>): number {\n        let total = 0;\n        for (const value of allValues) {\n            total += this.getOrdinalValueCount(value);\n        }\n        const count = this.getOrdinalValueCount(ordinalValue);\n        return Math.round((count / total) * 100);\n    }\n    private createOrdinalValueObject(ordinalValue: string, allValues: Array<string>): object {\n        return {\n            name: ordinalValue,\n            count: this.getOrdinalValueCount(ordinalValue),\n            percent: this.getOrdinalValuePercent(ordinalValue, allValues),\n        };\n    }\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/DataAnalysis/AnalyseIntervalData.tsx",["398","399"],"import { NotificationsHandler } from '../../../UIHandling/NotificationsHandler';\nimport CreateAnalysedData from '../../ReduxStoreHandling/AnalysedData/CreateAnalysedData';\nimport { store } from '../../../ReduxStore/store';\n\nexport class AnalyseIntervalData {\n    private readonly dataObjects = store.getState().importedData.dataObjects;\n    private intervalFields: any;\n    private intervalDataObjects: Array<object> = [];\n    constructor(intervalFields: Array<string>) {\n        this.intervalFields = intervalFields;\n    }\n    public validateIntervalData(): Array<object> {\n        if (this.intervalFields.length > 0) {\n            this.analyseIntervalData();\n            this.validateObjectsLength();\n            return this.getAnalysedIntervalData().intervalDataObjects;\n        }\n        return [];\n    }\n    private validateObjectsLength() {\n        for (var objIndex = 0; objIndex < this.intervalDataObjects.length; objIndex += 1) {\n            const currentObject = this.intervalDataObjects[objIndex];\n            const currentObjectLength = Object.keys(currentObject).length;\n            if (currentObjectLength !== this.intervalFields.length) {\n                this.removeInvalidObject(objIndex);\n            }\n        }\n    }\n    private removeInvalidObject(index: number) {\n        this.intervalDataObjects.splice(index, 1);\n    }\n\n    private analyseIntervalData() {\n        for (var objIndex = 0; objIndex < this.dataObjects.length; objIndex += 1) {\n            const objectToAdd: Object = {};\n            // eslint-disable-next-line prefer-destructuring\n            const currentObject: Object = this.dataObjects[objIndex];\n            for (const [key, value] of Object.entries(currentObject)) {\n                if (this.intervalFields.includes(key)) {\n                    if (AnalyseIntervalData.dataIsFloat(value) && AnalyseIntervalData.dataIsNotIPAddress(value)) {\n                        // @ts-ignore\n                        objectToAdd[key] = AnalyseIntervalData.convertDataToFloat(value);\n                    }\n                }\n            }\n            this.intervalDataObjects.push(objectToAdd);\n        }\n    }\n    private static dataIsNotIPAddress(data: string): boolean {\n        let decimalPointCount = 0;\n        for (var i = 0; i < data.length; i += 1) {\n            if (data[i] === '.') {\n                decimalPointCount += 1;\n            }\n        }\n        return decimalPointCount <= 1;\n    }\n    private static dataIsFloat(data: string): boolean {\n        const dataAsFloat = parseFloat(data);\n        return !isNaN(dataAsFloat);\n    }\n    private static convertDataToFloat(data: string): number {\n        return parseFloat(data);\n    }\n    private getAnalysedIntervalData(): { intervalFields: Array<string>; intervalDataObjects: Array<object> } {\n        return {\n            intervalFields: this.intervalFields,\n            intervalDataObjects: this.intervalDataObjects,\n        };\n    }\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/AnalyseFile/DataAnalysis/AnalyseNominalData.tsx",["400"],"import { store } from '../../../ReduxStore/store';\n\nexport class AnalyseNominalData {\n    private readonly dataObjects = store.getState().importedData.dataObjects;\n    private nominalFields: any;\n    private nominalDataObjects: Array<object> = [];\n    constructor(nominalFields: Array<string>) {\n        this.nominalFields = nominalFields;\n    }\n    public validateNominalData(): Array<object> {\n        if (this.nominalFields.length > 0) {\n            for (const field of this.nominalFields) {\n                this.nominalDataObjects.push(this.getFieldObject(field));\n            }\n        }\n        return this.nominalDataObjects;\n    }\n    private getFieldObject(field: string): object {\n        const fieldArray: Array<object> = [];\n        const objectToReturn: object = {};\n        const nominalValues = this.getAllNominalValues(field);\n        for (const value of nominalValues) {\n            fieldArray.push(this.createNominalObject(value, nominalValues));\n        }\n        // @ts-ignore\n        objectToReturn[field] = fieldArray;\n        return objectToReturn;\n    }\n    private getAllNominalValues(field: string): Array<string> {\n        const nominalValues: Array<string> = [];\n        for (var objectIndex = 0; objectIndex < this.dataObjects.length; objectIndex += 1) {\n            const object = this.dataObjects[objectIndex];\n            for (var fieldIndex = 0; fieldIndex < this.nominalFields.length; fieldIndex += 1) {\n                if (field === this.nominalFields[fieldIndex]) {\n                    const nominalValueToAdd = this.getNominalValue(object, field);\n                    if (nominalValueToAdd !== '') {\n                        if (!nominalValues.includes(nominalValueToAdd)) {\n                            nominalValues.push(nominalValueToAdd);\n                        }\n                    }\n                }\n            }\n        }\n\n        return nominalValues;\n    }\n    private getNominalValue(object: object, field: string): string {\n        for (const [key, value] of Object.entries(object)) {\n            if (key === field) {\n                return value;\n            }\n        }\n        return '';\n    }\n    private getNominalValueCount(nominalValue: string): number {\n        let count = 0;\n        for (var objectIndex = 0; objectIndex < this.dataObjects.length; objectIndex += 1) {\n            const object = this.dataObjects[objectIndex];\n            for (const [key, value] of Object.entries(object)) {\n                if (value === nominalValue) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n    private getNominalValuePercent(nominalValue: string, allValues: Array<string>): number {\n        let total = 0;\n        for (const value of allValues) {\n            total += this.getNominalValueCount(value);\n        }\n        const count = this.getNominalValueCount(nominalValue);\n        return Math.round((count / total) * 100);\n    }\n    private createNominalObject(nominalValue: string, allValues: Array<string>): object {\n        return {\n            name: nominalValue,\n            count: this.getNominalValueCount(nominalValue),\n            percent: this.getNominalValuePercent(nominalValue, allValues),\n        };\n    }\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/AnalysedData/GetAnalysedData.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Line/LineSeriesOptions/GetLineSeriesOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Line/LineSeriesOptions/CreateLineSeriesOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Line/LineSeriesOptions/ResetLineSeriesOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/Visualisations/LineSeries/LineSeriesOptionsHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/Visualisations/LineSeries/LineSeriesVisHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/Visualisations/LineSeries/LineSeriesOptionsValidate.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/Visualisations/LineSeries/LineSeriesCreateVis.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Line/CurrentLineVisual/ResetCurrentLineVisual.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Line/CurrentLineVisual/CreateCurrentLineVisual.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/Visualisations/BarSeries/BarSeriesOptionsHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/Visualisations/BarSeries/BarSeriesVisHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/Visualisations/BarSeries/BarSeriesOptionsValidate.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Bar/BarSeriesOptions/CreateBarSeriesOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Bar/BarSeriesOptions/GetBarSeriesOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Bar/BarSeriesOptions/ResetBarSeriesOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/Visualisations/BarSeries/BarSeriesCreateVis.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Bar/CurrentBarVisualisation/ResetCurrentBarVisual.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Bar/CurrentBarVisualisation/CreateCurrentBarVisual.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/Mark/MarkSeriesPage.tsx",["401"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Grid } from '@material-ui/core';\nimport MarkSeriesVis from './MarkSeriesVis';\nimport MarkSeriesOptions from './MarkSeriesOptions';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n}));\n\nexport default function MarkSeriesPage() {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"row\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'mark-plotting-page'}\n        >\n            <Box mx={10}>\n                <MarkSeriesVis />\n            </Box>\n            <Box mx={10}>\n                <MarkSeriesOptions />\n            </Box>\n        </Box>\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/Bar/BarSeriesPage.tsx",["402"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Grid } from '@material-ui/core';\nimport BarSeriesOptions from './BarSeriesOptions';\nimport BarSeriesVis from './BarSeriesVis';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n}));\nexport default function BarSeriesPage() {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"row\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'bar-series-page'}\n        >\n            <Box mx={10}>\n                <BarSeriesVis />\n            </Box>\n            <Box mx={10}>\n                <BarSeriesOptions />\n            </Box>\n        </Box>\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/Line/LineSeriesPage.tsx",["403"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Grid } from '@material-ui/core';\nimport LineSeriesVis from './LineSeriesVis';\nimport LineSeriesOptions from './LineSeriesOptions';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n}));\n\nexport default function LineSeriesPage() {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"row\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'line-plotting-page'}\n        >\n            <Box mx={10}>\n                <LineSeriesVis />\n            </Box>\n            <Box mx={10}>\n                <LineSeriesOptions />\n            </Box>\n        </Box>\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/Line/LineSeriesOptions.tsx",["404","405"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ColorPicker } from 'material-ui-color';\nimport {\n    Box,\n    Button,\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    Paper,\n    Select,\n    TextField,\n    Typography,\n} from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport {\n    CurveType,\n    ILineSeriesOptions,\n    LineStyle,\n} from '../../../../Interfaces/Visualisations/Line/ILineSeriesOptions';\n\nimport { AlertType } from '../../../../Interfaces/Notification/INotification';\nimport { NotificationsHandler } from '../../../../UIHandling/NotificationsHandler';\nimport AlertNotification from '../../Notifications/AlertNotification';\nimport { LineSeriesOptionsHandler } from '../../../../UIHandling/Visualisations/LineSeries/LineSeriesOptionsHandler';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    root: {\n        // width: '100%',\n    },\n    textColor: {\n        color: theme.palette.text.primary,\n    },\n    helperTextColor: {\n        color: theme.palette.text.disabled,\n    },\n}));\nfunction LineSeriesOptions(props: any) {\n    const classes = useStyles();\n    const [options, setOptions] = React.useState<{\n        xValue: string;\n        yValue: string;\n        height: number;\n        width: number;\n        stroke: string;\n        opacity: number;\n        curveType: CurveType | null;\n        lineStyle: LineStyle | undefined;\n        lineWidth: number;\n    }>({\n        xValue: '',\n        yValue: '',\n        height: 800,\n        width: 800,\n        stroke: '#000000',\n        opacity: 1,\n        curveType: null,\n        lineStyle: undefined,\n        lineWidth: 2,\n    });\n    const [notifications, setNotifications] = React.useState<{\n        outcome: AlertType | undefined;\n        outcomeMessage: string;\n        errors: NotificationsHandler;\n    }>({\n        outcome: undefined,\n        outcomeMessage: '',\n        errors: new NotificationsHandler(),\n    });\n    function submitIsEnabled(): boolean {\n        return !(options.xValue.length !== 0 && options.yValue.length !== 0 && xValAndYValIsEqual());\n    }\n    function xValAndYValIsEqual(): boolean {\n        return options.xValue !== options.yValue;\n    }\n    function validateDataOptions() {\n        const optionsToValidate: ILineSeriesOptions = {\n            xValue: options.xValue,\n            yValue: options.yValue,\n            height: options.height,\n            width: options.width,\n            stroke: options.stroke,\n            opacity: options.opacity,\n            curveType: options.curveType,\n            lineStyle: options.lineStyle,\n            lineWidth: options.lineWidth,\n        };\n        const validateOptions = new LineSeriesOptionsHandler(optionsToValidate);\n        const errors: NotificationsHandler = validateOptions.validateOptions();\n        if (errors.isEmpty()) {\n            try {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Options Validated',\n                });\n            } catch (e) {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            setNotifications({\n                ...notifications,\n                errors: errors,\n            });\n        }\n    }\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'line-plotting-options'}\n            mx={15}\n        >\n            <Box style={{ height: '50%', width: '50%' }} id={'alert-area'}>\n                {notifications.outcome && (\n                    <AlertNotification alert={notifications.outcome} notification={notifications.outcomeMessage} />\n                )}\n                {!notifications.errors.isEmpty() && (\n                    <AlertNotification\n                        alert={AlertType.FAILED}\n                        notification={`Error(s): ${notifications.errors.notification()}`}\n                    />\n                )}\n            </Box>\n            <div className={classes.paper}>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    className={classes.root}\n                    id={'line-plotting-options'}\n                    px={20}\n                    py={20}\n                >\n                    <Typography id={'line-plotting-title'}>Line Series Plotting Options</Typography>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\n                        <FormControl required style={{ minWidth: 200 }} id={'x-values-select'}>\n                            <InputLabel className={classes.textColor}>X Value</InputLabel>\n                            <Select\n                                id={'select-xValue'}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        xValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"X Values\"\n                                renderValue={(value) => {\n                                    if (!xValAndYValIsEqual()) {\n                                        return `⚠️  - ${value}`;\n                                    }\n                                    return `${value}`;\n                                }}\n                            >\n                                {props.intervalFields.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on X-Axis</FormHelperText>\n                        </FormControl>\n                        <Box mx={5} />\n                        <FormControl required style={{ minWidth: 200 }} id={'y-values-select'}>\n                            <InputLabel className={classes.textColor}>Y Value</InputLabel>\n                            <Select\n                                renderValue={(value) => {\n                                    if (!xValAndYValIsEqual()) {\n                                        return `⚠️  - ${value}`;\n                                    }\n                                    return `${value}`;\n                                }}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        yValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"Y Values\"\n                            >\n                                {props.intervalFields.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on Y-Axis</FormHelperText>\n                        </FormControl>\n                    </Box>\n                    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'size-textfields'}>\n                        <TextField\n                            type={'number'}\n                            id=\"height-textfield\"\n                            label=\"Height\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    height: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"width-textfield\"\n                            label=\"Width\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    width: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'stroke-textfields'}>\n                        <FormControl style={{ minWidth: 200 }} id={'stroke-select'}>\n                            <InputLabel className={classes.textColor}>Colour</InputLabel>\n                            <Select\n                                value={options.stroke}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        stroke: event.target.value as string,\n                                    });\n                                }}\n                                name=\"stroke\"\n                            >\n                                <option value={'red'}>red</option>\n                                <option value={'green'}>green</option>\n                                <option value={'blue'}>blue</option>\n                                <option value={'purple'}>purple</option>\n                                <option value={'orange'}>orange</option>\n                                <option value={'black'}>black</option>\n                                <option value={'yellow'}>yellow</option>\n                                <option value={'brown'}>brown</option>\n                                <option value={'pink'}>pink</option>\n                                <option value={'turquoise'}>turquoise</option>\n                            </Select>\n                        </FormControl>\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"opacity-textfield\"\n                            label=\"Opacity\"\n                            variant=\"outlined\"\n                            helperText=\"Value must be between 0 and 1\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    opacity: parseFloat(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box>\n                        <FormControl style={{ minWidth: 400 }} id={'curve-select'}>\n                            <InputLabel className={classes.textColor}>Curve</InputLabel>\n                            <Select\n                                // value={options.curveType}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        curveType: event.target.value as CurveType,\n                                    });\n                                }}\n                                name=\"Curve Type\"\n                            >\n                                <option value={CurveType.curveLinear}>Linear</option>\n                                <option value={CurveType.curveLinearClosed}>Linear Closed</option>\n                                <option value={CurveType.curveMonotoneX}>Monotone X</option>\n                                <option value={CurveType.curveMonotoneY}>Monotone Y</option>\n                                <option value={CurveType.curveNatural}>Natural</option>\n                                <option value={CurveType.curveStep}>Step</option>\n                                <option value={CurveType.curveStepAfter}>Step After</option>\n                                <option value={CurveType.curveStepBefore}>Step Before</option>\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>\n                                Function used to create curve\n                            </FormHelperText>\n                        </FormControl>\n                    </Box>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'line-options'}>\n                        <FormControl style={{ minWidth: 200 }} id={'line-style-select'}>\n                            <InputLabel className={classes.textColor}>Line Style</InputLabel>\n                            <Select\n                                value={options.lineStyle}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        lineStyle: event.target.value as LineStyle,\n                                    });\n                                }}\n                                name=\"Y Values\"\n                            >\n                                <option value={LineStyle.SOLID}>Solid</option>\n                                <option value={LineStyle.DASHED}>Dashed</option>\n                            </Select>\n                        </FormControl>\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"line-width-textfield\"\n                            label=\"Line Width\"\n                            variant=\"outlined\"\n                            helperText=\"Default: 2px\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    lineWidth: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box id={'submit-button'}>\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            disabled={submitIsEnabled()}\n                            id={'options-submit-button'}\n                            onClick={validateDataOptions}\n                        >\n                            Submit\n                        </Button>\n                    </Box>\n                </Box>\n            </div>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    intervalFields: state.analysedData.intervalFields,\n});\nexport default connect(mapStateToProps, {})(LineSeriesOptions);\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/Bar/BarSeriesVis.tsx",["406","407"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport {\n    XYPlot,\n    XAxis,\n    YAxis,\n    VerticalGridLines,\n    HorizontalGridLines,\n    VerticalBarSeries,\n    VerticalBarSeriesCanvas,\n    LabelSeries,\n} from 'react-vis';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    statDescription: {\n        margin: theme.spacing(1),\n        textAlign: 'left',\n        color: theme.palette.text.primary,\n    },\n}));\nfunction BarSeriesVis(props: any) {\n    const classes = useStyles();\n    const [useCanvas, setUseCanvas] = React.useState(false);\n    const BarSeries = useCanvas ? VerticalBarSeriesCanvas : VerticalBarSeries;\n    return (\n        <Box\n            display=\"flex\"\n            flexWrap=\"nowrap\"\n            overflow=\"auto\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'bar-series'}\n            mx={15}\n        >\n            <Box>\n                <XYPlot\n                    id={'bar-series-vis'}\n                    xType=\"ordinal\"\n                    width={props.currentBarVisualisation.width}\n                    height={props.currentBarVisualisation.height}\n                    margin={{ left: 75 }}\n                    xDistance={100}\n                >\n                    <VerticalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <HorizontalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <BarSeries\n                        barWidth={props.currentBarVisualisation.barWidth}\n                        color={props.currentBarVisualisation.colour}\n                        opacity={props.currentBarVisualisation.opacity}\n                        stroke={props.currentBarVisualisation.stroke}\n                        className=\"vertical-bar-series-example\"\n                        data={props.currentBarVisualisation.data}\n                    />\n                    <XAxis\n                        //@ts-ignore\n                        style={{ text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600, margin: 5, padding: 5 } }}\n                    />\n                    <YAxis\n                        //@ts-ignore\n                        style={{ text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600, margin: 5, padding: 5 } }}\n                    />\n                </XYPlot>\n            </Box>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    currentBarVisualisation: state.currentBarVisualisation,\n    barSeriesOptions: state.barSeriesOptions,\n});\nexport default connect(mapStateToProps, {})(BarSeriesVis);\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/Line/LineSeriesVis.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/Bar/BarSeriesOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/Mark/MarkSeriesOptions.tsx",["408","409"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ColorPicker } from 'material-ui-color';\nimport {\n    Box,\n    Button,\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    Paper,\n    Select,\n    TextField,\n    Typography,\n} from '@material-ui/core';\nimport { connect } from 'react-redux';\n\nimport { AlertType } from '../../../../Interfaces/Notification/INotification';\nimport { NotificationsHandler } from '../../../../UIHandling/NotificationsHandler';\nimport AlertNotification from '../../Notifications/AlertNotification';\nimport { IMarkSeriesOptions } from '../../../../Interfaces/Visualisations/Mark/IMarkSeriesOptions';\nimport { MarkSeriesOptionsHandler } from '../../../../UIHandling/Visualisations/MarkSeries/MarkSeriesOptionsHandler';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    root: {\n        // width: '100%',\n    },\n    textColor: {\n        color: theme.palette.text.primary,\n    },\n    helperTextColor: {\n        color: theme.palette.text.disabled,\n    },\n}));\nfunction MarkSeriesOptions(props: any) {\n    const classes = useStyles();\n    const [options, setOptions] = React.useState<{\n        xValue: string;\n        yValue: string;\n        height: number;\n        width: number;\n        colour: string;\n        stroke: string;\n        opacity: number;\n        fill: string;\n    }>({\n        xValue: '',\n        yValue: '',\n        height: 800,\n        width: 800,\n        stroke: '#000000',\n        opacity: 1,\n        fill: '',\n        colour: '',\n    });\n    const [notifications, setNotifications] = React.useState<{\n        outcome: AlertType | undefined;\n        outcomeMessage: string;\n        errors: NotificationsHandler;\n    }>({\n        outcome: undefined,\n        outcomeMessage: '',\n        errors: new NotificationsHandler(),\n    });\n    function submitIsEnabled(): boolean {\n        return !(options.xValue.length !== 0 && options.yValue.length !== 0 && xValAndYValIsEqual());\n    }\n    function xValAndYValIsEqual(): boolean {\n        return options.xValue !== options.yValue;\n    }\n    function validateDataOptions() {\n        const optionsToValidate: IMarkSeriesOptions = {\n            xValue: options.xValue,\n            yValue: options.yValue,\n            height: options.height,\n            width: options.width,\n            stroke: options.stroke,\n            opacity: options.opacity,\n            colour: options.colour,\n            fill: options.fill,\n        };\n        const validateOptions = new MarkSeriesOptionsHandler(optionsToValidate);\n        const errors: NotificationsHandler = validateOptions.validateOptions();\n        if (errors.isEmpty()) {\n            try {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.SUCCESS,\n                    outcomeMessage: 'Options Validated',\n                });\n            } catch (e) {\n                setNotifications({\n                    ...notifications,\n                    outcome: AlertType.FAILED,\n                    outcomeMessage: `${e.notification}`,\n                });\n            }\n        } else {\n            setNotifications({\n                ...notifications,\n                errors: errors,\n            });\n        }\n    }\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'mark-plotting-options'}\n            mx={15}\n        >\n            <Box style={{ height: '50%', width: '50%' }} id={'alert-area'}>\n                {notifications.outcome && (\n                    <AlertNotification alert={notifications.outcome} notification={notifications.outcomeMessage} />\n                )}\n                {!notifications.errors.isEmpty() && (\n                    <AlertNotification\n                        alert={AlertType.FAILED}\n                        notification={`Error(s): ${notifications.errors.notification()}`}\n                    />\n                )}\n            </Box>\n            <div className={classes.paper}>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    className={classes.root}\n                    id={'mark-plotting-options'}\n                    px={20}\n                    py={20}\n                >\n                    <Typography id={'mark-plotting-title'}>Mark Series Options</Typography>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\n                        <FormControl required style={{ minWidth: 200 }} id={'x-values-select'}>\n                            <InputLabel className={classes.textColor}>X Value</InputLabel>\n                            <Select\n                                id={'select-xValue'}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        xValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"X Values\"\n                                renderValue={(value) => {\n                                    if (!xValAndYValIsEqual()) {\n                                        return `⚠️  - ${value}`;\n                                    }\n                                    return `${value}`;\n                                }}\n                            >\n                                {props.intervalFields.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on X-Axis</FormHelperText>\n                        </FormControl>\n                        <Box mx={5} />\n                        <FormControl required style={{ minWidth: 200 }} id={'y-values-select'}>\n                            <InputLabel className={classes.textColor}>Y Value</InputLabel>\n                            <Select\n                                renderValue={(value) => {\n                                    if (!xValAndYValIsEqual()) {\n                                        return `⚠️  - ${value}`;\n                                    }\n                                    return `${value}`;\n                                }}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        yValue: event.target.value as string,\n                                    });\n                                }}\n                                name=\"Y Values\"\n                            >\n                                {props.intervalFields.map((integerField: string) => (\n                                    <option\n                                        value={integerField}\n                                        id={integerField + '-option'}\n                                    >{`${integerField}`}</option>\n                                ))}\n                            </Select>\n                            <FormHelperText className={classes.helperTextColor}>Data on Y-Axis</FormHelperText>\n                        </FormControl>\n                    </Box>\n                    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'size-textfields'}>\n                        <TextField\n                            type={'number'}\n                            id=\"height-textfield\"\n                            label=\"Height\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    height: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"width-textfield\"\n                            label=\"Width\"\n                            variant=\"outlined\"\n                            helperText=\"Default 800\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    width: parseInt(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box my={15} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'stroke-textfields'}>\n                        <FormControl style={{ minWidth: 200 }} id={'stroke-select'}>\n                            <InputLabel className={classes.textColor}>Mark Colour</InputLabel>\n                            <Select\n                                value={options.stroke}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        stroke: event.target.value as string,\n                                    });\n                                }}\n                                name=\"stroke\"\n                            >\n                                <option value={'red'}>red</option>\n                                <option value={'green'}>green</option>\n                                <option value={'blue'}>blue</option>\n                                <option value={'purple'}>purple</option>\n                                <option value={'orange'}>orange</option>\n                                <option value={'black'}>black</option>\n                                <option value={'yellow'}>yellow</option>\n                                <option value={'brown'}>brown</option>\n                                <option value={'pink'}>pink</option>\n                                <option value={'turquoise'}>turquoise</option>\n                            </Select>\n                        </FormControl>\n                        <Box mx={5} />\n                        <TextField\n                            type={'number'}\n                            id=\"opacity-textfield\"\n                            label=\"Opacity\"\n                            variant=\"outlined\"\n                            helperText=\"Value must be between 0 and 1\"\n                            FormHelperTextProps={{\n                                className: classes.helperTextColor,\n                            }}\n                            InputLabelProps={{\n                                className: classes.textColor,\n                            }}\n                            onChange={(event) => {\n                                setOptions({\n                                    ...options,\n                                    opacity: parseFloat(event.target.value),\n                                });\n                            }}\n                        />\n                    </Box>\n                    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" id={'colour-options'}>\n                        <FormControl style={{ minWidth: 200 }} id={'colour-select'}>\n                            <InputLabel className={classes.textColor}>Mark Fill Colour</InputLabel>\n                            <Select\n                                value={options.colour}\n                                onChange={(event) => {\n                                    setOptions({\n                                        ...options,\n                                        colour: event.target.value as string,\n                                    });\n                                }}\n                                name=\"colour\"\n                            >\n                                <option value={'red'}>red</option>\n                                <option value={'green'}>green</option>\n                                <option value={'blue'}>blue</option>\n                                <option value={'purple'}>purple</option>\n                                <option value={'orange'}>orange</option>\n                                <option value={'black'}>black</option>\n                                <option value={'yellow'}>yellow</option>\n                                <option value={'brown'}>brown</option>\n                                <option value={'pink'}>pink</option>\n                                <option value={'turquoise'}>turquoise</option>\n                            </Select>\n                        </FormControl>\n                    </Box>\n                    <Box id={'submit-button'} my={15}>\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            disabled={submitIsEnabled()}\n                            id={'options-submit-button'}\n                            onClick={validateDataOptions}\n                        >\n                            Submit\n                        </Button>\n                    </Box>\n                </Box>\n            </div>\n        </Box>\n    );\n}\nconst mapStateToProps = (state: any) => ({\n    intervalFields: state.analysedData.intervalFields,\n});\nexport default connect(mapStateToProps, {})(MarkSeriesOptions);\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/Mark/MarkSeriesVis.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/Visualisations/Bar/IBarSeriesOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Interfaces/Visualisations/Line/ILineSeriesOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/Visualisations/MarkSeries/MarkSeriesOptionsHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UIHandling/Visualisations/MarkSeries/MarkSeriesVisHandler.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/Visualisations/MarkSeries/MarkSeriesOptionsValidate.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Mark/MarkSeriesOptions/ResetMarkSeriesOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Mark/MarkSeriesOptions/GetMarkSeriesOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Mark/MarkSeriesOptions/CreateMarkSeriesOptions.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/Visualisations/MarkSeries/MarkSeriesCreateVis.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Mark/CurrentMarkVisualisation/CreateCurrentMarkVisual.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/Domain/ReduxStoreHandling/Plotting/Mark/CurrentMarkVisualisation/ResetCurrentMarkVisual.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ViewAnalysedData/ViewAnalysedData.tsx",["410","411","412"],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ViewImportedData/ViewImportedData.tsx",["413","414","415","416","417"],"import React from 'react';\nimport { Box, Container, Grid, makeStyles, Typography } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport ReactJson from 'react-json-view';\nimport ImportedDataTable from './ImportedDataTable';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        height: '100%',\n        width: '100%',\n    },\n}));\n\nexport default function ViewImportedData(props: any) {\n    const classes = useStyles();\n    return (\n        <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            className={classes.root}\n            id={'view-imported-data'}\n            my={15}\n            mx={15}\n        >\n            <ImportedDataTable />\n        </Box>\n    );\n}\n","/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ViewImportedData/ImportedDataTable.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ViewAnalysedData/IntervalDataTable.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ViewAnalysedData/NominalDataTable.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/ViewAnalysedData/OrdinalDataTable.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/Visualisations.tsx",[],"/Users/aatikaseedat/Documents/data-visualiser/src/UI/LoggedIn/Visualisation/VisualiseNav.tsx",[],{"ruleId":"418","replacedBy":"419"},{"ruleId":"420","replacedBy":"421"},{"ruleId":"422","severity":1,"message":"423","line":7,"column":8,"nodeType":"424","messageId":"425","endLine":7,"endColumn":14},{"ruleId":"426","severity":1,"message":"427","line":6,"column":7,"nodeType":"424","messageId":"425","endLine":6,"endColumn":16},{"ruleId":"418","replacedBy":"428"},{"ruleId":"420","replacedBy":"429"},{"ruleId":"418","replacedBy":"419"},{"ruleId":"420","replacedBy":"421"},{"ruleId":"422","severity":1,"message":"430","line":2,"column":8,"nodeType":"424","messageId":"425","endLine":2,"endColumn":13},{"ruleId":"422","severity":1,"message":"431","line":5,"column":10,"nodeType":"424","messageId":"425","endLine":5,"endColumn":18},{"ruleId":"418","replacedBy":"432"},{"ruleId":"420","replacedBy":"433"},{"ruleId":"422","severity":1,"message":"434","line":5,"column":5,"nodeType":"424","messageId":"425","endLine":5,"endColumn":14},{"ruleId":"422","severity":1,"message":"435","line":7,"column":5,"nodeType":"424","messageId":"425","endLine":7,"endColumn":9},{"ruleId":"422","severity":1,"message":"436","line":10,"column":5,"nodeType":"424","messageId":"425","endLine":10,"endColumn":10},{"ruleId":"422","severity":1,"message":"437","line":13,"column":5,"nodeType":"424","messageId":"425","endLine":13,"endColumn":18},{"ruleId":"422","severity":1,"message":"438","line":14,"column":5,"nodeType":"424","messageId":"425","endLine":14,"endColumn":22},{"ruleId":"422","severity":1,"message":"439","line":30,"column":8,"nodeType":"424","messageId":"425","endLine":30,"endColumn":13},{"ruleId":"422","severity":1,"message":"440","line":3,"column":15,"nodeType":"424","messageId":"425","endLine":3,"endColumn":26},{"ruleId":"422","severity":1,"message":"441","line":3,"column":40,"nodeType":"424","messageId":"425","endLine":3,"endColumn":56},{"ruleId":"422","severity":1,"message":"435","line":3,"column":64,"nodeType":"424","messageId":"425","endLine":3,"endColumn":68},{"ruleId":"422","severity":1,"message":"436","line":3,"column":70,"nodeType":"424","messageId":"425","endLine":3,"endColumn":75},{"ruleId":"422","severity":1,"message":"442","line":7,"column":10,"nodeType":"424","messageId":"425","endLine":7,"endColumn":15},{"ruleId":"422","severity":1,"message":"443","line":61,"column":11,"nodeType":"424","messageId":"425","endLine":61,"endColumn":15},{"ruleId":"422","severity":1,"message":"444","line":69,"column":11,"nodeType":"424","messageId":"425","endLine":69,"endColumn":27},{"ruleId":"422","severity":1,"message":"440","line":4,"column":5,"nodeType":"424","messageId":"425","endLine":4,"endColumn":16},{"ruleId":"422","severity":1,"message":"441","line":6,"column":5,"nodeType":"424","messageId":"425","endLine":6,"endColumn":21},{"ruleId":"422","severity":1,"message":"445","line":7,"column":5,"nodeType":"424","messageId":"425","endLine":7,"endColumn":9},{"ruleId":"422","severity":1,"message":"435","line":8,"column":5,"nodeType":"424","messageId":"425","endLine":8,"endColumn":9},{"ruleId":"422","severity":1,"message":"446","line":9,"column":5,"nodeType":"424","messageId":"425","endLine":9,"endColumn":13},{"ruleId":"422","severity":1,"message":"447","line":11,"column":5,"nodeType":"424","messageId":"425","endLine":11,"endColumn":16},{"ruleId":"422","severity":1,"message":"448","line":20,"column":5,"nodeType":"424","messageId":"425","endLine":20,"endColumn":15},{"ruleId":"422","severity":1,"message":"449","line":67,"column":10,"nodeType":"424","messageId":"425","endLine":67,"endColumn":33},{"ruleId":"422","severity":1,"message":"450","line":45,"column":25,"nodeType":"424","messageId":"425","endLine":45,"endColumn":28},{"ruleId":"422","severity":1,"message":"451","line":1,"column":10,"nodeType":"424","messageId":"425","endLine":1,"endColumn":30},{"ruleId":"422","severity":1,"message":"452","line":2,"column":8,"nodeType":"424","messageId":"425","endLine":2,"endColumn":26},{"ruleId":"422","severity":1,"message":"450","line":59,"column":25,"nodeType":"424","messageId":"425","endLine":59,"endColumn":28},{"ruleId":"422","severity":1,"message":"435","line":3,"column":15,"nodeType":"424","messageId":"425","endLine":3,"endColumn":19},{"ruleId":"422","severity":1,"message":"435","line":3,"column":15,"nodeType":"424","messageId":"425","endLine":3,"endColumn":19},{"ruleId":"422","severity":1,"message":"435","line":3,"column":15,"nodeType":"424","messageId":"425","endLine":3,"endColumn":19},{"ruleId":"422","severity":1,"message":"453","line":3,"column":10,"nodeType":"424","messageId":"425","endLine":3,"endColumn":21},{"ruleId":"422","severity":1,"message":"436","line":10,"column":5,"nodeType":"424","messageId":"425","endLine":10,"endColumn":10},{"ruleId":"422","severity":1,"message":"454","line":13,"column":5,"nodeType":"424","messageId":"425","endLine":13,"endColumn":16},{"ruleId":"422","severity":1,"message":"455","line":28,"column":23,"nodeType":"424","messageId":"425","endLine":28,"endColumn":35},{"ruleId":"422","severity":1,"message":"453","line":3,"column":10,"nodeType":"424","messageId":"425","endLine":3,"endColumn":21},{"ruleId":"422","severity":1,"message":"436","line":10,"column":5,"nodeType":"424","messageId":"425","endLine":10,"endColumn":10},{"ruleId":"422","severity":1,"message":"434","line":2,"column":15,"nodeType":"424","messageId":"425","endLine":2,"endColumn":24},{"ruleId":"422","severity":1,"message":"435","line":2,"column":26,"nodeType":"424","messageId":"425","endLine":2,"endColumn":30},{"ruleId":"422","severity":1,"message":"456","line":2,"column":44,"nodeType":"424","messageId":"425","endLine":2,"endColumn":54},{"ruleId":"422","severity":1,"message":"434","line":2,"column":15,"nodeType":"424","messageId":"425","endLine":2,"endColumn":24},{"ruleId":"422","severity":1,"message":"435","line":2,"column":26,"nodeType":"424","messageId":"425","endLine":2,"endColumn":30},{"ruleId":"422","severity":1,"message":"456","line":2,"column":44,"nodeType":"424","messageId":"425","endLine":2,"endColumn":54},{"ruleId":"422","severity":1,"message":"457","line":3,"column":10,"nodeType":"424","messageId":"425","endLine":3,"endColumn":17},{"ruleId":"422","severity":1,"message":"458","line":4,"column":8,"nodeType":"424","messageId":"425","endLine":4,"endColumn":17},"no-native-reassign",["459"],"no-negated-in-lhs",["460"],"@typescript-eslint/no-unused-vars","'Export' is defined but never used.","Identifier","unusedVar","no-unused-vars","'useStyles' is assigned a value but never used.",["459"],["460"],"'Alert' is defined but never used.","'Collapse' is defined but never used.",["459"],["460"],"'Container' is defined but never used.","'Grid' is defined but never used.","'Paper' is defined but never used.","'DialogContent' is defined but never used.","'ClickAwayListener' is defined but never used.","'Slide' is defined but never used.","'CssBaseline' is defined but never used.","'CircularProgress' is defined but never used.","'Title' is defined but never used.","'data' is assigned a value but never used.","'fixedHeightPaper' is assigned a value but never used.","'Chip' is defined but never used.","'ListItem' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'LinearProgressWithLabel' is defined but never used.","'key' is assigned a value but never used.","'NotificationsHandler' is defined but never used.","'CreateAnalysedData' is defined but never used.","'ColorPicker' is defined but never used.","'LabelSeries' is defined but never used.","'setUseCanvas' is assigned a value but never used.","'Typography' is defined but never used.","'connect' is defined but never used.","'ReactJson' is defined but never used.","no-global-assign","no-unsafe-negation"]